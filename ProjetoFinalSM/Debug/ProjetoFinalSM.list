
ProjetoFinalSM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005290  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000414  080053a0  080053a0  000153a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057b4  080057b4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  080057b4  080057b4  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080057b4  080057b4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057b4  080057b4  000157b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080057b8  080057b8  000157b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080057bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  200001dc  08005998  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000288  08005998  00020288  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009ead  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000196a  00000000  00000000  0002a0b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a00  00000000  00000000  0002ba20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000938  00000000  00000000  0002c420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e7b  00000000  00000000  0002cd58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a1d8  00000000  00000000  00044bd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087328  00000000  00000000  0004edab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d60d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b2c  00000000  00000000  000d6128  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08005388 	.word	0x08005388

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08005388 	.word	0x08005388

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b68:	b598      	push	{r3, r4, r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b6c:	f000 fbe8 	bl	8001340 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b70:	f000 f8d8 	bl	8000d24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b74:	f000 f962 	bl	8000e3c <MX_GPIO_Init>
  MX_TIM1_Init();
 8000b78:	f000 f910 	bl	8000d9c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  LCD_reset();
 8000b7c:	f000 f9ce 	bl	8000f1c <LCD_reset>
  LCD_print("Distancia (cm):");
 8000b80:	485f      	ldr	r0, [pc, #380]	; (8000d00 <main+0x198>)
 8000b82:	f000 fa57 	bl	8001034 <LCD_print>
  HAL_TIM_Base_Start(&htim1);
 8000b86:	485f      	ldr	r0, [pc, #380]	; (8000d04 <main+0x19c>)
 8000b88:	f001 fb26 	bl	80021d8 <HAL_TIM_Base_Start>
  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b92:	485d      	ldr	r0, [pc, #372]	; (8000d08 <main+0x1a0>)
 8000b94:	f000 fecf 	bl	8001936 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000b98:	2201      	movs	r2, #1
 8000b9a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b9e:	485a      	ldr	r0, [pc, #360]	; (8000d08 <main+0x1a0>)
 8000ba0:	f000 fec9 	bl	8001936 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000ba4:	4b57      	ldr	r3, [pc, #348]	; (8000d04 <main+0x19c>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	2200      	movs	r2, #0
 8000baa:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER (&htim1) < 10);  // wait for 10 us
 8000bac:	bf00      	nop
 8000bae:	4b55      	ldr	r3, [pc, #340]	; (8000d04 <main+0x19c>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bb4:	2b09      	cmp	r3, #9
 8000bb6:	d9fa      	bls.n	8000bae <main+0x46>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000bb8:	2200      	movs	r2, #0
 8000bba:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bbe:	4852      	ldr	r0, [pc, #328]	; (8000d08 <main+0x1a0>)
 8000bc0:	f000 feb9 	bl	8001936 <HAL_GPIO_WritePin>

	pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 8000bc4:	f000 fc14 	bl	80013f0 <HAL_GetTick>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	4a50      	ldr	r2, [pc, #320]	; (8000d0c <main+0x1a4>)
 8000bcc:	6013      	str	r3, [r2, #0]
	// wait for the echo pin to go high
	while (!(HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 10 >  HAL_GetTick());
 8000bce:	bf00      	nop
 8000bd0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bd4:	484c      	ldr	r0, [pc, #304]	; (8000d08 <main+0x1a0>)
 8000bd6:	f000 fe97 	bl	8001908 <HAL_GPIO_ReadPin>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d108      	bne.n	8000bf2 <main+0x8a>
 8000be0:	4b4a      	ldr	r3, [pc, #296]	; (8000d0c <main+0x1a4>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f103 040a 	add.w	r4, r3, #10
 8000be8:	f000 fc02 	bl	80013f0 <HAL_GetTick>
 8000bec:	4603      	mov	r3, r0
 8000bee:	429c      	cmp	r4, r3
 8000bf0:	d8ee      	bhi.n	8000bd0 <main+0x68>
	Value1 = __HAL_TIM_GET_COUNTER (&htim1);
 8000bf2:	4b44      	ldr	r3, [pc, #272]	; (8000d04 <main+0x19c>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bf8:	4a45      	ldr	r2, [pc, #276]	; (8000d10 <main+0x1a8>)
 8000bfa:	6013      	str	r3, [r2, #0]

	pMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 8000bfc:	f000 fbf8 	bl	80013f0 <HAL_GetTick>
 8000c00:	4603      	mov	r3, r0
 8000c02:	4a42      	ldr	r2, [pc, #264]	; (8000d0c <main+0x1a4>)
 8000c04:	6013      	str	r3, [r2, #0]
	// wait for the echo pin to go low
	while ((HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 50 > HAL_GetTick());
 8000c06:	bf00      	nop
 8000c08:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c0c:	483e      	ldr	r0, [pc, #248]	; (8000d08 <main+0x1a0>)
 8000c0e:	f000 fe7b 	bl	8001908 <HAL_GPIO_ReadPin>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d008      	beq.n	8000c2a <main+0xc2>
 8000c18:	4b3c      	ldr	r3, [pc, #240]	; (8000d0c <main+0x1a4>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f103 0432 	add.w	r4, r3, #50	; 0x32
 8000c20:	f000 fbe6 	bl	80013f0 <HAL_GetTick>
 8000c24:	4603      	mov	r3, r0
 8000c26:	429c      	cmp	r4, r3
 8000c28:	d8ee      	bhi.n	8000c08 <main+0xa0>
	Value2 = __HAL_TIM_GET_COUNTER (&htim1);
 8000c2a:	4b36      	ldr	r3, [pc, #216]	; (8000d04 <main+0x19c>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c30:	4a38      	ldr	r2, [pc, #224]	; (8000d14 <main+0x1ac>)
 8000c32:	6013      	str	r3, [r2, #0]

	Distance = (Value2-Value1)* 0.034/2;
 8000c34:	4b37      	ldr	r3, [pc, #220]	; (8000d14 <main+0x1ac>)
 8000c36:	681a      	ldr	r2, [r3, #0]
 8000c38:	4b35      	ldr	r3, [pc, #212]	; (8000d10 <main+0x1a8>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	1ad3      	subs	r3, r2, r3
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f7ff fbd0 	bl	80003e4 <__aeabi_ui2d>
 8000c44:	a32a      	add	r3, pc, #168	; (adr r3, 8000cf0 <main+0x188>)
 8000c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c4a:	f7ff fc45 	bl	80004d8 <__aeabi_dmul>
 8000c4e:	4602      	mov	r2, r0
 8000c50:	460b      	mov	r3, r1
 8000c52:	4610      	mov	r0, r2
 8000c54:	4619      	mov	r1, r3
 8000c56:	f04f 0200 	mov.w	r2, #0
 8000c5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c5e:	f7ff fd65 	bl	800072c <__aeabi_ddiv>
 8000c62:	4602      	mov	r2, r0
 8000c64:	460b      	mov	r3, r1
 8000c66:	4610      	mov	r0, r2
 8000c68:	4619      	mov	r1, r3
 8000c6a:	f7ff ff0d 	bl	8000a88 <__aeabi_d2uiz>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	4a29      	ldr	r2, [pc, #164]	; (8000d18 <main+0x1b0>)
 8000c72:	6013      	str	r3, [r2, #0]
	Distance2 = ((Value2-Value1)* 0.034/2)*9.2;
 8000c74:	4b27      	ldr	r3, [pc, #156]	; (8000d14 <main+0x1ac>)
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	4b25      	ldr	r3, [pc, #148]	; (8000d10 <main+0x1a8>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	1ad3      	subs	r3, r2, r3
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f7ff fbb0 	bl	80003e4 <__aeabi_ui2d>
 8000c84:	a31a      	add	r3, pc, #104	; (adr r3, 8000cf0 <main+0x188>)
 8000c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c8a:	f7ff fc25 	bl	80004d8 <__aeabi_dmul>
 8000c8e:	4602      	mov	r2, r0
 8000c90:	460b      	mov	r3, r1
 8000c92:	4610      	mov	r0, r2
 8000c94:	4619      	mov	r1, r3
 8000c96:	f04f 0200 	mov.w	r2, #0
 8000c9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c9e:	f7ff fd45 	bl	800072c <__aeabi_ddiv>
 8000ca2:	4602      	mov	r2, r0
 8000ca4:	460b      	mov	r3, r1
 8000ca6:	4610      	mov	r0, r2
 8000ca8:	4619      	mov	r1, r3
 8000caa:	a313      	add	r3, pc, #76	; (adr r3, 8000cf8 <main+0x190>)
 8000cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cb0:	f7ff fc12 	bl	80004d8 <__aeabi_dmul>
 8000cb4:	4602      	mov	r2, r0
 8000cb6:	460b      	mov	r3, r1
 8000cb8:	4610      	mov	r0, r2
 8000cba:	4619      	mov	r1, r3
 8000cbc:	f7ff ff04 	bl	8000ac8 <__aeabi_d2f>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	4a16      	ldr	r2, [pc, #88]	; (8000d1c <main+0x1b4>)
 8000cc4:	6013      	str	r3, [r2, #0]
	LCD(0xC0, 0);
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	20c0      	movs	r0, #192	; 0xc0
 8000cca:	f000 f93f 	bl	8000f4c <LCD>
	//sprintf(text, "%lu", Distance);
	gcvt(Distance2, 4, text);
 8000cce:	4b13      	ldr	r3, [pc, #76]	; (8000d1c <main+0x1b4>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f7ff fba8 	bl	8000428 <__aeabi_f2d>
 8000cd8:	4b11      	ldr	r3, [pc, #68]	; (8000d20 <main+0x1b8>)
 8000cda:	2204      	movs	r2, #4
 8000cdc:	f001 fcca 	bl	8002674 <gcvt>
	LCD_print(text);
 8000ce0:	480f      	ldr	r0, [pc, #60]	; (8000d20 <main+0x1b8>)
 8000ce2:	f000 f9a7 	bl	8001034 <LCD_print>
	HAL_Delay(50);
 8000ce6:	2032      	movs	r0, #50	; 0x32
 8000ce8:	f000 fb8c 	bl	8001404 <HAL_Delay>
  {
 8000cec:	e754      	b.n	8000b98 <main+0x30>
 8000cee:	bf00      	nop
 8000cf0:	b020c49c 	.word	0xb020c49c
 8000cf4:	3fa16872 	.word	0x3fa16872
 8000cf8:	66666666 	.word	0x66666666
 8000cfc:	40226666 	.word	0x40226666
 8000d00:	080053a0 	.word	0x080053a0
 8000d04:	2000022c 	.word	0x2000022c
 8000d08:	40010800 	.word	0x40010800
 8000d0c:	20000214 	.word	0x20000214
 8000d10:	200001f8 	.word	0x200001f8
 8000d14:	200001fc 	.word	0x200001fc
 8000d18:	20000200 	.word	0x20000200
 8000d1c:	20000210 	.word	0x20000210
 8000d20:	20000218 	.word	0x20000218

08000d24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b090      	sub	sp, #64	; 0x40
 8000d28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d2a:	f107 0318 	add.w	r3, r7, #24
 8000d2e:	2228      	movs	r2, #40	; 0x28
 8000d30:	2100      	movs	r1, #0
 8000d32:	4618      	mov	r0, r3
 8000d34:	f001 fcec 	bl	8002710 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d38:	1d3b      	adds	r3, r7, #4
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]
 8000d3e:	605a      	str	r2, [r3, #4]
 8000d40:	609a      	str	r2, [r3, #8]
 8000d42:	60da      	str	r2, [r3, #12]
 8000d44:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d46:	2302      	movs	r3, #2
 8000d48:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d4e:	2310      	movs	r3, #16
 8000d50:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d52:	2300      	movs	r3, #0
 8000d54:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d56:	f107 0318 	add.w	r3, r7, #24
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f000 fe04 	bl	8001968 <HAL_RCC_OscConfig>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000d66:	f000 f982 	bl	800106e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d6a:	230f      	movs	r3, #15
 8000d6c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d72:	2300      	movs	r3, #0
 8000d74:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d76:	2300      	movs	r3, #0
 8000d78:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d7e:	1d3b      	adds	r3, r7, #4
 8000d80:	2100      	movs	r1, #0
 8000d82:	4618      	mov	r0, r3
 8000d84:	f001 f870 	bl	8001e68 <HAL_RCC_ClockConfig>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000d8e:	f000 f96e 	bl	800106e <Error_Handler>
  }
}
 8000d92:	bf00      	nop
 8000d94:	3740      	adds	r7, #64	; 0x40
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
	...

08000d9c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b086      	sub	sp, #24
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000da2:	f107 0308 	add.w	r3, r7, #8
 8000da6:	2200      	movs	r2, #0
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	605a      	str	r2, [r3, #4]
 8000dac:	609a      	str	r2, [r3, #8]
 8000dae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000db0:	463b      	mov	r3, r7
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000db8:	4b1e      	ldr	r3, [pc, #120]	; (8000e34 <MX_TIM1_Init+0x98>)
 8000dba:	4a1f      	ldr	r2, [pc, #124]	; (8000e38 <MX_TIM1_Init+0x9c>)
 8000dbc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8000dbe:	4b1d      	ldr	r3, [pc, #116]	; (8000e34 <MX_TIM1_Init+0x98>)
 8000dc0:	2247      	movs	r2, #71	; 0x47
 8000dc2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc4:	4b1b      	ldr	r3, [pc, #108]	; (8000e34 <MX_TIM1_Init+0x98>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000dca:	4b1a      	ldr	r3, [pc, #104]	; (8000e34 <MX_TIM1_Init+0x98>)
 8000dcc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dd0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dd2:	4b18      	ldr	r3, [pc, #96]	; (8000e34 <MX_TIM1_Init+0x98>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000dd8:	4b16      	ldr	r3, [pc, #88]	; (8000e34 <MX_TIM1_Init+0x98>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dde:	4b15      	ldr	r3, [pc, #84]	; (8000e34 <MX_TIM1_Init+0x98>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000de4:	4813      	ldr	r0, [pc, #76]	; (8000e34 <MX_TIM1_Init+0x98>)
 8000de6:	f001 f9a7 	bl	8002138 <HAL_TIM_Base_Init>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000df0:	f000 f93d 	bl	800106e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000df4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000df8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000dfa:	f107 0308 	add.w	r3, r7, #8
 8000dfe:	4619      	mov	r1, r3
 8000e00:	480c      	ldr	r0, [pc, #48]	; (8000e34 <MX_TIM1_Init+0x98>)
 8000e02:	f001 fa2d 	bl	8002260 <HAL_TIM_ConfigClockSource>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000e0c:	f000 f92f 	bl	800106e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e10:	2300      	movs	r3, #0
 8000e12:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e14:	2300      	movs	r3, #0
 8000e16:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e18:	463b      	mov	r3, r7
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4805      	ldr	r0, [pc, #20]	; (8000e34 <MX_TIM1_Init+0x98>)
 8000e1e:	f001 fbd1 	bl	80025c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000e28:	f000 f921 	bl	800106e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000e2c:	bf00      	nop
 8000e2e:	3718      	adds	r7, #24
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	2000022c 	.word	0x2000022c
 8000e38:	40012c00 	.word	0x40012c00

08000e3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b088      	sub	sp, #32
 8000e40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e42:	f107 0310 	add.w	r3, r7, #16
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	605a      	str	r2, [r3, #4]
 8000e4c:	609a      	str	r2, [r3, #8]
 8000e4e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e50:	4b2f      	ldr	r3, [pc, #188]	; (8000f10 <MX_GPIO_Init+0xd4>)
 8000e52:	699b      	ldr	r3, [r3, #24]
 8000e54:	4a2e      	ldr	r2, [pc, #184]	; (8000f10 <MX_GPIO_Init+0xd4>)
 8000e56:	f043 0320 	orr.w	r3, r3, #32
 8000e5a:	6193      	str	r3, [r2, #24]
 8000e5c:	4b2c      	ldr	r3, [pc, #176]	; (8000f10 <MX_GPIO_Init+0xd4>)
 8000e5e:	699b      	ldr	r3, [r3, #24]
 8000e60:	f003 0320 	and.w	r3, r3, #32
 8000e64:	60fb      	str	r3, [r7, #12]
 8000e66:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e68:	4b29      	ldr	r3, [pc, #164]	; (8000f10 <MX_GPIO_Init+0xd4>)
 8000e6a:	699b      	ldr	r3, [r3, #24]
 8000e6c:	4a28      	ldr	r2, [pc, #160]	; (8000f10 <MX_GPIO_Init+0xd4>)
 8000e6e:	f043 0308 	orr.w	r3, r3, #8
 8000e72:	6193      	str	r3, [r2, #24]
 8000e74:	4b26      	ldr	r3, [pc, #152]	; (8000f10 <MX_GPIO_Init+0xd4>)
 8000e76:	699b      	ldr	r3, [r3, #24]
 8000e78:	f003 0308 	and.w	r3, r3, #8
 8000e7c:	60bb      	str	r3, [r7, #8]
 8000e7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e80:	4b23      	ldr	r3, [pc, #140]	; (8000f10 <MX_GPIO_Init+0xd4>)
 8000e82:	699b      	ldr	r3, [r3, #24]
 8000e84:	4a22      	ldr	r2, [pc, #136]	; (8000f10 <MX_GPIO_Init+0xd4>)
 8000e86:	f043 0304 	orr.w	r3, r3, #4
 8000e8a:	6193      	str	r3, [r2, #24]
 8000e8c:	4b20      	ldr	r3, [pc, #128]	; (8000f10 <MX_GPIO_Init+0xd4>)
 8000e8e:	699b      	ldr	r3, [r3, #24]
 8000e90:	f003 0304 	and.w	r3, r3, #4
 8000e94:	607b      	str	r3, [r7, #4]
 8000e96:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000e98:	2200      	movs	r2, #0
 8000e9a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8000e9e:	481d      	ldr	r0, [pc, #116]	; (8000f14 <MX_GPIO_Init+0xd8>)
 8000ea0:	f000 fd49 	bl	8001936 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000eaa:	481b      	ldr	r0, [pc, #108]	; (8000f18 <MX_GPIO_Init+0xdc>)
 8000eac:	f000 fd43 	bl	8001936 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 PB2 PB3
                           PB4 PB5 PB6 PB7
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000eb0:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8000eb4:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec2:	f107 0310 	add.w	r3, r7, #16
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4812      	ldr	r0, [pc, #72]	; (8000f14 <MX_GPIO_Init+0xd8>)
 8000eca:	f000 fba3 	bl	8001614 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000ece:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ed2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000edc:	f107 0310 	add.w	r3, r7, #16
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	480d      	ldr	r0, [pc, #52]	; (8000f18 <MX_GPIO_Init+0xdc>)
 8000ee4:	f000 fb96 	bl	8001614 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ee8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000eec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000efa:	f107 0310 	add.w	r3, r7, #16
 8000efe:	4619      	mov	r1, r3
 8000f00:	4805      	ldr	r0, [pc, #20]	; (8000f18 <MX_GPIO_Init+0xdc>)
 8000f02:	f000 fb87 	bl	8001614 <HAL_GPIO_Init>

}
 8000f06:	bf00      	nop
 8000f08:	3720      	adds	r7, #32
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40021000 	.word	0x40021000
 8000f14:	40010c00 	.word	0x40010c00
 8000f18:	40010800 	.word	0x40010800

08000f1c <LCD_reset>:

/* USER CODE BEGIN 4 */
void LCD_reset(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
	LCD(0x38, 0);
 8000f20:	2100      	movs	r1, #0
 8000f22:	2038      	movs	r0, #56	; 0x38
 8000f24:	f000 f812 	bl	8000f4c <LCD>
	LCD(0x0C, 0);
 8000f28:	2100      	movs	r1, #0
 8000f2a:	200c      	movs	r0, #12
 8000f2c:	f000 f80e 	bl	8000f4c <LCD>
	LCD(0x06, 0);
 8000f30:	2100      	movs	r1, #0
 8000f32:	2006      	movs	r0, #6
 8000f34:	f000 f80a 	bl	8000f4c <LCD>
	LCD(0x01, 0);
 8000f38:	2100      	movs	r1, #0
 8000f3a:	2001      	movs	r0, #1
 8000f3c:	f000 f806 	bl	8000f4c <LCD>
	LCD(0x80, 0);
 8000f40:	2100      	movs	r1, #0
 8000f42:	2080      	movs	r0, #128	; 0x80
 8000f44:	f000 f802 	bl	8000f4c <LCD>
}
 8000f48:	bf00      	nop
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <LCD>:

void LCD(uint8_t val, uint8_t cmd)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	460a      	mov	r2, r1
 8000f56:	71fb      	strb	r3, [r7, #7]
 8000f58:	4613      	mov	r3, r2
 8000f5a:	71bb      	strb	r3, [r7, #6]
	uint8_t data;
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, cmd);
 8000f5c:	79bb      	ldrb	r3, [r7, #6]
 8000f5e:	461a      	mov	r2, r3
 8000f60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f64:	4832      	ldr	r0, [pc, #200]	; (8001030 <LCD+0xe4>)
 8000f66:	f000 fce6 	bl	8001936 <HAL_GPIO_WritePin>

	data = val & 0x01;
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	f003 0301 	and.w	r3, r3, #1
 8000f70:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, data);
 8000f72:	7bfb      	ldrb	r3, [r7, #15]
 8000f74:	461a      	mov	r2, r3
 8000f76:	2101      	movs	r1, #1
 8000f78:	482d      	ldr	r0, [pc, #180]	; (8001030 <LCD+0xe4>)
 8000f7a:	f000 fcdc 	bl	8001936 <HAL_GPIO_WritePin>
	data = val & 0x02;
 8000f7e:	79fb      	ldrb	r3, [r7, #7]
 8000f80:	f003 0302 	and.w	r3, r3, #2
 8000f84:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, data);
 8000f86:	7bfb      	ldrb	r3, [r7, #15]
 8000f88:	461a      	mov	r2, r3
 8000f8a:	2102      	movs	r1, #2
 8000f8c:	4828      	ldr	r0, [pc, #160]	; (8001030 <LCD+0xe4>)
 8000f8e:	f000 fcd2 	bl	8001936 <HAL_GPIO_WritePin>
	data = val & 0x04;
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	f003 0304 	and.w	r3, r3, #4
 8000f98:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, data);
 8000f9a:	7bfb      	ldrb	r3, [r7, #15]
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	2104      	movs	r1, #4
 8000fa0:	4823      	ldr	r0, [pc, #140]	; (8001030 <LCD+0xe4>)
 8000fa2:	f000 fcc8 	bl	8001936 <HAL_GPIO_WritePin>
	data = val & 0x08;
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	f003 0308 	and.w	r3, r3, #8
 8000fac:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, data);
 8000fae:	7bfb      	ldrb	r3, [r7, #15]
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	2108      	movs	r1, #8
 8000fb4:	481e      	ldr	r0, [pc, #120]	; (8001030 <LCD+0xe4>)
 8000fb6:	f000 fcbe 	bl	8001936 <HAL_GPIO_WritePin>
	data = val & 0x10;
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	f003 0310 	and.w	r3, r3, #16
 8000fc0:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, data);
 8000fc2:	7bfb      	ldrb	r3, [r7, #15]
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	2110      	movs	r1, #16
 8000fc8:	4819      	ldr	r0, [pc, #100]	; (8001030 <LCD+0xe4>)
 8000fca:	f000 fcb4 	bl	8001936 <HAL_GPIO_WritePin>
	data = val & 0x20;
 8000fce:	79fb      	ldrb	r3, [r7, #7]
 8000fd0:	f003 0320 	and.w	r3, r3, #32
 8000fd4:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, data);
 8000fd6:	7bfb      	ldrb	r3, [r7, #15]
 8000fd8:	461a      	mov	r2, r3
 8000fda:	2120      	movs	r1, #32
 8000fdc:	4814      	ldr	r0, [pc, #80]	; (8001030 <LCD+0xe4>)
 8000fde:	f000 fcaa 	bl	8001936 <HAL_GPIO_WritePin>
	data = val & 0x40;
 8000fe2:	79fb      	ldrb	r3, [r7, #7]
 8000fe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fe8:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, data);
 8000fea:	7bfb      	ldrb	r3, [r7, #15]
 8000fec:	461a      	mov	r2, r3
 8000fee:	2140      	movs	r1, #64	; 0x40
 8000ff0:	480f      	ldr	r0, [pc, #60]	; (8001030 <LCD+0xe4>)
 8000ff2:	f000 fca0 	bl	8001936 <HAL_GPIO_WritePin>
	data = val & 0x80;
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000ffc:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, data);
 8000ffe:	7bfb      	ldrb	r3, [r7, #15]
 8001000:	461a      	mov	r2, r3
 8001002:	2180      	movs	r1, #128	; 0x80
 8001004:	480a      	ldr	r0, [pc, #40]	; (8001030 <LCD+0xe4>)
 8001006:	f000 fc96 	bl	8001936 <HAL_GPIO_WritePin>

	/* Enable pin */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800100a:	2201      	movs	r2, #1
 800100c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001010:	4807      	ldr	r0, [pc, #28]	; (8001030 <LCD+0xe4>)
 8001012:	f000 fc90 	bl	8001936 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001016:	200a      	movs	r0, #10
 8001018:	f000 f9f4 	bl	8001404 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800101c:	2200      	movs	r2, #0
 800101e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001022:	4803      	ldr	r0, [pc, #12]	; (8001030 <LCD+0xe4>)
 8001024:	f000 fc87 	bl	8001936 <HAL_GPIO_WritePin>


}
 8001028:	bf00      	nop
 800102a:	3710      	adds	r7, #16
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	40010c00 	.word	0x40010c00

08001034 <LCD_print>:

void LCD_print(char *p)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
	int i;
	for(i = 0; p[i] != '\0'; i++)
 800103c:	2300      	movs	r3, #0
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	e00a      	b.n	8001058 <LCD_print+0x24>
		LCD(p[i], 1);
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	687a      	ldr	r2, [r7, #4]
 8001046:	4413      	add	r3, r2
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	2101      	movs	r1, #1
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff ff7d 	bl	8000f4c <LCD>
	for(i = 0; p[i] != '\0'; i++)
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	3301      	adds	r3, #1
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	687a      	ldr	r2, [r7, #4]
 800105c:	4413      	add	r3, r2
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d1ee      	bne.n	8001042 <LCD_print+0xe>
}
 8001064:	bf00      	nop
 8001066:	bf00      	nop
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800106e:	b480      	push	{r7}
 8001070:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001072:	b672      	cpsid	i
}
 8001074:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001076:	e7fe      	b.n	8001076 <Error_Handler+0x8>

08001078 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001078:	b480      	push	{r7}
 800107a:	b085      	sub	sp, #20
 800107c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800107e:	4b15      	ldr	r3, [pc, #84]	; (80010d4 <HAL_MspInit+0x5c>)
 8001080:	699b      	ldr	r3, [r3, #24]
 8001082:	4a14      	ldr	r2, [pc, #80]	; (80010d4 <HAL_MspInit+0x5c>)
 8001084:	f043 0301 	orr.w	r3, r3, #1
 8001088:	6193      	str	r3, [r2, #24]
 800108a:	4b12      	ldr	r3, [pc, #72]	; (80010d4 <HAL_MspInit+0x5c>)
 800108c:	699b      	ldr	r3, [r3, #24]
 800108e:	f003 0301 	and.w	r3, r3, #1
 8001092:	60bb      	str	r3, [r7, #8]
 8001094:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001096:	4b0f      	ldr	r3, [pc, #60]	; (80010d4 <HAL_MspInit+0x5c>)
 8001098:	69db      	ldr	r3, [r3, #28]
 800109a:	4a0e      	ldr	r2, [pc, #56]	; (80010d4 <HAL_MspInit+0x5c>)
 800109c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010a0:	61d3      	str	r3, [r2, #28]
 80010a2:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <HAL_MspInit+0x5c>)
 80010a4:	69db      	ldr	r3, [r3, #28]
 80010a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010aa:	607b      	str	r3, [r7, #4]
 80010ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80010ae:	4b0a      	ldr	r3, [pc, #40]	; (80010d8 <HAL_MspInit+0x60>)
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80010c2:	60fb      	str	r3, [r7, #12]
 80010c4:	4a04      	ldr	r2, [pc, #16]	; (80010d8 <HAL_MspInit+0x60>)
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ca:	bf00      	nop
 80010cc:	3714      	adds	r7, #20
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bc80      	pop	{r7}
 80010d2:	4770      	bx	lr
 80010d4:	40021000 	.word	0x40021000
 80010d8:	40010000 	.word	0x40010000

080010dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a09      	ldr	r2, [pc, #36]	; (8001110 <HAL_TIM_Base_MspInit+0x34>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d10b      	bne.n	8001106 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010ee:	4b09      	ldr	r3, [pc, #36]	; (8001114 <HAL_TIM_Base_MspInit+0x38>)
 80010f0:	699b      	ldr	r3, [r3, #24]
 80010f2:	4a08      	ldr	r2, [pc, #32]	; (8001114 <HAL_TIM_Base_MspInit+0x38>)
 80010f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010f8:	6193      	str	r3, [r2, #24]
 80010fa:	4b06      	ldr	r3, [pc, #24]	; (8001114 <HAL_TIM_Base_MspInit+0x38>)
 80010fc:	699b      	ldr	r3, [r3, #24]
 80010fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001106:	bf00      	nop
 8001108:	3714      	adds	r7, #20
 800110a:	46bd      	mov	sp, r7
 800110c:	bc80      	pop	{r7}
 800110e:	4770      	bx	lr
 8001110:	40012c00 	.word	0x40012c00
 8001114:	40021000 	.word	0x40021000

08001118 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800111c:	e7fe      	b.n	800111c <NMI_Handler+0x4>

0800111e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800111e:	b480      	push	{r7}
 8001120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001122:	e7fe      	b.n	8001122 <HardFault_Handler+0x4>

08001124 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001128:	e7fe      	b.n	8001128 <MemManage_Handler+0x4>

0800112a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800112a:	b480      	push	{r7}
 800112c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800112e:	e7fe      	b.n	800112e <BusFault_Handler+0x4>

08001130 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001134:	e7fe      	b.n	8001134 <UsageFault_Handler+0x4>

08001136 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001136:	b480      	push	{r7}
 8001138:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800113a:	bf00      	nop
 800113c:	46bd      	mov	sp, r7
 800113e:	bc80      	pop	{r7}
 8001140:	4770      	bx	lr

08001142 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001142:	b480      	push	{r7}
 8001144:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001146:	bf00      	nop
 8001148:	46bd      	mov	sp, r7
 800114a:	bc80      	pop	{r7}
 800114c:	4770      	bx	lr

0800114e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800114e:	b480      	push	{r7}
 8001150:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001152:	bf00      	nop
 8001154:	46bd      	mov	sp, r7
 8001156:	bc80      	pop	{r7}
 8001158:	4770      	bx	lr

0800115a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800115a:	b580      	push	{r7, lr}
 800115c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800115e:	f000 f935 	bl	80013cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}

08001166 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001166:	b480      	push	{r7}
 8001168:	af00      	add	r7, sp, #0
	return 1;
 800116a:	2301      	movs	r3, #1
}
 800116c:	4618      	mov	r0, r3
 800116e:	46bd      	mov	sp, r7
 8001170:	bc80      	pop	{r7}
 8001172:	4770      	bx	lr

08001174 <_kill>:

int _kill(int pid, int sig)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800117e:	f001 fa9d 	bl	80026bc <__errno>
 8001182:	4603      	mov	r3, r0
 8001184:	2216      	movs	r2, #22
 8001186:	601a      	str	r2, [r3, #0]
	return -1;
 8001188:	f04f 33ff 	mov.w	r3, #4294967295
}
 800118c:	4618      	mov	r0, r3
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}

08001194 <_exit>:

void _exit (int status)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800119c:	f04f 31ff 	mov.w	r1, #4294967295
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f7ff ffe7 	bl	8001174 <_kill>
	while (1) {}		/* Make sure we hang here */
 80011a6:	e7fe      	b.n	80011a6 <_exit+0x12>

080011a8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011b4:	2300      	movs	r3, #0
 80011b6:	617b      	str	r3, [r7, #20]
 80011b8:	e00a      	b.n	80011d0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80011ba:	f3af 8000 	nop.w
 80011be:	4601      	mov	r1, r0
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	1c5a      	adds	r2, r3, #1
 80011c4:	60ba      	str	r2, [r7, #8]
 80011c6:	b2ca      	uxtb	r2, r1
 80011c8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	3301      	adds	r3, #1
 80011ce:	617b      	str	r3, [r7, #20]
 80011d0:	697a      	ldr	r2, [r7, #20]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	dbf0      	blt.n	80011ba <_read+0x12>
	}

return len;
 80011d8:	687b      	ldr	r3, [r7, #4]
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3718      	adds	r7, #24
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b086      	sub	sp, #24
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	60f8      	str	r0, [r7, #12]
 80011ea:	60b9      	str	r1, [r7, #8]
 80011ec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011ee:	2300      	movs	r3, #0
 80011f0:	617b      	str	r3, [r7, #20]
 80011f2:	e009      	b.n	8001208 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	1c5a      	adds	r2, r3, #1
 80011f8:	60ba      	str	r2, [r7, #8]
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	4618      	mov	r0, r3
 80011fe:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	3301      	adds	r3, #1
 8001206:	617b      	str	r3, [r7, #20]
 8001208:	697a      	ldr	r2, [r7, #20]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	429a      	cmp	r2, r3
 800120e:	dbf1      	blt.n	80011f4 <_write+0x12>
	}
	return len;
 8001210:	687b      	ldr	r3, [r7, #4]
}
 8001212:	4618      	mov	r0, r3
 8001214:	3718      	adds	r7, #24
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <_close>:

int _close(int file)
{
 800121a:	b480      	push	{r7}
 800121c:	b083      	sub	sp, #12
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
	return -1;
 8001222:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001226:	4618      	mov	r0, r3
 8001228:	370c      	adds	r7, #12
 800122a:	46bd      	mov	sp, r7
 800122c:	bc80      	pop	{r7}
 800122e:	4770      	bx	lr

08001230 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001240:	605a      	str	r2, [r3, #4]
	return 0;
 8001242:	2300      	movs	r3, #0
}
 8001244:	4618      	mov	r0, r3
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	bc80      	pop	{r7}
 800124c:	4770      	bx	lr

0800124e <_isatty>:

int _isatty(int file)
{
 800124e:	b480      	push	{r7}
 8001250:	b083      	sub	sp, #12
 8001252:	af00      	add	r7, sp, #0
 8001254:	6078      	str	r0, [r7, #4]
	return 1;
 8001256:	2301      	movs	r3, #1
}
 8001258:	4618      	mov	r0, r3
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	bc80      	pop	{r7}
 8001260:	4770      	bx	lr

08001262 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001262:	b480      	push	{r7}
 8001264:	b085      	sub	sp, #20
 8001266:	af00      	add	r7, sp, #0
 8001268:	60f8      	str	r0, [r7, #12]
 800126a:	60b9      	str	r1, [r7, #8]
 800126c:	607a      	str	r2, [r7, #4]
	return 0;
 800126e:	2300      	movs	r3, #0
}
 8001270:	4618      	mov	r0, r3
 8001272:	3714      	adds	r7, #20
 8001274:	46bd      	mov	sp, r7
 8001276:	bc80      	pop	{r7}
 8001278:	4770      	bx	lr
	...

0800127c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b086      	sub	sp, #24
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001284:	4a14      	ldr	r2, [pc, #80]	; (80012d8 <_sbrk+0x5c>)
 8001286:	4b15      	ldr	r3, [pc, #84]	; (80012dc <_sbrk+0x60>)
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001290:	4b13      	ldr	r3, [pc, #76]	; (80012e0 <_sbrk+0x64>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d102      	bne.n	800129e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001298:	4b11      	ldr	r3, [pc, #68]	; (80012e0 <_sbrk+0x64>)
 800129a:	4a12      	ldr	r2, [pc, #72]	; (80012e4 <_sbrk+0x68>)
 800129c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800129e:	4b10      	ldr	r3, [pc, #64]	; (80012e0 <_sbrk+0x64>)
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4413      	add	r3, r2
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d207      	bcs.n	80012bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012ac:	f001 fa06 	bl	80026bc <__errno>
 80012b0:	4603      	mov	r3, r0
 80012b2:	220c      	movs	r2, #12
 80012b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012b6:	f04f 33ff 	mov.w	r3, #4294967295
 80012ba:	e009      	b.n	80012d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012bc:	4b08      	ldr	r3, [pc, #32]	; (80012e0 <_sbrk+0x64>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012c2:	4b07      	ldr	r3, [pc, #28]	; (80012e0 <_sbrk+0x64>)
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4413      	add	r3, r2
 80012ca:	4a05      	ldr	r2, [pc, #20]	; (80012e0 <_sbrk+0x64>)
 80012cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012ce:	68fb      	ldr	r3, [r7, #12]
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3718      	adds	r7, #24
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	20002800 	.word	0x20002800
 80012dc:	00000400 	.word	0x00000400
 80012e0:	20000204 	.word	0x20000204
 80012e4:	20000288 	.word	0x20000288

080012e8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012ec:	bf00      	nop
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bc80      	pop	{r7}
 80012f2:	4770      	bx	lr

080012f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012f4:	480c      	ldr	r0, [pc, #48]	; (8001328 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012f6:	490d      	ldr	r1, [pc, #52]	; (800132c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012f8:	4a0d      	ldr	r2, [pc, #52]	; (8001330 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012fc:	e002      	b.n	8001304 <LoopCopyDataInit>

080012fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001300:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001302:	3304      	adds	r3, #4

08001304 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001304:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001306:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001308:	d3f9      	bcc.n	80012fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800130a:	4a0a      	ldr	r2, [pc, #40]	; (8001334 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800130c:	4c0a      	ldr	r4, [pc, #40]	; (8001338 <LoopFillZerobss+0x22>)
  movs r3, #0
 800130e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001310:	e001      	b.n	8001316 <LoopFillZerobss>

08001312 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001312:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001314:	3204      	adds	r2, #4

08001316 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001316:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001318:	d3fb      	bcc.n	8001312 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800131a:	f7ff ffe5 	bl	80012e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800131e:	f001 f9d3 	bl	80026c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001322:	f7ff fc21 	bl	8000b68 <main>
  bx lr
 8001326:	4770      	bx	lr
  ldr r0, =_sdata
 8001328:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800132c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001330:	080057bc 	.word	0x080057bc
  ldr r2, =_sbss
 8001334:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001338:	20000288 	.word	0x20000288

0800133c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800133c:	e7fe      	b.n	800133c <ADC1_2_IRQHandler>
	...

08001340 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001344:	4b08      	ldr	r3, [pc, #32]	; (8001368 <HAL_Init+0x28>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a07      	ldr	r2, [pc, #28]	; (8001368 <HAL_Init+0x28>)
 800134a:	f043 0310 	orr.w	r3, r3, #16
 800134e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001350:	2003      	movs	r0, #3
 8001352:	f000 f92b 	bl	80015ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001356:	200f      	movs	r0, #15
 8001358:	f000 f808 	bl	800136c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800135c:	f7ff fe8c 	bl	8001078 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001360:	2300      	movs	r3, #0
}
 8001362:	4618      	mov	r0, r3
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	40022000 	.word	0x40022000

0800136c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001374:	4b12      	ldr	r3, [pc, #72]	; (80013c0 <HAL_InitTick+0x54>)
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	4b12      	ldr	r3, [pc, #72]	; (80013c4 <HAL_InitTick+0x58>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	4619      	mov	r1, r3
 800137e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001382:	fbb3 f3f1 	udiv	r3, r3, r1
 8001386:	fbb2 f3f3 	udiv	r3, r2, r3
 800138a:	4618      	mov	r0, r3
 800138c:	f000 f935 	bl	80015fa <HAL_SYSTICK_Config>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e00e      	b.n	80013b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2b0f      	cmp	r3, #15
 800139e:	d80a      	bhi.n	80013b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013a0:	2200      	movs	r2, #0
 80013a2:	6879      	ldr	r1, [r7, #4]
 80013a4:	f04f 30ff 	mov.w	r0, #4294967295
 80013a8:	f000 f90b 	bl	80015c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013ac:	4a06      	ldr	r2, [pc, #24]	; (80013c8 <HAL_InitTick+0x5c>)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013b2:	2300      	movs	r3, #0
 80013b4:	e000      	b.n	80013b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3708      	adds	r7, #8
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	20000000 	.word	0x20000000
 80013c4:	20000008 	.word	0x20000008
 80013c8:	20000004 	.word	0x20000004

080013cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013d0:	4b05      	ldr	r3, [pc, #20]	; (80013e8 <HAL_IncTick+0x1c>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	461a      	mov	r2, r3
 80013d6:	4b05      	ldr	r3, [pc, #20]	; (80013ec <HAL_IncTick+0x20>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4413      	add	r3, r2
 80013dc:	4a03      	ldr	r2, [pc, #12]	; (80013ec <HAL_IncTick+0x20>)
 80013de:	6013      	str	r3, [r2, #0]
}
 80013e0:	bf00      	nop
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bc80      	pop	{r7}
 80013e6:	4770      	bx	lr
 80013e8:	20000008 	.word	0x20000008
 80013ec:	20000274 	.word	0x20000274

080013f0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  return uwTick;
 80013f4:	4b02      	ldr	r3, [pc, #8]	; (8001400 <HAL_GetTick+0x10>)
 80013f6:	681b      	ldr	r3, [r3, #0]
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bc80      	pop	{r7}
 80013fe:	4770      	bx	lr
 8001400:	20000274 	.word	0x20000274

08001404 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800140c:	f7ff fff0 	bl	80013f0 <HAL_GetTick>
 8001410:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800141c:	d005      	beq.n	800142a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800141e:	4b0a      	ldr	r3, [pc, #40]	; (8001448 <HAL_Delay+0x44>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	461a      	mov	r2, r3
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	4413      	add	r3, r2
 8001428:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800142a:	bf00      	nop
 800142c:	f7ff ffe0 	bl	80013f0 <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	68fa      	ldr	r2, [r7, #12]
 8001438:	429a      	cmp	r2, r3
 800143a:	d8f7      	bhi.n	800142c <HAL_Delay+0x28>
  {
  }
}
 800143c:	bf00      	nop
 800143e:	bf00      	nop
 8001440:	3710      	adds	r7, #16
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	20000008 	.word	0x20000008

0800144c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800144c:	b480      	push	{r7}
 800144e:	b085      	sub	sp, #20
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f003 0307 	and.w	r3, r3, #7
 800145a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800145c:	4b0c      	ldr	r3, [pc, #48]	; (8001490 <__NVIC_SetPriorityGrouping+0x44>)
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001462:	68ba      	ldr	r2, [r7, #8]
 8001464:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001468:	4013      	ands	r3, r2
 800146a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001474:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001478:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800147c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800147e:	4a04      	ldr	r2, [pc, #16]	; (8001490 <__NVIC_SetPriorityGrouping+0x44>)
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	60d3      	str	r3, [r2, #12]
}
 8001484:	bf00      	nop
 8001486:	3714      	adds	r7, #20
 8001488:	46bd      	mov	sp, r7
 800148a:	bc80      	pop	{r7}
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	e000ed00 	.word	0xe000ed00

08001494 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001498:	4b04      	ldr	r3, [pc, #16]	; (80014ac <__NVIC_GetPriorityGrouping+0x18>)
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	0a1b      	lsrs	r3, r3, #8
 800149e:	f003 0307 	and.w	r3, r3, #7
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bc80      	pop	{r7}
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	e000ed00 	.word	0xe000ed00

080014b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	6039      	str	r1, [r7, #0]
 80014ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	db0a      	blt.n	80014da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	b2da      	uxtb	r2, r3
 80014c8:	490c      	ldr	r1, [pc, #48]	; (80014fc <__NVIC_SetPriority+0x4c>)
 80014ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ce:	0112      	lsls	r2, r2, #4
 80014d0:	b2d2      	uxtb	r2, r2
 80014d2:	440b      	add	r3, r1
 80014d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014d8:	e00a      	b.n	80014f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	b2da      	uxtb	r2, r3
 80014de:	4908      	ldr	r1, [pc, #32]	; (8001500 <__NVIC_SetPriority+0x50>)
 80014e0:	79fb      	ldrb	r3, [r7, #7]
 80014e2:	f003 030f 	and.w	r3, r3, #15
 80014e6:	3b04      	subs	r3, #4
 80014e8:	0112      	lsls	r2, r2, #4
 80014ea:	b2d2      	uxtb	r2, r2
 80014ec:	440b      	add	r3, r1
 80014ee:	761a      	strb	r2, [r3, #24]
}
 80014f0:	bf00      	nop
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bc80      	pop	{r7}
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	e000e100 	.word	0xe000e100
 8001500:	e000ed00 	.word	0xe000ed00

08001504 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001504:	b480      	push	{r7}
 8001506:	b089      	sub	sp, #36	; 0x24
 8001508:	af00      	add	r7, sp, #0
 800150a:	60f8      	str	r0, [r7, #12]
 800150c:	60b9      	str	r1, [r7, #8]
 800150e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	f003 0307 	and.w	r3, r3, #7
 8001516:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	f1c3 0307 	rsb	r3, r3, #7
 800151e:	2b04      	cmp	r3, #4
 8001520:	bf28      	it	cs
 8001522:	2304      	movcs	r3, #4
 8001524:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	3304      	adds	r3, #4
 800152a:	2b06      	cmp	r3, #6
 800152c:	d902      	bls.n	8001534 <NVIC_EncodePriority+0x30>
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	3b03      	subs	r3, #3
 8001532:	e000      	b.n	8001536 <NVIC_EncodePriority+0x32>
 8001534:	2300      	movs	r3, #0
 8001536:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001538:	f04f 32ff 	mov.w	r2, #4294967295
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	fa02 f303 	lsl.w	r3, r2, r3
 8001542:	43da      	mvns	r2, r3
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	401a      	ands	r2, r3
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800154c:	f04f 31ff 	mov.w	r1, #4294967295
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	fa01 f303 	lsl.w	r3, r1, r3
 8001556:	43d9      	mvns	r1, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800155c:	4313      	orrs	r3, r2
         );
}
 800155e:	4618      	mov	r0, r3
 8001560:	3724      	adds	r7, #36	; 0x24
 8001562:	46bd      	mov	sp, r7
 8001564:	bc80      	pop	{r7}
 8001566:	4770      	bx	lr

08001568 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	3b01      	subs	r3, #1
 8001574:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001578:	d301      	bcc.n	800157e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800157a:	2301      	movs	r3, #1
 800157c:	e00f      	b.n	800159e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800157e:	4a0a      	ldr	r2, [pc, #40]	; (80015a8 <SysTick_Config+0x40>)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	3b01      	subs	r3, #1
 8001584:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001586:	210f      	movs	r1, #15
 8001588:	f04f 30ff 	mov.w	r0, #4294967295
 800158c:	f7ff ff90 	bl	80014b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001590:	4b05      	ldr	r3, [pc, #20]	; (80015a8 <SysTick_Config+0x40>)
 8001592:	2200      	movs	r2, #0
 8001594:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001596:	4b04      	ldr	r3, [pc, #16]	; (80015a8 <SysTick_Config+0x40>)
 8001598:	2207      	movs	r2, #7
 800159a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800159c:	2300      	movs	r3, #0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	e000e010 	.word	0xe000e010

080015ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f7ff ff49 	bl	800144c <__NVIC_SetPriorityGrouping>
}
 80015ba:	bf00      	nop
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b086      	sub	sp, #24
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	4603      	mov	r3, r0
 80015ca:	60b9      	str	r1, [r7, #8]
 80015cc:	607a      	str	r2, [r7, #4]
 80015ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015d0:	2300      	movs	r3, #0
 80015d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015d4:	f7ff ff5e 	bl	8001494 <__NVIC_GetPriorityGrouping>
 80015d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	68b9      	ldr	r1, [r7, #8]
 80015de:	6978      	ldr	r0, [r7, #20]
 80015e0:	f7ff ff90 	bl	8001504 <NVIC_EncodePriority>
 80015e4:	4602      	mov	r2, r0
 80015e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ea:	4611      	mov	r1, r2
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7ff ff5f 	bl	80014b0 <__NVIC_SetPriority>
}
 80015f2:	bf00      	nop
 80015f4:	3718      	adds	r7, #24
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b082      	sub	sp, #8
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f7ff ffb0 	bl	8001568 <SysTick_Config>
 8001608:	4603      	mov	r3, r0
}
 800160a:	4618      	mov	r0, r3
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
	...

08001614 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001614:	b480      	push	{r7}
 8001616:	b08b      	sub	sp, #44	; 0x2c
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800161e:	2300      	movs	r3, #0
 8001620:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001622:	2300      	movs	r3, #0
 8001624:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001626:	e148      	b.n	80018ba <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001628:	2201      	movs	r2, #1
 800162a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162c:	fa02 f303 	lsl.w	r3, r2, r3
 8001630:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	69fa      	ldr	r2, [r7, #28]
 8001638:	4013      	ands	r3, r2
 800163a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	429a      	cmp	r2, r3
 8001642:	f040 8137 	bne.w	80018b4 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	4aa3      	ldr	r2, [pc, #652]	; (80018d8 <HAL_GPIO_Init+0x2c4>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d05e      	beq.n	800170e <HAL_GPIO_Init+0xfa>
 8001650:	4aa1      	ldr	r2, [pc, #644]	; (80018d8 <HAL_GPIO_Init+0x2c4>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d875      	bhi.n	8001742 <HAL_GPIO_Init+0x12e>
 8001656:	4aa1      	ldr	r2, [pc, #644]	; (80018dc <HAL_GPIO_Init+0x2c8>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d058      	beq.n	800170e <HAL_GPIO_Init+0xfa>
 800165c:	4a9f      	ldr	r2, [pc, #636]	; (80018dc <HAL_GPIO_Init+0x2c8>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d86f      	bhi.n	8001742 <HAL_GPIO_Init+0x12e>
 8001662:	4a9f      	ldr	r2, [pc, #636]	; (80018e0 <HAL_GPIO_Init+0x2cc>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d052      	beq.n	800170e <HAL_GPIO_Init+0xfa>
 8001668:	4a9d      	ldr	r2, [pc, #628]	; (80018e0 <HAL_GPIO_Init+0x2cc>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d869      	bhi.n	8001742 <HAL_GPIO_Init+0x12e>
 800166e:	4a9d      	ldr	r2, [pc, #628]	; (80018e4 <HAL_GPIO_Init+0x2d0>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d04c      	beq.n	800170e <HAL_GPIO_Init+0xfa>
 8001674:	4a9b      	ldr	r2, [pc, #620]	; (80018e4 <HAL_GPIO_Init+0x2d0>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d863      	bhi.n	8001742 <HAL_GPIO_Init+0x12e>
 800167a:	4a9b      	ldr	r2, [pc, #620]	; (80018e8 <HAL_GPIO_Init+0x2d4>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d046      	beq.n	800170e <HAL_GPIO_Init+0xfa>
 8001680:	4a99      	ldr	r2, [pc, #612]	; (80018e8 <HAL_GPIO_Init+0x2d4>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d85d      	bhi.n	8001742 <HAL_GPIO_Init+0x12e>
 8001686:	2b12      	cmp	r3, #18
 8001688:	d82a      	bhi.n	80016e0 <HAL_GPIO_Init+0xcc>
 800168a:	2b12      	cmp	r3, #18
 800168c:	d859      	bhi.n	8001742 <HAL_GPIO_Init+0x12e>
 800168e:	a201      	add	r2, pc, #4	; (adr r2, 8001694 <HAL_GPIO_Init+0x80>)
 8001690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001694:	0800170f 	.word	0x0800170f
 8001698:	080016e9 	.word	0x080016e9
 800169c:	080016fb 	.word	0x080016fb
 80016a0:	0800173d 	.word	0x0800173d
 80016a4:	08001743 	.word	0x08001743
 80016a8:	08001743 	.word	0x08001743
 80016ac:	08001743 	.word	0x08001743
 80016b0:	08001743 	.word	0x08001743
 80016b4:	08001743 	.word	0x08001743
 80016b8:	08001743 	.word	0x08001743
 80016bc:	08001743 	.word	0x08001743
 80016c0:	08001743 	.word	0x08001743
 80016c4:	08001743 	.word	0x08001743
 80016c8:	08001743 	.word	0x08001743
 80016cc:	08001743 	.word	0x08001743
 80016d0:	08001743 	.word	0x08001743
 80016d4:	08001743 	.word	0x08001743
 80016d8:	080016f1 	.word	0x080016f1
 80016dc:	08001705 	.word	0x08001705
 80016e0:	4a82      	ldr	r2, [pc, #520]	; (80018ec <HAL_GPIO_Init+0x2d8>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d013      	beq.n	800170e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80016e6:	e02c      	b.n	8001742 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	623b      	str	r3, [r7, #32]
          break;
 80016ee:	e029      	b.n	8001744 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	3304      	adds	r3, #4
 80016f6:	623b      	str	r3, [r7, #32]
          break;
 80016f8:	e024      	b.n	8001744 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	68db      	ldr	r3, [r3, #12]
 80016fe:	3308      	adds	r3, #8
 8001700:	623b      	str	r3, [r7, #32]
          break;
 8001702:	e01f      	b.n	8001744 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	330c      	adds	r3, #12
 800170a:	623b      	str	r3, [r7, #32]
          break;
 800170c:	e01a      	b.n	8001744 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d102      	bne.n	800171c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001716:	2304      	movs	r3, #4
 8001718:	623b      	str	r3, [r7, #32]
          break;
 800171a:	e013      	b.n	8001744 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	2b01      	cmp	r3, #1
 8001722:	d105      	bne.n	8001730 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001724:	2308      	movs	r3, #8
 8001726:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	69fa      	ldr	r2, [r7, #28]
 800172c:	611a      	str	r2, [r3, #16]
          break;
 800172e:	e009      	b.n	8001744 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001730:	2308      	movs	r3, #8
 8001732:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	69fa      	ldr	r2, [r7, #28]
 8001738:	615a      	str	r2, [r3, #20]
          break;
 800173a:	e003      	b.n	8001744 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800173c:	2300      	movs	r3, #0
 800173e:	623b      	str	r3, [r7, #32]
          break;
 8001740:	e000      	b.n	8001744 <HAL_GPIO_Init+0x130>
          break;
 8001742:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	2bff      	cmp	r3, #255	; 0xff
 8001748:	d801      	bhi.n	800174e <HAL_GPIO_Init+0x13a>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	e001      	b.n	8001752 <HAL_GPIO_Init+0x13e>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	3304      	adds	r3, #4
 8001752:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	2bff      	cmp	r3, #255	; 0xff
 8001758:	d802      	bhi.n	8001760 <HAL_GPIO_Init+0x14c>
 800175a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	e002      	b.n	8001766 <HAL_GPIO_Init+0x152>
 8001760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001762:	3b08      	subs	r3, #8
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	210f      	movs	r1, #15
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	fa01 f303 	lsl.w	r3, r1, r3
 8001774:	43db      	mvns	r3, r3
 8001776:	401a      	ands	r2, r3
 8001778:	6a39      	ldr	r1, [r7, #32]
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	fa01 f303 	lsl.w	r3, r1, r3
 8001780:	431a      	orrs	r2, r3
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800178e:	2b00      	cmp	r3, #0
 8001790:	f000 8090 	beq.w	80018b4 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001794:	4b56      	ldr	r3, [pc, #344]	; (80018f0 <HAL_GPIO_Init+0x2dc>)
 8001796:	699b      	ldr	r3, [r3, #24]
 8001798:	4a55      	ldr	r2, [pc, #340]	; (80018f0 <HAL_GPIO_Init+0x2dc>)
 800179a:	f043 0301 	orr.w	r3, r3, #1
 800179e:	6193      	str	r3, [r2, #24]
 80017a0:	4b53      	ldr	r3, [pc, #332]	; (80018f0 <HAL_GPIO_Init+0x2dc>)
 80017a2:	699b      	ldr	r3, [r3, #24]
 80017a4:	f003 0301 	and.w	r3, r3, #1
 80017a8:	60bb      	str	r3, [r7, #8]
 80017aa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80017ac:	4a51      	ldr	r2, [pc, #324]	; (80018f4 <HAL_GPIO_Init+0x2e0>)
 80017ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b0:	089b      	lsrs	r3, r3, #2
 80017b2:	3302      	adds	r3, #2
 80017b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017b8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80017ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017bc:	f003 0303 	and.w	r3, r3, #3
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	220f      	movs	r2, #15
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	43db      	mvns	r3, r3
 80017ca:	68fa      	ldr	r2, [r7, #12]
 80017cc:	4013      	ands	r3, r2
 80017ce:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	4a49      	ldr	r2, [pc, #292]	; (80018f8 <HAL_GPIO_Init+0x2e4>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d00d      	beq.n	80017f4 <HAL_GPIO_Init+0x1e0>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	4a48      	ldr	r2, [pc, #288]	; (80018fc <HAL_GPIO_Init+0x2e8>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d007      	beq.n	80017f0 <HAL_GPIO_Init+0x1dc>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	4a47      	ldr	r2, [pc, #284]	; (8001900 <HAL_GPIO_Init+0x2ec>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d101      	bne.n	80017ec <HAL_GPIO_Init+0x1d8>
 80017e8:	2302      	movs	r3, #2
 80017ea:	e004      	b.n	80017f6 <HAL_GPIO_Init+0x1e2>
 80017ec:	2303      	movs	r3, #3
 80017ee:	e002      	b.n	80017f6 <HAL_GPIO_Init+0x1e2>
 80017f0:	2301      	movs	r3, #1
 80017f2:	e000      	b.n	80017f6 <HAL_GPIO_Init+0x1e2>
 80017f4:	2300      	movs	r3, #0
 80017f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017f8:	f002 0203 	and.w	r2, r2, #3
 80017fc:	0092      	lsls	r2, r2, #2
 80017fe:	4093      	lsls	r3, r2
 8001800:	68fa      	ldr	r2, [r7, #12]
 8001802:	4313      	orrs	r3, r2
 8001804:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001806:	493b      	ldr	r1, [pc, #236]	; (80018f4 <HAL_GPIO_Init+0x2e0>)
 8001808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180a:	089b      	lsrs	r3, r3, #2
 800180c:	3302      	adds	r3, #2
 800180e:	68fa      	ldr	r2, [r7, #12]
 8001810:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800181c:	2b00      	cmp	r3, #0
 800181e:	d006      	beq.n	800182e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001820:	4b38      	ldr	r3, [pc, #224]	; (8001904 <HAL_GPIO_Init+0x2f0>)
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	4937      	ldr	r1, [pc, #220]	; (8001904 <HAL_GPIO_Init+0x2f0>)
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	4313      	orrs	r3, r2
 800182a:	600b      	str	r3, [r1, #0]
 800182c:	e006      	b.n	800183c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800182e:	4b35      	ldr	r3, [pc, #212]	; (8001904 <HAL_GPIO_Init+0x2f0>)
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	43db      	mvns	r3, r3
 8001836:	4933      	ldr	r1, [pc, #204]	; (8001904 <HAL_GPIO_Init+0x2f0>)
 8001838:	4013      	ands	r3, r2
 800183a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001844:	2b00      	cmp	r3, #0
 8001846:	d006      	beq.n	8001856 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001848:	4b2e      	ldr	r3, [pc, #184]	; (8001904 <HAL_GPIO_Init+0x2f0>)
 800184a:	685a      	ldr	r2, [r3, #4]
 800184c:	492d      	ldr	r1, [pc, #180]	; (8001904 <HAL_GPIO_Init+0x2f0>)
 800184e:	69bb      	ldr	r3, [r7, #24]
 8001850:	4313      	orrs	r3, r2
 8001852:	604b      	str	r3, [r1, #4]
 8001854:	e006      	b.n	8001864 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001856:	4b2b      	ldr	r3, [pc, #172]	; (8001904 <HAL_GPIO_Init+0x2f0>)
 8001858:	685a      	ldr	r2, [r3, #4]
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	43db      	mvns	r3, r3
 800185e:	4929      	ldr	r1, [pc, #164]	; (8001904 <HAL_GPIO_Init+0x2f0>)
 8001860:	4013      	ands	r3, r2
 8001862:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d006      	beq.n	800187e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001870:	4b24      	ldr	r3, [pc, #144]	; (8001904 <HAL_GPIO_Init+0x2f0>)
 8001872:	689a      	ldr	r2, [r3, #8]
 8001874:	4923      	ldr	r1, [pc, #140]	; (8001904 <HAL_GPIO_Init+0x2f0>)
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	4313      	orrs	r3, r2
 800187a:	608b      	str	r3, [r1, #8]
 800187c:	e006      	b.n	800188c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800187e:	4b21      	ldr	r3, [pc, #132]	; (8001904 <HAL_GPIO_Init+0x2f0>)
 8001880:	689a      	ldr	r2, [r3, #8]
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	43db      	mvns	r3, r3
 8001886:	491f      	ldr	r1, [pc, #124]	; (8001904 <HAL_GPIO_Init+0x2f0>)
 8001888:	4013      	ands	r3, r2
 800188a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d006      	beq.n	80018a6 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001898:	4b1a      	ldr	r3, [pc, #104]	; (8001904 <HAL_GPIO_Init+0x2f0>)
 800189a:	68da      	ldr	r2, [r3, #12]
 800189c:	4919      	ldr	r1, [pc, #100]	; (8001904 <HAL_GPIO_Init+0x2f0>)
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	60cb      	str	r3, [r1, #12]
 80018a4:	e006      	b.n	80018b4 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80018a6:	4b17      	ldr	r3, [pc, #92]	; (8001904 <HAL_GPIO_Init+0x2f0>)
 80018a8:	68da      	ldr	r2, [r3, #12]
 80018aa:	69bb      	ldr	r3, [r7, #24]
 80018ac:	43db      	mvns	r3, r3
 80018ae:	4915      	ldr	r1, [pc, #84]	; (8001904 <HAL_GPIO_Init+0x2f0>)
 80018b0:	4013      	ands	r3, r2
 80018b2:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80018b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b6:	3301      	adds	r3, #1
 80018b8:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c0:	fa22 f303 	lsr.w	r3, r2, r3
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	f47f aeaf 	bne.w	8001628 <HAL_GPIO_Init+0x14>
  }
}
 80018ca:	bf00      	nop
 80018cc:	bf00      	nop
 80018ce:	372c      	adds	r7, #44	; 0x2c
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bc80      	pop	{r7}
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	10320000 	.word	0x10320000
 80018dc:	10310000 	.word	0x10310000
 80018e0:	10220000 	.word	0x10220000
 80018e4:	10210000 	.word	0x10210000
 80018e8:	10120000 	.word	0x10120000
 80018ec:	10110000 	.word	0x10110000
 80018f0:	40021000 	.word	0x40021000
 80018f4:	40010000 	.word	0x40010000
 80018f8:	40010800 	.word	0x40010800
 80018fc:	40010c00 	.word	0x40010c00
 8001900:	40011000 	.word	0x40011000
 8001904:	40010400 	.word	0x40010400

08001908 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001908:	b480      	push	{r7}
 800190a:	b085      	sub	sp, #20
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	460b      	mov	r3, r1
 8001912:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	689a      	ldr	r2, [r3, #8]
 8001918:	887b      	ldrh	r3, [r7, #2]
 800191a:	4013      	ands	r3, r2
 800191c:	2b00      	cmp	r3, #0
 800191e:	d002      	beq.n	8001926 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001920:	2301      	movs	r3, #1
 8001922:	73fb      	strb	r3, [r7, #15]
 8001924:	e001      	b.n	800192a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001926:	2300      	movs	r3, #0
 8001928:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800192a:	7bfb      	ldrb	r3, [r7, #15]
}
 800192c:	4618      	mov	r0, r3
 800192e:	3714      	adds	r7, #20
 8001930:	46bd      	mov	sp, r7
 8001932:	bc80      	pop	{r7}
 8001934:	4770      	bx	lr

08001936 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001936:	b480      	push	{r7}
 8001938:	b083      	sub	sp, #12
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
 800193e:	460b      	mov	r3, r1
 8001940:	807b      	strh	r3, [r7, #2]
 8001942:	4613      	mov	r3, r2
 8001944:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001946:	787b      	ldrb	r3, [r7, #1]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d003      	beq.n	8001954 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800194c:	887a      	ldrh	r2, [r7, #2]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001952:	e003      	b.n	800195c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001954:	887b      	ldrh	r3, [r7, #2]
 8001956:	041a      	lsls	r2, r3, #16
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	611a      	str	r2, [r3, #16]
}
 800195c:	bf00      	nop
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	bc80      	pop	{r7}
 8001964:	4770      	bx	lr
	...

08001968 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b086      	sub	sp, #24
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d101      	bne.n	800197a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e26c      	b.n	8001e54 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	2b00      	cmp	r3, #0
 8001984:	f000 8087 	beq.w	8001a96 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001988:	4b92      	ldr	r3, [pc, #584]	; (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f003 030c 	and.w	r3, r3, #12
 8001990:	2b04      	cmp	r3, #4
 8001992:	d00c      	beq.n	80019ae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001994:	4b8f      	ldr	r3, [pc, #572]	; (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f003 030c 	and.w	r3, r3, #12
 800199c:	2b08      	cmp	r3, #8
 800199e:	d112      	bne.n	80019c6 <HAL_RCC_OscConfig+0x5e>
 80019a0:	4b8c      	ldr	r3, [pc, #560]	; (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019ac:	d10b      	bne.n	80019c6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019ae:	4b89      	ldr	r3, [pc, #548]	; (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d06c      	beq.n	8001a94 <HAL_RCC_OscConfig+0x12c>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d168      	bne.n	8001a94 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e246      	b.n	8001e54 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019ce:	d106      	bne.n	80019de <HAL_RCC_OscConfig+0x76>
 80019d0:	4b80      	ldr	r3, [pc, #512]	; (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a7f      	ldr	r2, [pc, #508]	; (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 80019d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019da:	6013      	str	r3, [r2, #0]
 80019dc:	e02e      	b.n	8001a3c <HAL_RCC_OscConfig+0xd4>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d10c      	bne.n	8001a00 <HAL_RCC_OscConfig+0x98>
 80019e6:	4b7b      	ldr	r3, [pc, #492]	; (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a7a      	ldr	r2, [pc, #488]	; (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 80019ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019f0:	6013      	str	r3, [r2, #0]
 80019f2:	4b78      	ldr	r3, [pc, #480]	; (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a77      	ldr	r2, [pc, #476]	; (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 80019f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019fc:	6013      	str	r3, [r2, #0]
 80019fe:	e01d      	b.n	8001a3c <HAL_RCC_OscConfig+0xd4>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a08:	d10c      	bne.n	8001a24 <HAL_RCC_OscConfig+0xbc>
 8001a0a:	4b72      	ldr	r3, [pc, #456]	; (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a71      	ldr	r2, [pc, #452]	; (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 8001a10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a14:	6013      	str	r3, [r2, #0]
 8001a16:	4b6f      	ldr	r3, [pc, #444]	; (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a6e      	ldr	r2, [pc, #440]	; (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 8001a1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a20:	6013      	str	r3, [r2, #0]
 8001a22:	e00b      	b.n	8001a3c <HAL_RCC_OscConfig+0xd4>
 8001a24:	4b6b      	ldr	r3, [pc, #428]	; (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a6a      	ldr	r2, [pc, #424]	; (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 8001a2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a2e:	6013      	str	r3, [r2, #0]
 8001a30:	4b68      	ldr	r3, [pc, #416]	; (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a67      	ldr	r2, [pc, #412]	; (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 8001a36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a3a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d013      	beq.n	8001a6c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a44:	f7ff fcd4 	bl	80013f0 <HAL_GetTick>
 8001a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a4a:	e008      	b.n	8001a5e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a4c:	f7ff fcd0 	bl	80013f0 <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	2b64      	cmp	r3, #100	; 0x64
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e1fa      	b.n	8001e54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a5e:	4b5d      	ldr	r3, [pc, #372]	; (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d0f0      	beq.n	8001a4c <HAL_RCC_OscConfig+0xe4>
 8001a6a:	e014      	b.n	8001a96 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a6c:	f7ff fcc0 	bl	80013f0 <HAL_GetTick>
 8001a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a72:	e008      	b.n	8001a86 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a74:	f7ff fcbc 	bl	80013f0 <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	2b64      	cmp	r3, #100	; 0x64
 8001a80:	d901      	bls.n	8001a86 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e1e6      	b.n	8001e54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a86:	4b53      	ldr	r3, [pc, #332]	; (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d1f0      	bne.n	8001a74 <HAL_RCC_OscConfig+0x10c>
 8001a92:	e000      	b.n	8001a96 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d063      	beq.n	8001b6a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001aa2:	4b4c      	ldr	r3, [pc, #304]	; (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f003 030c 	and.w	r3, r3, #12
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d00b      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001aae:	4b49      	ldr	r3, [pc, #292]	; (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f003 030c 	and.w	r3, r3, #12
 8001ab6:	2b08      	cmp	r3, #8
 8001ab8:	d11c      	bne.n	8001af4 <HAL_RCC_OscConfig+0x18c>
 8001aba:	4b46      	ldr	r3, [pc, #280]	; (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d116      	bne.n	8001af4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ac6:	4b43      	ldr	r3, [pc, #268]	; (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d005      	beq.n	8001ade <HAL_RCC_OscConfig+0x176>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	691b      	ldr	r3, [r3, #16]
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d001      	beq.n	8001ade <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e1ba      	b.n	8001e54 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ade:	4b3d      	ldr	r3, [pc, #244]	; (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	695b      	ldr	r3, [r3, #20]
 8001aea:	00db      	lsls	r3, r3, #3
 8001aec:	4939      	ldr	r1, [pc, #228]	; (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 8001aee:	4313      	orrs	r3, r2
 8001af0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001af2:	e03a      	b.n	8001b6a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	691b      	ldr	r3, [r3, #16]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d020      	beq.n	8001b3e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001afc:	4b36      	ldr	r3, [pc, #216]	; (8001bd8 <HAL_RCC_OscConfig+0x270>)
 8001afe:	2201      	movs	r2, #1
 8001b00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b02:	f7ff fc75 	bl	80013f0 <HAL_GetTick>
 8001b06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b08:	e008      	b.n	8001b1c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b0a:	f7ff fc71 	bl	80013f0 <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d901      	bls.n	8001b1c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e19b      	b.n	8001e54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b1c:	4b2d      	ldr	r3, [pc, #180]	; (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0302 	and.w	r3, r3, #2
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d0f0      	beq.n	8001b0a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b28:	4b2a      	ldr	r3, [pc, #168]	; (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	695b      	ldr	r3, [r3, #20]
 8001b34:	00db      	lsls	r3, r3, #3
 8001b36:	4927      	ldr	r1, [pc, #156]	; (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	600b      	str	r3, [r1, #0]
 8001b3c:	e015      	b.n	8001b6a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b3e:	4b26      	ldr	r3, [pc, #152]	; (8001bd8 <HAL_RCC_OscConfig+0x270>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b44:	f7ff fc54 	bl	80013f0 <HAL_GetTick>
 8001b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b4a:	e008      	b.n	8001b5e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b4c:	f7ff fc50 	bl	80013f0 <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e17a      	b.n	8001e54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b5e:	4b1d      	ldr	r3, [pc, #116]	; (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d1f0      	bne.n	8001b4c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0308 	and.w	r3, r3, #8
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d03a      	beq.n	8001bec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	699b      	ldr	r3, [r3, #24]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d019      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b7e:	4b17      	ldr	r3, [pc, #92]	; (8001bdc <HAL_RCC_OscConfig+0x274>)
 8001b80:	2201      	movs	r2, #1
 8001b82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b84:	f7ff fc34 	bl	80013f0 <HAL_GetTick>
 8001b88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b8a:	e008      	b.n	8001b9e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b8c:	f7ff fc30 	bl	80013f0 <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e15a      	b.n	8001e54 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b9e:	4b0d      	ldr	r3, [pc, #52]	; (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 8001ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba2:	f003 0302 	and.w	r3, r3, #2
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d0f0      	beq.n	8001b8c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001baa:	2001      	movs	r0, #1
 8001bac:	f000 faa6 	bl	80020fc <RCC_Delay>
 8001bb0:	e01c      	b.n	8001bec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bb2:	4b0a      	ldr	r3, [pc, #40]	; (8001bdc <HAL_RCC_OscConfig+0x274>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bb8:	f7ff fc1a 	bl	80013f0 <HAL_GetTick>
 8001bbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bbe:	e00f      	b.n	8001be0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bc0:	f7ff fc16 	bl	80013f0 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d908      	bls.n	8001be0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e140      	b.n	8001e54 <HAL_RCC_OscConfig+0x4ec>
 8001bd2:	bf00      	nop
 8001bd4:	40021000 	.word	0x40021000
 8001bd8:	42420000 	.word	0x42420000
 8001bdc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001be0:	4b9e      	ldr	r3, [pc, #632]	; (8001e5c <HAL_RCC_OscConfig+0x4f4>)
 8001be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be4:	f003 0302 	and.w	r3, r3, #2
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d1e9      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0304 	and.w	r3, r3, #4
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	f000 80a6 	beq.w	8001d46 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bfe:	4b97      	ldr	r3, [pc, #604]	; (8001e5c <HAL_RCC_OscConfig+0x4f4>)
 8001c00:	69db      	ldr	r3, [r3, #28]
 8001c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d10d      	bne.n	8001c26 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c0a:	4b94      	ldr	r3, [pc, #592]	; (8001e5c <HAL_RCC_OscConfig+0x4f4>)
 8001c0c:	69db      	ldr	r3, [r3, #28]
 8001c0e:	4a93      	ldr	r2, [pc, #588]	; (8001e5c <HAL_RCC_OscConfig+0x4f4>)
 8001c10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c14:	61d3      	str	r3, [r2, #28]
 8001c16:	4b91      	ldr	r3, [pc, #580]	; (8001e5c <HAL_RCC_OscConfig+0x4f4>)
 8001c18:	69db      	ldr	r3, [r3, #28]
 8001c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c1e:	60bb      	str	r3, [r7, #8]
 8001c20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c22:	2301      	movs	r3, #1
 8001c24:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c26:	4b8e      	ldr	r3, [pc, #568]	; (8001e60 <HAL_RCC_OscConfig+0x4f8>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d118      	bne.n	8001c64 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c32:	4b8b      	ldr	r3, [pc, #556]	; (8001e60 <HAL_RCC_OscConfig+0x4f8>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a8a      	ldr	r2, [pc, #552]	; (8001e60 <HAL_RCC_OscConfig+0x4f8>)
 8001c38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c3e:	f7ff fbd7 	bl	80013f0 <HAL_GetTick>
 8001c42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c44:	e008      	b.n	8001c58 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c46:	f7ff fbd3 	bl	80013f0 <HAL_GetTick>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	2b64      	cmp	r3, #100	; 0x64
 8001c52:	d901      	bls.n	8001c58 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c54:	2303      	movs	r3, #3
 8001c56:	e0fd      	b.n	8001e54 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c58:	4b81      	ldr	r3, [pc, #516]	; (8001e60 <HAL_RCC_OscConfig+0x4f8>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d0f0      	beq.n	8001c46 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d106      	bne.n	8001c7a <HAL_RCC_OscConfig+0x312>
 8001c6c:	4b7b      	ldr	r3, [pc, #492]	; (8001e5c <HAL_RCC_OscConfig+0x4f4>)
 8001c6e:	6a1b      	ldr	r3, [r3, #32]
 8001c70:	4a7a      	ldr	r2, [pc, #488]	; (8001e5c <HAL_RCC_OscConfig+0x4f4>)
 8001c72:	f043 0301 	orr.w	r3, r3, #1
 8001c76:	6213      	str	r3, [r2, #32]
 8001c78:	e02d      	b.n	8001cd6 <HAL_RCC_OscConfig+0x36e>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d10c      	bne.n	8001c9c <HAL_RCC_OscConfig+0x334>
 8001c82:	4b76      	ldr	r3, [pc, #472]	; (8001e5c <HAL_RCC_OscConfig+0x4f4>)
 8001c84:	6a1b      	ldr	r3, [r3, #32]
 8001c86:	4a75      	ldr	r2, [pc, #468]	; (8001e5c <HAL_RCC_OscConfig+0x4f4>)
 8001c88:	f023 0301 	bic.w	r3, r3, #1
 8001c8c:	6213      	str	r3, [r2, #32]
 8001c8e:	4b73      	ldr	r3, [pc, #460]	; (8001e5c <HAL_RCC_OscConfig+0x4f4>)
 8001c90:	6a1b      	ldr	r3, [r3, #32]
 8001c92:	4a72      	ldr	r2, [pc, #456]	; (8001e5c <HAL_RCC_OscConfig+0x4f4>)
 8001c94:	f023 0304 	bic.w	r3, r3, #4
 8001c98:	6213      	str	r3, [r2, #32]
 8001c9a:	e01c      	b.n	8001cd6 <HAL_RCC_OscConfig+0x36e>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	2b05      	cmp	r3, #5
 8001ca2:	d10c      	bne.n	8001cbe <HAL_RCC_OscConfig+0x356>
 8001ca4:	4b6d      	ldr	r3, [pc, #436]	; (8001e5c <HAL_RCC_OscConfig+0x4f4>)
 8001ca6:	6a1b      	ldr	r3, [r3, #32]
 8001ca8:	4a6c      	ldr	r2, [pc, #432]	; (8001e5c <HAL_RCC_OscConfig+0x4f4>)
 8001caa:	f043 0304 	orr.w	r3, r3, #4
 8001cae:	6213      	str	r3, [r2, #32]
 8001cb0:	4b6a      	ldr	r3, [pc, #424]	; (8001e5c <HAL_RCC_OscConfig+0x4f4>)
 8001cb2:	6a1b      	ldr	r3, [r3, #32]
 8001cb4:	4a69      	ldr	r2, [pc, #420]	; (8001e5c <HAL_RCC_OscConfig+0x4f4>)
 8001cb6:	f043 0301 	orr.w	r3, r3, #1
 8001cba:	6213      	str	r3, [r2, #32]
 8001cbc:	e00b      	b.n	8001cd6 <HAL_RCC_OscConfig+0x36e>
 8001cbe:	4b67      	ldr	r3, [pc, #412]	; (8001e5c <HAL_RCC_OscConfig+0x4f4>)
 8001cc0:	6a1b      	ldr	r3, [r3, #32]
 8001cc2:	4a66      	ldr	r2, [pc, #408]	; (8001e5c <HAL_RCC_OscConfig+0x4f4>)
 8001cc4:	f023 0301 	bic.w	r3, r3, #1
 8001cc8:	6213      	str	r3, [r2, #32]
 8001cca:	4b64      	ldr	r3, [pc, #400]	; (8001e5c <HAL_RCC_OscConfig+0x4f4>)
 8001ccc:	6a1b      	ldr	r3, [r3, #32]
 8001cce:	4a63      	ldr	r2, [pc, #396]	; (8001e5c <HAL_RCC_OscConfig+0x4f4>)
 8001cd0:	f023 0304 	bic.w	r3, r3, #4
 8001cd4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d015      	beq.n	8001d0a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cde:	f7ff fb87 	bl	80013f0 <HAL_GetTick>
 8001ce2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ce4:	e00a      	b.n	8001cfc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ce6:	f7ff fb83 	bl	80013f0 <HAL_GetTick>
 8001cea:	4602      	mov	r2, r0
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d901      	bls.n	8001cfc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e0ab      	b.n	8001e54 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cfc:	4b57      	ldr	r3, [pc, #348]	; (8001e5c <HAL_RCC_OscConfig+0x4f4>)
 8001cfe:	6a1b      	ldr	r3, [r3, #32]
 8001d00:	f003 0302 	and.w	r3, r3, #2
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d0ee      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x37e>
 8001d08:	e014      	b.n	8001d34 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d0a:	f7ff fb71 	bl	80013f0 <HAL_GetTick>
 8001d0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d10:	e00a      	b.n	8001d28 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d12:	f7ff fb6d 	bl	80013f0 <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d901      	bls.n	8001d28 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e095      	b.n	8001e54 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d28:	4b4c      	ldr	r3, [pc, #304]	; (8001e5c <HAL_RCC_OscConfig+0x4f4>)
 8001d2a:	6a1b      	ldr	r3, [r3, #32]
 8001d2c:	f003 0302 	and.w	r3, r3, #2
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d1ee      	bne.n	8001d12 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d34:	7dfb      	ldrb	r3, [r7, #23]
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d105      	bne.n	8001d46 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d3a:	4b48      	ldr	r3, [pc, #288]	; (8001e5c <HAL_RCC_OscConfig+0x4f4>)
 8001d3c:	69db      	ldr	r3, [r3, #28]
 8001d3e:	4a47      	ldr	r2, [pc, #284]	; (8001e5c <HAL_RCC_OscConfig+0x4f4>)
 8001d40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d44:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	69db      	ldr	r3, [r3, #28]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	f000 8081 	beq.w	8001e52 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d50:	4b42      	ldr	r3, [pc, #264]	; (8001e5c <HAL_RCC_OscConfig+0x4f4>)
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f003 030c 	and.w	r3, r3, #12
 8001d58:	2b08      	cmp	r3, #8
 8001d5a:	d061      	beq.n	8001e20 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	69db      	ldr	r3, [r3, #28]
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d146      	bne.n	8001df2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d64:	4b3f      	ldr	r3, [pc, #252]	; (8001e64 <HAL_RCC_OscConfig+0x4fc>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d6a:	f7ff fb41 	bl	80013f0 <HAL_GetTick>
 8001d6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d70:	e008      	b.n	8001d84 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d72:	f7ff fb3d 	bl	80013f0 <HAL_GetTick>
 8001d76:	4602      	mov	r2, r0
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d901      	bls.n	8001d84 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e067      	b.n	8001e54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d84:	4b35      	ldr	r3, [pc, #212]	; (8001e5c <HAL_RCC_OscConfig+0x4f4>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d1f0      	bne.n	8001d72 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6a1b      	ldr	r3, [r3, #32]
 8001d94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d98:	d108      	bne.n	8001dac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d9a:	4b30      	ldr	r3, [pc, #192]	; (8001e5c <HAL_RCC_OscConfig+0x4f4>)
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	492d      	ldr	r1, [pc, #180]	; (8001e5c <HAL_RCC_OscConfig+0x4f4>)
 8001da8:	4313      	orrs	r3, r2
 8001daa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dac:	4b2b      	ldr	r3, [pc, #172]	; (8001e5c <HAL_RCC_OscConfig+0x4f4>)
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6a19      	ldr	r1, [r3, #32]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dbc:	430b      	orrs	r3, r1
 8001dbe:	4927      	ldr	r1, [pc, #156]	; (8001e5c <HAL_RCC_OscConfig+0x4f4>)
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dc4:	4b27      	ldr	r3, [pc, #156]	; (8001e64 <HAL_RCC_OscConfig+0x4fc>)
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dca:	f7ff fb11 	bl	80013f0 <HAL_GetTick>
 8001dce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dd0:	e008      	b.n	8001de4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dd2:	f7ff fb0d 	bl	80013f0 <HAL_GetTick>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d901      	bls.n	8001de4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e037      	b.n	8001e54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001de4:	4b1d      	ldr	r3, [pc, #116]	; (8001e5c <HAL_RCC_OscConfig+0x4f4>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d0f0      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x46a>
 8001df0:	e02f      	b.n	8001e52 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001df2:	4b1c      	ldr	r3, [pc, #112]	; (8001e64 <HAL_RCC_OscConfig+0x4fc>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df8:	f7ff fafa 	bl	80013f0 <HAL_GetTick>
 8001dfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dfe:	e008      	b.n	8001e12 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e00:	f7ff faf6 	bl	80013f0 <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e020      	b.n	8001e54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e12:	4b12      	ldr	r3, [pc, #72]	; (8001e5c <HAL_RCC_OscConfig+0x4f4>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d1f0      	bne.n	8001e00 <HAL_RCC_OscConfig+0x498>
 8001e1e:	e018      	b.n	8001e52 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	69db      	ldr	r3, [r3, #28]
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d101      	bne.n	8001e2c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e013      	b.n	8001e54 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e2c:	4b0b      	ldr	r3, [pc, #44]	; (8001e5c <HAL_RCC_OscConfig+0x4f4>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6a1b      	ldr	r3, [r3, #32]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d106      	bne.n	8001e4e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d001      	beq.n	8001e52 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e000      	b.n	8001e54 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001e52:	2300      	movs	r3, #0
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3718      	adds	r7, #24
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	40021000 	.word	0x40021000
 8001e60:	40007000 	.word	0x40007000
 8001e64:	42420060 	.word	0x42420060

08001e68 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d101      	bne.n	8001e7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e0d0      	b.n	800201e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e7c:	4b6a      	ldr	r3, [pc, #424]	; (8002028 <HAL_RCC_ClockConfig+0x1c0>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0307 	and.w	r3, r3, #7
 8001e84:	683a      	ldr	r2, [r7, #0]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d910      	bls.n	8001eac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e8a:	4b67      	ldr	r3, [pc, #412]	; (8002028 <HAL_RCC_ClockConfig+0x1c0>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f023 0207 	bic.w	r2, r3, #7
 8001e92:	4965      	ldr	r1, [pc, #404]	; (8002028 <HAL_RCC_ClockConfig+0x1c0>)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e9a:	4b63      	ldr	r3, [pc, #396]	; (8002028 <HAL_RCC_ClockConfig+0x1c0>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0307 	and.w	r3, r3, #7
 8001ea2:	683a      	ldr	r2, [r7, #0]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d001      	beq.n	8001eac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e0b8      	b.n	800201e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0302 	and.w	r3, r3, #2
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d020      	beq.n	8001efa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0304 	and.w	r3, r3, #4
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d005      	beq.n	8001ed0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ec4:	4b59      	ldr	r3, [pc, #356]	; (800202c <HAL_RCC_ClockConfig+0x1c4>)
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	4a58      	ldr	r2, [pc, #352]	; (800202c <HAL_RCC_ClockConfig+0x1c4>)
 8001eca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001ece:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0308 	and.w	r3, r3, #8
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d005      	beq.n	8001ee8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001edc:	4b53      	ldr	r3, [pc, #332]	; (800202c <HAL_RCC_ClockConfig+0x1c4>)
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	4a52      	ldr	r2, [pc, #328]	; (800202c <HAL_RCC_ClockConfig+0x1c4>)
 8001ee2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001ee6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ee8:	4b50      	ldr	r3, [pc, #320]	; (800202c <HAL_RCC_ClockConfig+0x1c4>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	494d      	ldr	r1, [pc, #308]	; (800202c <HAL_RCC_ClockConfig+0x1c4>)
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0301 	and.w	r3, r3, #1
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d040      	beq.n	8001f88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d107      	bne.n	8001f1e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f0e:	4b47      	ldr	r3, [pc, #284]	; (800202c <HAL_RCC_ClockConfig+0x1c4>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d115      	bne.n	8001f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e07f      	b.n	800201e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d107      	bne.n	8001f36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f26:	4b41      	ldr	r3, [pc, #260]	; (800202c <HAL_RCC_ClockConfig+0x1c4>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d109      	bne.n	8001f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e073      	b.n	800201e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f36:	4b3d      	ldr	r3, [pc, #244]	; (800202c <HAL_RCC_ClockConfig+0x1c4>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d101      	bne.n	8001f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e06b      	b.n	800201e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f46:	4b39      	ldr	r3, [pc, #228]	; (800202c <HAL_RCC_ClockConfig+0x1c4>)
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f023 0203 	bic.w	r2, r3, #3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	4936      	ldr	r1, [pc, #216]	; (800202c <HAL_RCC_ClockConfig+0x1c4>)
 8001f54:	4313      	orrs	r3, r2
 8001f56:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f58:	f7ff fa4a 	bl	80013f0 <HAL_GetTick>
 8001f5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f5e:	e00a      	b.n	8001f76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f60:	f7ff fa46 	bl	80013f0 <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e053      	b.n	800201e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f76:	4b2d      	ldr	r3, [pc, #180]	; (800202c <HAL_RCC_ClockConfig+0x1c4>)
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f003 020c 	and.w	r2, r3, #12
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d1eb      	bne.n	8001f60 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f88:	4b27      	ldr	r3, [pc, #156]	; (8002028 <HAL_RCC_ClockConfig+0x1c0>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0307 	and.w	r3, r3, #7
 8001f90:	683a      	ldr	r2, [r7, #0]
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d210      	bcs.n	8001fb8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f96:	4b24      	ldr	r3, [pc, #144]	; (8002028 <HAL_RCC_ClockConfig+0x1c0>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f023 0207 	bic.w	r2, r3, #7
 8001f9e:	4922      	ldr	r1, [pc, #136]	; (8002028 <HAL_RCC_ClockConfig+0x1c0>)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fa6:	4b20      	ldr	r3, [pc, #128]	; (8002028 <HAL_RCC_ClockConfig+0x1c0>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0307 	and.w	r3, r3, #7
 8001fae:	683a      	ldr	r2, [r7, #0]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d001      	beq.n	8001fb8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e032      	b.n	800201e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0304 	and.w	r3, r3, #4
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d008      	beq.n	8001fd6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fc4:	4b19      	ldr	r3, [pc, #100]	; (800202c <HAL_RCC_ClockConfig+0x1c4>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	4916      	ldr	r1, [pc, #88]	; (800202c <HAL_RCC_ClockConfig+0x1c4>)
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0308 	and.w	r3, r3, #8
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d009      	beq.n	8001ff6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001fe2:	4b12      	ldr	r3, [pc, #72]	; (800202c <HAL_RCC_ClockConfig+0x1c4>)
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	691b      	ldr	r3, [r3, #16]
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	490e      	ldr	r1, [pc, #56]	; (800202c <HAL_RCC_ClockConfig+0x1c4>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ff6:	f000 f821 	bl	800203c <HAL_RCC_GetSysClockFreq>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	4b0b      	ldr	r3, [pc, #44]	; (800202c <HAL_RCC_ClockConfig+0x1c4>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	091b      	lsrs	r3, r3, #4
 8002002:	f003 030f 	and.w	r3, r3, #15
 8002006:	490a      	ldr	r1, [pc, #40]	; (8002030 <HAL_RCC_ClockConfig+0x1c8>)
 8002008:	5ccb      	ldrb	r3, [r1, r3]
 800200a:	fa22 f303 	lsr.w	r3, r2, r3
 800200e:	4a09      	ldr	r2, [pc, #36]	; (8002034 <HAL_RCC_ClockConfig+0x1cc>)
 8002010:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002012:	4b09      	ldr	r3, [pc, #36]	; (8002038 <HAL_RCC_ClockConfig+0x1d0>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4618      	mov	r0, r3
 8002018:	f7ff f9a8 	bl	800136c <HAL_InitTick>

  return HAL_OK;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3710      	adds	r7, #16
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	40022000 	.word	0x40022000
 800202c:	40021000 	.word	0x40021000
 8002030:	080053c0 	.word	0x080053c0
 8002034:	20000000 	.word	0x20000000
 8002038:	20000004 	.word	0x20000004

0800203c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800203c:	b490      	push	{r4, r7}
 800203e:	b08a      	sub	sp, #40	; 0x28
 8002040:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002042:	4b2a      	ldr	r3, [pc, #168]	; (80020ec <HAL_RCC_GetSysClockFreq+0xb0>)
 8002044:	1d3c      	adds	r4, r7, #4
 8002046:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002048:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800204c:	f240 2301 	movw	r3, #513	; 0x201
 8002050:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002052:	2300      	movs	r3, #0
 8002054:	61fb      	str	r3, [r7, #28]
 8002056:	2300      	movs	r3, #0
 8002058:	61bb      	str	r3, [r7, #24]
 800205a:	2300      	movs	r3, #0
 800205c:	627b      	str	r3, [r7, #36]	; 0x24
 800205e:	2300      	movs	r3, #0
 8002060:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002062:	2300      	movs	r3, #0
 8002064:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002066:	4b22      	ldr	r3, [pc, #136]	; (80020f0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	f003 030c 	and.w	r3, r3, #12
 8002072:	2b04      	cmp	r3, #4
 8002074:	d002      	beq.n	800207c <HAL_RCC_GetSysClockFreq+0x40>
 8002076:	2b08      	cmp	r3, #8
 8002078:	d003      	beq.n	8002082 <HAL_RCC_GetSysClockFreq+0x46>
 800207a:	e02d      	b.n	80020d8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800207c:	4b1d      	ldr	r3, [pc, #116]	; (80020f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800207e:	623b      	str	r3, [r7, #32]
      break;
 8002080:	e02d      	b.n	80020de <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	0c9b      	lsrs	r3, r3, #18
 8002086:	f003 030f 	and.w	r3, r3, #15
 800208a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800208e:	4413      	add	r3, r2
 8002090:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002094:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d013      	beq.n	80020c8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80020a0:	4b13      	ldr	r3, [pc, #76]	; (80020f0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	0c5b      	lsrs	r3, r3, #17
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80020ae:	4413      	add	r3, r2
 80020b0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80020b4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	4a0e      	ldr	r2, [pc, #56]	; (80020f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020ba:	fb02 f203 	mul.w	r2, r2, r3
 80020be:	69bb      	ldr	r3, [r7, #24]
 80020c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80020c4:	627b      	str	r3, [r7, #36]	; 0x24
 80020c6:	e004      	b.n	80020d2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	4a0b      	ldr	r2, [pc, #44]	; (80020f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80020cc:	fb02 f303 	mul.w	r3, r2, r3
 80020d0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80020d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d4:	623b      	str	r3, [r7, #32]
      break;
 80020d6:	e002      	b.n	80020de <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020d8:	4b06      	ldr	r3, [pc, #24]	; (80020f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020da:	623b      	str	r3, [r7, #32]
      break;
 80020dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020de:	6a3b      	ldr	r3, [r7, #32]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3728      	adds	r7, #40	; 0x28
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bc90      	pop	{r4, r7}
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	080053b0 	.word	0x080053b0
 80020f0:	40021000 	.word	0x40021000
 80020f4:	007a1200 	.word	0x007a1200
 80020f8:	003d0900 	.word	0x003d0900

080020fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b085      	sub	sp, #20
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002104:	4b0a      	ldr	r3, [pc, #40]	; (8002130 <RCC_Delay+0x34>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a0a      	ldr	r2, [pc, #40]	; (8002134 <RCC_Delay+0x38>)
 800210a:	fba2 2303 	umull	r2, r3, r2, r3
 800210e:	0a5b      	lsrs	r3, r3, #9
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	fb02 f303 	mul.w	r3, r2, r3
 8002116:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002118:	bf00      	nop
  }
  while (Delay --);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	1e5a      	subs	r2, r3, #1
 800211e:	60fa      	str	r2, [r7, #12]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d1f9      	bne.n	8002118 <RCC_Delay+0x1c>
}
 8002124:	bf00      	nop
 8002126:	bf00      	nop
 8002128:	3714      	adds	r7, #20
 800212a:	46bd      	mov	sp, r7
 800212c:	bc80      	pop	{r7}
 800212e:	4770      	bx	lr
 8002130:	20000000 	.word	0x20000000
 8002134:	10624dd3 	.word	0x10624dd3

08002138 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d101      	bne.n	800214a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e041      	b.n	80021ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002150:	b2db      	uxtb	r3, r3
 8002152:	2b00      	cmp	r3, #0
 8002154:	d106      	bne.n	8002164 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f7fe ffbc 	bl	80010dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2202      	movs	r2, #2
 8002168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	3304      	adds	r3, #4
 8002174:	4619      	mov	r1, r3
 8002176:	4610      	mov	r0, r2
 8002178:	f000 f936 	bl	80023e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2201      	movs	r2, #1
 8002180:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2201      	movs	r2, #1
 8002188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2201      	movs	r2, #1
 8002190:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2201      	movs	r2, #1
 8002198:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2201      	movs	r2, #1
 80021a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2201      	movs	r2, #1
 80021a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2201      	movs	r2, #1
 80021b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2201      	movs	r2, #1
 80021b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2201      	movs	r2, #1
 80021c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2201      	movs	r2, #1
 80021c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
	...

080021d8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80021d8:	b480      	push	{r7}
 80021da:	b085      	sub	sp, #20
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d001      	beq.n	80021f0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e02d      	b.n	800224c <HAL_TIM_Base_Start+0x74>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2202      	movs	r2, #2
 80021f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a16      	ldr	r2, [pc, #88]	; (8002258 <HAL_TIM_Base_Start+0x80>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d009      	beq.n	8002216 <HAL_TIM_Base_Start+0x3e>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800220a:	d004      	beq.n	8002216 <HAL_TIM_Base_Start+0x3e>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a12      	ldr	r2, [pc, #72]	; (800225c <HAL_TIM_Base_Start+0x84>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d111      	bne.n	800223a <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	f003 0307 	and.w	r3, r3, #7
 8002220:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2b06      	cmp	r3, #6
 8002226:	d010      	beq.n	800224a <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f042 0201 	orr.w	r2, r2, #1
 8002236:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002238:	e007      	b.n	800224a <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f042 0201 	orr.w	r2, r2, #1
 8002248:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800224a:	2300      	movs	r3, #0
}
 800224c:	4618      	mov	r0, r3
 800224e:	3714      	adds	r7, #20
 8002250:	46bd      	mov	sp, r7
 8002252:	bc80      	pop	{r7}
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	40012c00 	.word	0x40012c00
 800225c:	40000400 	.word	0x40000400

08002260 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002270:	2b01      	cmp	r3, #1
 8002272:	d101      	bne.n	8002278 <HAL_TIM_ConfigClockSource+0x18>
 8002274:	2302      	movs	r3, #2
 8002276:	e0b3      	b.n	80023e0 <HAL_TIM_ConfigClockSource+0x180>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2201      	movs	r2, #1
 800227c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2202      	movs	r2, #2
 8002284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002296:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800229e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	68fa      	ldr	r2, [r7, #12]
 80022a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022b0:	d03e      	beq.n	8002330 <HAL_TIM_ConfigClockSource+0xd0>
 80022b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022b6:	f200 8087 	bhi.w	80023c8 <HAL_TIM_ConfigClockSource+0x168>
 80022ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022be:	f000 8085 	beq.w	80023cc <HAL_TIM_ConfigClockSource+0x16c>
 80022c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022c6:	d87f      	bhi.n	80023c8 <HAL_TIM_ConfigClockSource+0x168>
 80022c8:	2b70      	cmp	r3, #112	; 0x70
 80022ca:	d01a      	beq.n	8002302 <HAL_TIM_ConfigClockSource+0xa2>
 80022cc:	2b70      	cmp	r3, #112	; 0x70
 80022ce:	d87b      	bhi.n	80023c8 <HAL_TIM_ConfigClockSource+0x168>
 80022d0:	2b60      	cmp	r3, #96	; 0x60
 80022d2:	d050      	beq.n	8002376 <HAL_TIM_ConfigClockSource+0x116>
 80022d4:	2b60      	cmp	r3, #96	; 0x60
 80022d6:	d877      	bhi.n	80023c8 <HAL_TIM_ConfigClockSource+0x168>
 80022d8:	2b50      	cmp	r3, #80	; 0x50
 80022da:	d03c      	beq.n	8002356 <HAL_TIM_ConfigClockSource+0xf6>
 80022dc:	2b50      	cmp	r3, #80	; 0x50
 80022de:	d873      	bhi.n	80023c8 <HAL_TIM_ConfigClockSource+0x168>
 80022e0:	2b40      	cmp	r3, #64	; 0x40
 80022e2:	d058      	beq.n	8002396 <HAL_TIM_ConfigClockSource+0x136>
 80022e4:	2b40      	cmp	r3, #64	; 0x40
 80022e6:	d86f      	bhi.n	80023c8 <HAL_TIM_ConfigClockSource+0x168>
 80022e8:	2b30      	cmp	r3, #48	; 0x30
 80022ea:	d064      	beq.n	80023b6 <HAL_TIM_ConfigClockSource+0x156>
 80022ec:	2b30      	cmp	r3, #48	; 0x30
 80022ee:	d86b      	bhi.n	80023c8 <HAL_TIM_ConfigClockSource+0x168>
 80022f0:	2b20      	cmp	r3, #32
 80022f2:	d060      	beq.n	80023b6 <HAL_TIM_ConfigClockSource+0x156>
 80022f4:	2b20      	cmp	r3, #32
 80022f6:	d867      	bhi.n	80023c8 <HAL_TIM_ConfigClockSource+0x168>
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d05c      	beq.n	80023b6 <HAL_TIM_ConfigClockSource+0x156>
 80022fc:	2b10      	cmp	r3, #16
 80022fe:	d05a      	beq.n	80023b6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002300:	e062      	b.n	80023c8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6818      	ldr	r0, [r3, #0]
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	6899      	ldr	r1, [r3, #8]
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	685a      	ldr	r2, [r3, #4]
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	f000 f938 	bl	8002586 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002324:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	68fa      	ldr	r2, [r7, #12]
 800232c:	609a      	str	r2, [r3, #8]
      break;
 800232e:	e04e      	b.n	80023ce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6818      	ldr	r0, [r3, #0]
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	6899      	ldr	r1, [r3, #8]
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685a      	ldr	r2, [r3, #4]
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	f000 f921 	bl	8002586 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	689a      	ldr	r2, [r3, #8]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002352:	609a      	str	r2, [r3, #8]
      break;
 8002354:	e03b      	b.n	80023ce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6818      	ldr	r0, [r3, #0]
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	6859      	ldr	r1, [r3, #4]
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	68db      	ldr	r3, [r3, #12]
 8002362:	461a      	mov	r2, r3
 8002364:	f000 f898 	bl	8002498 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2150      	movs	r1, #80	; 0x50
 800236e:	4618      	mov	r0, r3
 8002370:	f000 f8ef 	bl	8002552 <TIM_ITRx_SetConfig>
      break;
 8002374:	e02b      	b.n	80023ce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6818      	ldr	r0, [r3, #0]
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	6859      	ldr	r1, [r3, #4]
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	461a      	mov	r2, r3
 8002384:	f000 f8b6 	bl	80024f4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2160      	movs	r1, #96	; 0x60
 800238e:	4618      	mov	r0, r3
 8002390:	f000 f8df 	bl	8002552 <TIM_ITRx_SetConfig>
      break;
 8002394:	e01b      	b.n	80023ce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6818      	ldr	r0, [r3, #0]
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	6859      	ldr	r1, [r3, #4]
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	461a      	mov	r2, r3
 80023a4:	f000 f878 	bl	8002498 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2140      	movs	r1, #64	; 0x40
 80023ae:	4618      	mov	r0, r3
 80023b0:	f000 f8cf 	bl	8002552 <TIM_ITRx_SetConfig>
      break;
 80023b4:	e00b      	b.n	80023ce <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4619      	mov	r1, r3
 80023c0:	4610      	mov	r0, r2
 80023c2:	f000 f8c6 	bl	8002552 <TIM_ITRx_SetConfig>
        break;
 80023c6:	e002      	b.n	80023ce <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80023c8:	bf00      	nop
 80023ca:	e000      	b.n	80023ce <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80023cc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2201      	movs	r2, #1
 80023d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80023de:	2300      	movs	r3, #0
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3710      	adds	r7, #16
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b085      	sub	sp, #20
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	4a25      	ldr	r2, [pc, #148]	; (8002490 <TIM_Base_SetConfig+0xa8>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d007      	beq.n	8002410 <TIM_Base_SetConfig+0x28>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002406:	d003      	beq.n	8002410 <TIM_Base_SetConfig+0x28>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	4a22      	ldr	r2, [pc, #136]	; (8002494 <TIM_Base_SetConfig+0xac>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d108      	bne.n	8002422 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002416:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	68fa      	ldr	r2, [r7, #12]
 800241e:	4313      	orrs	r3, r2
 8002420:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a1a      	ldr	r2, [pc, #104]	; (8002490 <TIM_Base_SetConfig+0xa8>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d007      	beq.n	800243a <TIM_Base_SetConfig+0x52>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002430:	d003      	beq.n	800243a <TIM_Base_SetConfig+0x52>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a17      	ldr	r2, [pc, #92]	; (8002494 <TIM_Base_SetConfig+0xac>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d108      	bne.n	800244c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002440:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	68fa      	ldr	r2, [r7, #12]
 8002448:	4313      	orrs	r3, r2
 800244a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	695b      	ldr	r3, [r3, #20]
 8002456:	4313      	orrs	r3, r2
 8002458:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	68fa      	ldr	r2, [r7, #12]
 800245e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	689a      	ldr	r2, [r3, #8]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4a07      	ldr	r2, [pc, #28]	; (8002490 <TIM_Base_SetConfig+0xa8>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d103      	bne.n	8002480 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	691a      	ldr	r2, [r3, #16]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	615a      	str	r2, [r3, #20]
}
 8002486:	bf00      	nop
 8002488:	3714      	adds	r7, #20
 800248a:	46bd      	mov	sp, r7
 800248c:	bc80      	pop	{r7}
 800248e:	4770      	bx	lr
 8002490:	40012c00 	.word	0x40012c00
 8002494:	40000400 	.word	0x40000400

08002498 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002498:	b480      	push	{r7}
 800249a:	b087      	sub	sp, #28
 800249c:	af00      	add	r7, sp, #0
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	6a1b      	ldr	r3, [r3, #32]
 80024a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6a1b      	ldr	r3, [r3, #32]
 80024ae:	f023 0201 	bic.w	r2, r3, #1
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	699b      	ldr	r3, [r3, #24]
 80024ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	011b      	lsls	r3, r3, #4
 80024c8:	693a      	ldr	r2, [r7, #16]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	f023 030a 	bic.w	r3, r3, #10
 80024d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80024d6:	697a      	ldr	r2, [r7, #20]
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	4313      	orrs	r3, r2
 80024dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	693a      	ldr	r2, [r7, #16]
 80024e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	697a      	ldr	r2, [r7, #20]
 80024e8:	621a      	str	r2, [r3, #32]
}
 80024ea:	bf00      	nop
 80024ec:	371c      	adds	r7, #28
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bc80      	pop	{r7}
 80024f2:	4770      	bx	lr

080024f4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b087      	sub	sp, #28
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6a1b      	ldr	r3, [r3, #32]
 8002504:	f023 0210 	bic.w	r2, r3, #16
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	699b      	ldr	r3, [r3, #24]
 8002510:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6a1b      	ldr	r3, [r3, #32]
 8002516:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800251e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	031b      	lsls	r3, r3, #12
 8002524:	697a      	ldr	r2, [r7, #20]
 8002526:	4313      	orrs	r3, r2
 8002528:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002530:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	011b      	lsls	r3, r3, #4
 8002536:	693a      	ldr	r2, [r7, #16]
 8002538:	4313      	orrs	r3, r2
 800253a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	697a      	ldr	r2, [r7, #20]
 8002540:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	693a      	ldr	r2, [r7, #16]
 8002546:	621a      	str	r2, [r3, #32]
}
 8002548:	bf00      	nop
 800254a:	371c      	adds	r7, #28
 800254c:	46bd      	mov	sp, r7
 800254e:	bc80      	pop	{r7}
 8002550:	4770      	bx	lr

08002552 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002552:	b480      	push	{r7}
 8002554:	b085      	sub	sp, #20
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
 800255a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002568:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800256a:	683a      	ldr	r2, [r7, #0]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	4313      	orrs	r3, r2
 8002570:	f043 0307 	orr.w	r3, r3, #7
 8002574:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	68fa      	ldr	r2, [r7, #12]
 800257a:	609a      	str	r2, [r3, #8]
}
 800257c:	bf00      	nop
 800257e:	3714      	adds	r7, #20
 8002580:	46bd      	mov	sp, r7
 8002582:	bc80      	pop	{r7}
 8002584:	4770      	bx	lr

08002586 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002586:	b480      	push	{r7}
 8002588:	b087      	sub	sp, #28
 800258a:	af00      	add	r7, sp, #0
 800258c:	60f8      	str	r0, [r7, #12]
 800258e:	60b9      	str	r1, [r7, #8]
 8002590:	607a      	str	r2, [r7, #4]
 8002592:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80025a0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	021a      	lsls	r2, r3, #8
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	431a      	orrs	r2, r3
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	697a      	ldr	r2, [r7, #20]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	697a      	ldr	r2, [r7, #20]
 80025b8:	609a      	str	r2, [r3, #8]
}
 80025ba:	bf00      	nop
 80025bc:	371c      	adds	r7, #28
 80025be:	46bd      	mov	sp, r7
 80025c0:	bc80      	pop	{r7}
 80025c2:	4770      	bx	lr

080025c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b085      	sub	sp, #20
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d101      	bne.n	80025dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80025d8:	2302      	movs	r3, #2
 80025da:	e041      	b.n	8002660 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2201      	movs	r2, #1
 80025e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2202      	movs	r2, #2
 80025e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002602:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	68fa      	ldr	r2, [r7, #12]
 800260a:	4313      	orrs	r3, r2
 800260c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	68fa      	ldr	r2, [r7, #12]
 8002614:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a14      	ldr	r2, [pc, #80]	; (800266c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d009      	beq.n	8002634 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002628:	d004      	beq.n	8002634 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a10      	ldr	r2, [pc, #64]	; (8002670 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d10c      	bne.n	800264e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800263a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	68ba      	ldr	r2, [r7, #8]
 8002642:	4313      	orrs	r3, r2
 8002644:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	68ba      	ldr	r2, [r7, #8]
 800264c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2201      	movs	r2, #1
 8002652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800265e:	2300      	movs	r3, #0
}
 8002660:	4618      	mov	r0, r3
 8002662:	3714      	adds	r7, #20
 8002664:	46bd      	mov	sp, r7
 8002666:	bc80      	pop	{r7}
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	40012c00 	.word	0x40012c00
 8002670:	40000400 	.word	0x40000400

08002674 <gcvt>:
 8002674:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002676:	461c      	mov	r4, r3
 8002678:	4615      	mov	r5, r2
 800267a:	2300      	movs	r3, #0
 800267c:	2200      	movs	r2, #0
 800267e:	b085      	sub	sp, #20
 8002680:	4606      	mov	r6, r0
 8002682:	460f      	mov	r7, r1
 8002684:	f7fe f99a 	bl	80009bc <__aeabi_dcmplt>
 8002688:	4623      	mov	r3, r4
 800268a:	b118      	cbz	r0, 8002694 <gcvt+0x20>
 800268c:	222d      	movs	r2, #45	; 0x2d
 800268e:	3d01      	subs	r5, #1
 8002690:	f803 2b01 	strb.w	r2, [r3], #1
 8002694:	2267      	movs	r2, #103	; 0x67
 8002696:	2100      	movs	r1, #0
 8002698:	e9cd 5300 	strd	r5, r3, [sp]
 800269c:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80026a0:	4905      	ldr	r1, [pc, #20]	; (80026b8 <gcvt+0x44>)
 80026a2:	4632      	mov	r2, r6
 80026a4:	463b      	mov	r3, r7
 80026a6:	6808      	ldr	r0, [r1, #0]
 80026a8:	f001 fb92 	bl	8003dd0 <_gcvt>
 80026ac:	2800      	cmp	r0, #0
 80026ae:	bf14      	ite	ne
 80026b0:	4620      	movne	r0, r4
 80026b2:	2000      	moveq	r0, #0
 80026b4:	b005      	add	sp, #20
 80026b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026b8:	2000000c 	.word	0x2000000c

080026bc <__errno>:
 80026bc:	4b01      	ldr	r3, [pc, #4]	; (80026c4 <__errno+0x8>)
 80026be:	6818      	ldr	r0, [r3, #0]
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	2000000c 	.word	0x2000000c

080026c8 <__libc_init_array>:
 80026c8:	b570      	push	{r4, r5, r6, lr}
 80026ca:	2600      	movs	r6, #0
 80026cc:	4d0c      	ldr	r5, [pc, #48]	; (8002700 <__libc_init_array+0x38>)
 80026ce:	4c0d      	ldr	r4, [pc, #52]	; (8002704 <__libc_init_array+0x3c>)
 80026d0:	1b64      	subs	r4, r4, r5
 80026d2:	10a4      	asrs	r4, r4, #2
 80026d4:	42a6      	cmp	r6, r4
 80026d6:	d109      	bne.n	80026ec <__libc_init_array+0x24>
 80026d8:	f002 fe56 	bl	8005388 <_init>
 80026dc:	2600      	movs	r6, #0
 80026de:	4d0a      	ldr	r5, [pc, #40]	; (8002708 <__libc_init_array+0x40>)
 80026e0:	4c0a      	ldr	r4, [pc, #40]	; (800270c <__libc_init_array+0x44>)
 80026e2:	1b64      	subs	r4, r4, r5
 80026e4:	10a4      	asrs	r4, r4, #2
 80026e6:	42a6      	cmp	r6, r4
 80026e8:	d105      	bne.n	80026f6 <__libc_init_array+0x2e>
 80026ea:	bd70      	pop	{r4, r5, r6, pc}
 80026ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80026f0:	4798      	blx	r3
 80026f2:	3601      	adds	r6, #1
 80026f4:	e7ee      	b.n	80026d4 <__libc_init_array+0xc>
 80026f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80026fa:	4798      	blx	r3
 80026fc:	3601      	adds	r6, #1
 80026fe:	e7f2      	b.n	80026e6 <__libc_init_array+0x1e>
 8002700:	080057b4 	.word	0x080057b4
 8002704:	080057b4 	.word	0x080057b4
 8002708:	080057b4 	.word	0x080057b4
 800270c:	080057b8 	.word	0x080057b8

08002710 <memset>:
 8002710:	4603      	mov	r3, r0
 8002712:	4402      	add	r2, r0
 8002714:	4293      	cmp	r3, r2
 8002716:	d100      	bne.n	800271a <memset+0xa>
 8002718:	4770      	bx	lr
 800271a:	f803 1b01 	strb.w	r1, [r3], #1
 800271e:	e7f9      	b.n	8002714 <memset+0x4>

08002720 <__cvt>:
 8002720:	2b00      	cmp	r3, #0
 8002722:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002726:	461f      	mov	r7, r3
 8002728:	bfbb      	ittet	lt
 800272a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800272e:	461f      	movlt	r7, r3
 8002730:	2300      	movge	r3, #0
 8002732:	232d      	movlt	r3, #45	; 0x2d
 8002734:	b088      	sub	sp, #32
 8002736:	4614      	mov	r4, r2
 8002738:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800273a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800273c:	7013      	strb	r3, [r2, #0]
 800273e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002740:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8002744:	f023 0820 	bic.w	r8, r3, #32
 8002748:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800274c:	d005      	beq.n	800275a <__cvt+0x3a>
 800274e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8002752:	d100      	bne.n	8002756 <__cvt+0x36>
 8002754:	3501      	adds	r5, #1
 8002756:	2302      	movs	r3, #2
 8002758:	e000      	b.n	800275c <__cvt+0x3c>
 800275a:	2303      	movs	r3, #3
 800275c:	aa07      	add	r2, sp, #28
 800275e:	9204      	str	r2, [sp, #16]
 8002760:	aa06      	add	r2, sp, #24
 8002762:	e9cd a202 	strd	sl, r2, [sp, #8]
 8002766:	e9cd 3500 	strd	r3, r5, [sp]
 800276a:	4622      	mov	r2, r4
 800276c:	463b      	mov	r3, r7
 800276e:	f000 fcc7 	bl	8003100 <_dtoa_r>
 8002772:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002776:	4606      	mov	r6, r0
 8002778:	d102      	bne.n	8002780 <__cvt+0x60>
 800277a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800277c:	07db      	lsls	r3, r3, #31
 800277e:	d522      	bpl.n	80027c6 <__cvt+0xa6>
 8002780:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002784:	eb06 0905 	add.w	r9, r6, r5
 8002788:	d110      	bne.n	80027ac <__cvt+0x8c>
 800278a:	7833      	ldrb	r3, [r6, #0]
 800278c:	2b30      	cmp	r3, #48	; 0x30
 800278e:	d10a      	bne.n	80027a6 <__cvt+0x86>
 8002790:	2200      	movs	r2, #0
 8002792:	2300      	movs	r3, #0
 8002794:	4620      	mov	r0, r4
 8002796:	4639      	mov	r1, r7
 8002798:	f7fe f906 	bl	80009a8 <__aeabi_dcmpeq>
 800279c:	b918      	cbnz	r0, 80027a6 <__cvt+0x86>
 800279e:	f1c5 0501 	rsb	r5, r5, #1
 80027a2:	f8ca 5000 	str.w	r5, [sl]
 80027a6:	f8da 3000 	ldr.w	r3, [sl]
 80027aa:	4499      	add	r9, r3
 80027ac:	2200      	movs	r2, #0
 80027ae:	2300      	movs	r3, #0
 80027b0:	4620      	mov	r0, r4
 80027b2:	4639      	mov	r1, r7
 80027b4:	f7fe f8f8 	bl	80009a8 <__aeabi_dcmpeq>
 80027b8:	b108      	cbz	r0, 80027be <__cvt+0x9e>
 80027ba:	f8cd 901c 	str.w	r9, [sp, #28]
 80027be:	2230      	movs	r2, #48	; 0x30
 80027c0:	9b07      	ldr	r3, [sp, #28]
 80027c2:	454b      	cmp	r3, r9
 80027c4:	d307      	bcc.n	80027d6 <__cvt+0xb6>
 80027c6:	4630      	mov	r0, r6
 80027c8:	9b07      	ldr	r3, [sp, #28]
 80027ca:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80027cc:	1b9b      	subs	r3, r3, r6
 80027ce:	6013      	str	r3, [r2, #0]
 80027d0:	b008      	add	sp, #32
 80027d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80027d6:	1c59      	adds	r1, r3, #1
 80027d8:	9107      	str	r1, [sp, #28]
 80027da:	701a      	strb	r2, [r3, #0]
 80027dc:	e7f0      	b.n	80027c0 <__cvt+0xa0>

080027de <__exponent>:
 80027de:	4603      	mov	r3, r0
 80027e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80027e2:	2900      	cmp	r1, #0
 80027e4:	f803 2b02 	strb.w	r2, [r3], #2
 80027e8:	bfb6      	itet	lt
 80027ea:	222d      	movlt	r2, #45	; 0x2d
 80027ec:	222b      	movge	r2, #43	; 0x2b
 80027ee:	4249      	neglt	r1, r1
 80027f0:	2909      	cmp	r1, #9
 80027f2:	7042      	strb	r2, [r0, #1]
 80027f4:	dd2b      	ble.n	800284e <__exponent+0x70>
 80027f6:	f10d 0407 	add.w	r4, sp, #7
 80027fa:	46a4      	mov	ip, r4
 80027fc:	270a      	movs	r7, #10
 80027fe:	fb91 f6f7 	sdiv	r6, r1, r7
 8002802:	460a      	mov	r2, r1
 8002804:	46a6      	mov	lr, r4
 8002806:	fb07 1516 	mls	r5, r7, r6, r1
 800280a:	2a63      	cmp	r2, #99	; 0x63
 800280c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8002810:	4631      	mov	r1, r6
 8002812:	f104 34ff 	add.w	r4, r4, #4294967295
 8002816:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800281a:	dcf0      	bgt.n	80027fe <__exponent+0x20>
 800281c:	3130      	adds	r1, #48	; 0x30
 800281e:	f1ae 0502 	sub.w	r5, lr, #2
 8002822:	f804 1c01 	strb.w	r1, [r4, #-1]
 8002826:	4629      	mov	r1, r5
 8002828:	1c44      	adds	r4, r0, #1
 800282a:	4561      	cmp	r1, ip
 800282c:	d30a      	bcc.n	8002844 <__exponent+0x66>
 800282e:	f10d 0209 	add.w	r2, sp, #9
 8002832:	eba2 020e 	sub.w	r2, r2, lr
 8002836:	4565      	cmp	r5, ip
 8002838:	bf88      	it	hi
 800283a:	2200      	movhi	r2, #0
 800283c:	4413      	add	r3, r2
 800283e:	1a18      	subs	r0, r3, r0
 8002840:	b003      	add	sp, #12
 8002842:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002844:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002848:	f804 2f01 	strb.w	r2, [r4, #1]!
 800284c:	e7ed      	b.n	800282a <__exponent+0x4c>
 800284e:	2330      	movs	r3, #48	; 0x30
 8002850:	3130      	adds	r1, #48	; 0x30
 8002852:	7083      	strb	r3, [r0, #2]
 8002854:	70c1      	strb	r1, [r0, #3]
 8002856:	1d03      	adds	r3, r0, #4
 8002858:	e7f1      	b.n	800283e <__exponent+0x60>
	...

0800285c <_printf_float>:
 800285c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002860:	b091      	sub	sp, #68	; 0x44
 8002862:	460c      	mov	r4, r1
 8002864:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8002868:	4616      	mov	r6, r2
 800286a:	461f      	mov	r7, r3
 800286c:	4605      	mov	r5, r0
 800286e:	f001 fb6f 	bl	8003f50 <_localeconv_r>
 8002872:	6803      	ldr	r3, [r0, #0]
 8002874:	4618      	mov	r0, r3
 8002876:	9309      	str	r3, [sp, #36]	; 0x24
 8002878:	f7fd fc6a 	bl	8000150 <strlen>
 800287c:	2300      	movs	r3, #0
 800287e:	930e      	str	r3, [sp, #56]	; 0x38
 8002880:	f8d8 3000 	ldr.w	r3, [r8]
 8002884:	900a      	str	r0, [sp, #40]	; 0x28
 8002886:	3307      	adds	r3, #7
 8002888:	f023 0307 	bic.w	r3, r3, #7
 800288c:	f103 0208 	add.w	r2, r3, #8
 8002890:	f894 9018 	ldrb.w	r9, [r4, #24]
 8002894:	f8d4 b000 	ldr.w	fp, [r4]
 8002898:	f8c8 2000 	str.w	r2, [r8]
 800289c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028a0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80028a4:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80028a8:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80028ac:	930b      	str	r3, [sp, #44]	; 0x2c
 80028ae:	f04f 32ff 	mov.w	r2, #4294967295
 80028b2:	4640      	mov	r0, r8
 80028b4:	4b9c      	ldr	r3, [pc, #624]	; (8002b28 <_printf_float+0x2cc>)
 80028b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80028b8:	f7fe f8a8 	bl	8000a0c <__aeabi_dcmpun>
 80028bc:	bb70      	cbnz	r0, 800291c <_printf_float+0xc0>
 80028be:	f04f 32ff 	mov.w	r2, #4294967295
 80028c2:	4640      	mov	r0, r8
 80028c4:	4b98      	ldr	r3, [pc, #608]	; (8002b28 <_printf_float+0x2cc>)
 80028c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80028c8:	f7fe f882 	bl	80009d0 <__aeabi_dcmple>
 80028cc:	bb30      	cbnz	r0, 800291c <_printf_float+0xc0>
 80028ce:	2200      	movs	r2, #0
 80028d0:	2300      	movs	r3, #0
 80028d2:	4640      	mov	r0, r8
 80028d4:	4651      	mov	r1, sl
 80028d6:	f7fe f871 	bl	80009bc <__aeabi_dcmplt>
 80028da:	b110      	cbz	r0, 80028e2 <_printf_float+0x86>
 80028dc:	232d      	movs	r3, #45	; 0x2d
 80028de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80028e2:	4b92      	ldr	r3, [pc, #584]	; (8002b2c <_printf_float+0x2d0>)
 80028e4:	4892      	ldr	r0, [pc, #584]	; (8002b30 <_printf_float+0x2d4>)
 80028e6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80028ea:	bf94      	ite	ls
 80028ec:	4698      	movls	r8, r3
 80028ee:	4680      	movhi	r8, r0
 80028f0:	2303      	movs	r3, #3
 80028f2:	f04f 0a00 	mov.w	sl, #0
 80028f6:	6123      	str	r3, [r4, #16]
 80028f8:	f02b 0304 	bic.w	r3, fp, #4
 80028fc:	6023      	str	r3, [r4, #0]
 80028fe:	4633      	mov	r3, r6
 8002900:	4621      	mov	r1, r4
 8002902:	4628      	mov	r0, r5
 8002904:	9700      	str	r7, [sp, #0]
 8002906:	aa0f      	add	r2, sp, #60	; 0x3c
 8002908:	f000 f9d4 	bl	8002cb4 <_printf_common>
 800290c:	3001      	adds	r0, #1
 800290e:	f040 8090 	bne.w	8002a32 <_printf_float+0x1d6>
 8002912:	f04f 30ff 	mov.w	r0, #4294967295
 8002916:	b011      	add	sp, #68	; 0x44
 8002918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800291c:	4642      	mov	r2, r8
 800291e:	4653      	mov	r3, sl
 8002920:	4640      	mov	r0, r8
 8002922:	4651      	mov	r1, sl
 8002924:	f7fe f872 	bl	8000a0c <__aeabi_dcmpun>
 8002928:	b148      	cbz	r0, 800293e <_printf_float+0xe2>
 800292a:	f1ba 0f00 	cmp.w	sl, #0
 800292e:	bfb8      	it	lt
 8002930:	232d      	movlt	r3, #45	; 0x2d
 8002932:	4880      	ldr	r0, [pc, #512]	; (8002b34 <_printf_float+0x2d8>)
 8002934:	bfb8      	it	lt
 8002936:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800293a:	4b7f      	ldr	r3, [pc, #508]	; (8002b38 <_printf_float+0x2dc>)
 800293c:	e7d3      	b.n	80028e6 <_printf_float+0x8a>
 800293e:	6863      	ldr	r3, [r4, #4]
 8002940:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8002944:	1c5a      	adds	r2, r3, #1
 8002946:	d142      	bne.n	80029ce <_printf_float+0x172>
 8002948:	2306      	movs	r3, #6
 800294a:	6063      	str	r3, [r4, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	9206      	str	r2, [sp, #24]
 8002950:	aa0e      	add	r2, sp, #56	; 0x38
 8002952:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8002956:	aa0d      	add	r2, sp, #52	; 0x34
 8002958:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800295c:	9203      	str	r2, [sp, #12]
 800295e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8002962:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8002966:	6023      	str	r3, [r4, #0]
 8002968:	6863      	ldr	r3, [r4, #4]
 800296a:	4642      	mov	r2, r8
 800296c:	9300      	str	r3, [sp, #0]
 800296e:	4628      	mov	r0, r5
 8002970:	4653      	mov	r3, sl
 8002972:	910b      	str	r1, [sp, #44]	; 0x2c
 8002974:	f7ff fed4 	bl	8002720 <__cvt>
 8002978:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800297a:	4680      	mov	r8, r0
 800297c:	2947      	cmp	r1, #71	; 0x47
 800297e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002980:	d108      	bne.n	8002994 <_printf_float+0x138>
 8002982:	1cc8      	adds	r0, r1, #3
 8002984:	db02      	blt.n	800298c <_printf_float+0x130>
 8002986:	6863      	ldr	r3, [r4, #4]
 8002988:	4299      	cmp	r1, r3
 800298a:	dd40      	ble.n	8002a0e <_printf_float+0x1b2>
 800298c:	f1a9 0902 	sub.w	r9, r9, #2
 8002990:	fa5f f989 	uxtb.w	r9, r9
 8002994:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8002998:	d81f      	bhi.n	80029da <_printf_float+0x17e>
 800299a:	464a      	mov	r2, r9
 800299c:	3901      	subs	r1, #1
 800299e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80029a2:	910d      	str	r1, [sp, #52]	; 0x34
 80029a4:	f7ff ff1b 	bl	80027de <__exponent>
 80029a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80029aa:	4682      	mov	sl, r0
 80029ac:	1813      	adds	r3, r2, r0
 80029ae:	2a01      	cmp	r2, #1
 80029b0:	6123      	str	r3, [r4, #16]
 80029b2:	dc02      	bgt.n	80029ba <_printf_float+0x15e>
 80029b4:	6822      	ldr	r2, [r4, #0]
 80029b6:	07d2      	lsls	r2, r2, #31
 80029b8:	d501      	bpl.n	80029be <_printf_float+0x162>
 80029ba:	3301      	adds	r3, #1
 80029bc:	6123      	str	r3, [r4, #16]
 80029be:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d09b      	beq.n	80028fe <_printf_float+0xa2>
 80029c6:	232d      	movs	r3, #45	; 0x2d
 80029c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80029cc:	e797      	b.n	80028fe <_printf_float+0xa2>
 80029ce:	2947      	cmp	r1, #71	; 0x47
 80029d0:	d1bc      	bne.n	800294c <_printf_float+0xf0>
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d1ba      	bne.n	800294c <_printf_float+0xf0>
 80029d6:	2301      	movs	r3, #1
 80029d8:	e7b7      	b.n	800294a <_printf_float+0xee>
 80029da:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80029de:	d118      	bne.n	8002a12 <_printf_float+0x1b6>
 80029e0:	2900      	cmp	r1, #0
 80029e2:	6863      	ldr	r3, [r4, #4]
 80029e4:	dd0b      	ble.n	80029fe <_printf_float+0x1a2>
 80029e6:	6121      	str	r1, [r4, #16]
 80029e8:	b913      	cbnz	r3, 80029f0 <_printf_float+0x194>
 80029ea:	6822      	ldr	r2, [r4, #0]
 80029ec:	07d0      	lsls	r0, r2, #31
 80029ee:	d502      	bpl.n	80029f6 <_printf_float+0x19a>
 80029f0:	3301      	adds	r3, #1
 80029f2:	440b      	add	r3, r1
 80029f4:	6123      	str	r3, [r4, #16]
 80029f6:	f04f 0a00 	mov.w	sl, #0
 80029fa:	65a1      	str	r1, [r4, #88]	; 0x58
 80029fc:	e7df      	b.n	80029be <_printf_float+0x162>
 80029fe:	b913      	cbnz	r3, 8002a06 <_printf_float+0x1aa>
 8002a00:	6822      	ldr	r2, [r4, #0]
 8002a02:	07d2      	lsls	r2, r2, #31
 8002a04:	d501      	bpl.n	8002a0a <_printf_float+0x1ae>
 8002a06:	3302      	adds	r3, #2
 8002a08:	e7f4      	b.n	80029f4 <_printf_float+0x198>
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e7f2      	b.n	80029f4 <_printf_float+0x198>
 8002a0e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8002a12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002a14:	4299      	cmp	r1, r3
 8002a16:	db05      	blt.n	8002a24 <_printf_float+0x1c8>
 8002a18:	6823      	ldr	r3, [r4, #0]
 8002a1a:	6121      	str	r1, [r4, #16]
 8002a1c:	07d8      	lsls	r0, r3, #31
 8002a1e:	d5ea      	bpl.n	80029f6 <_printf_float+0x19a>
 8002a20:	1c4b      	adds	r3, r1, #1
 8002a22:	e7e7      	b.n	80029f4 <_printf_float+0x198>
 8002a24:	2900      	cmp	r1, #0
 8002a26:	bfcc      	ite	gt
 8002a28:	2201      	movgt	r2, #1
 8002a2a:	f1c1 0202 	rsble	r2, r1, #2
 8002a2e:	4413      	add	r3, r2
 8002a30:	e7e0      	b.n	80029f4 <_printf_float+0x198>
 8002a32:	6823      	ldr	r3, [r4, #0]
 8002a34:	055a      	lsls	r2, r3, #21
 8002a36:	d407      	bmi.n	8002a48 <_printf_float+0x1ec>
 8002a38:	6923      	ldr	r3, [r4, #16]
 8002a3a:	4642      	mov	r2, r8
 8002a3c:	4631      	mov	r1, r6
 8002a3e:	4628      	mov	r0, r5
 8002a40:	47b8      	blx	r7
 8002a42:	3001      	adds	r0, #1
 8002a44:	d12b      	bne.n	8002a9e <_printf_float+0x242>
 8002a46:	e764      	b.n	8002912 <_printf_float+0xb6>
 8002a48:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8002a4c:	f240 80dd 	bls.w	8002c0a <_printf_float+0x3ae>
 8002a50:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002a54:	2200      	movs	r2, #0
 8002a56:	2300      	movs	r3, #0
 8002a58:	f7fd ffa6 	bl	80009a8 <__aeabi_dcmpeq>
 8002a5c:	2800      	cmp	r0, #0
 8002a5e:	d033      	beq.n	8002ac8 <_printf_float+0x26c>
 8002a60:	2301      	movs	r3, #1
 8002a62:	4631      	mov	r1, r6
 8002a64:	4628      	mov	r0, r5
 8002a66:	4a35      	ldr	r2, [pc, #212]	; (8002b3c <_printf_float+0x2e0>)
 8002a68:	47b8      	blx	r7
 8002a6a:	3001      	adds	r0, #1
 8002a6c:	f43f af51 	beq.w	8002912 <_printf_float+0xb6>
 8002a70:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002a74:	429a      	cmp	r2, r3
 8002a76:	db02      	blt.n	8002a7e <_printf_float+0x222>
 8002a78:	6823      	ldr	r3, [r4, #0]
 8002a7a:	07d8      	lsls	r0, r3, #31
 8002a7c:	d50f      	bpl.n	8002a9e <_printf_float+0x242>
 8002a7e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002a82:	4631      	mov	r1, r6
 8002a84:	4628      	mov	r0, r5
 8002a86:	47b8      	blx	r7
 8002a88:	3001      	adds	r0, #1
 8002a8a:	f43f af42 	beq.w	8002912 <_printf_float+0xb6>
 8002a8e:	f04f 0800 	mov.w	r8, #0
 8002a92:	f104 091a 	add.w	r9, r4, #26
 8002a96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002a98:	3b01      	subs	r3, #1
 8002a9a:	4543      	cmp	r3, r8
 8002a9c:	dc09      	bgt.n	8002ab2 <_printf_float+0x256>
 8002a9e:	6823      	ldr	r3, [r4, #0]
 8002aa0:	079b      	lsls	r3, r3, #30
 8002aa2:	f100 8102 	bmi.w	8002caa <_printf_float+0x44e>
 8002aa6:	68e0      	ldr	r0, [r4, #12]
 8002aa8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002aaa:	4298      	cmp	r0, r3
 8002aac:	bfb8      	it	lt
 8002aae:	4618      	movlt	r0, r3
 8002ab0:	e731      	b.n	8002916 <_printf_float+0xba>
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	464a      	mov	r2, r9
 8002ab6:	4631      	mov	r1, r6
 8002ab8:	4628      	mov	r0, r5
 8002aba:	47b8      	blx	r7
 8002abc:	3001      	adds	r0, #1
 8002abe:	f43f af28 	beq.w	8002912 <_printf_float+0xb6>
 8002ac2:	f108 0801 	add.w	r8, r8, #1
 8002ac6:	e7e6      	b.n	8002a96 <_printf_float+0x23a>
 8002ac8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	dc38      	bgt.n	8002b40 <_printf_float+0x2e4>
 8002ace:	2301      	movs	r3, #1
 8002ad0:	4631      	mov	r1, r6
 8002ad2:	4628      	mov	r0, r5
 8002ad4:	4a19      	ldr	r2, [pc, #100]	; (8002b3c <_printf_float+0x2e0>)
 8002ad6:	47b8      	blx	r7
 8002ad8:	3001      	adds	r0, #1
 8002ada:	f43f af1a 	beq.w	8002912 <_printf_float+0xb6>
 8002ade:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	d102      	bne.n	8002aec <_printf_float+0x290>
 8002ae6:	6823      	ldr	r3, [r4, #0]
 8002ae8:	07d9      	lsls	r1, r3, #31
 8002aea:	d5d8      	bpl.n	8002a9e <_printf_float+0x242>
 8002aec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002af0:	4631      	mov	r1, r6
 8002af2:	4628      	mov	r0, r5
 8002af4:	47b8      	blx	r7
 8002af6:	3001      	adds	r0, #1
 8002af8:	f43f af0b 	beq.w	8002912 <_printf_float+0xb6>
 8002afc:	f04f 0900 	mov.w	r9, #0
 8002b00:	f104 0a1a 	add.w	sl, r4, #26
 8002b04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002b06:	425b      	negs	r3, r3
 8002b08:	454b      	cmp	r3, r9
 8002b0a:	dc01      	bgt.n	8002b10 <_printf_float+0x2b4>
 8002b0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002b0e:	e794      	b.n	8002a3a <_printf_float+0x1de>
 8002b10:	2301      	movs	r3, #1
 8002b12:	4652      	mov	r2, sl
 8002b14:	4631      	mov	r1, r6
 8002b16:	4628      	mov	r0, r5
 8002b18:	47b8      	blx	r7
 8002b1a:	3001      	adds	r0, #1
 8002b1c:	f43f aef9 	beq.w	8002912 <_printf_float+0xb6>
 8002b20:	f109 0901 	add.w	r9, r9, #1
 8002b24:	e7ee      	b.n	8002b04 <_printf_float+0x2a8>
 8002b26:	bf00      	nop
 8002b28:	7fefffff 	.word	0x7fefffff
 8002b2c:	080053d4 	.word	0x080053d4
 8002b30:	080053d8 	.word	0x080053d8
 8002b34:	080053e0 	.word	0x080053e0
 8002b38:	080053dc 	.word	0x080053dc
 8002b3c:	080053e4 	.word	0x080053e4
 8002b40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002b42:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002b44:	429a      	cmp	r2, r3
 8002b46:	bfa8      	it	ge
 8002b48:	461a      	movge	r2, r3
 8002b4a:	2a00      	cmp	r2, #0
 8002b4c:	4691      	mov	r9, r2
 8002b4e:	dc37      	bgt.n	8002bc0 <_printf_float+0x364>
 8002b50:	f04f 0b00 	mov.w	fp, #0
 8002b54:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002b58:	f104 021a 	add.w	r2, r4, #26
 8002b5c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8002b60:	ebaa 0309 	sub.w	r3, sl, r9
 8002b64:	455b      	cmp	r3, fp
 8002b66:	dc33      	bgt.n	8002bd0 <_printf_float+0x374>
 8002b68:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	db3b      	blt.n	8002be8 <_printf_float+0x38c>
 8002b70:	6823      	ldr	r3, [r4, #0]
 8002b72:	07da      	lsls	r2, r3, #31
 8002b74:	d438      	bmi.n	8002be8 <_printf_float+0x38c>
 8002b76:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002b78:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002b7a:	eba2 030a 	sub.w	r3, r2, sl
 8002b7e:	eba2 0901 	sub.w	r9, r2, r1
 8002b82:	4599      	cmp	r9, r3
 8002b84:	bfa8      	it	ge
 8002b86:	4699      	movge	r9, r3
 8002b88:	f1b9 0f00 	cmp.w	r9, #0
 8002b8c:	dc34      	bgt.n	8002bf8 <_printf_float+0x39c>
 8002b8e:	f04f 0800 	mov.w	r8, #0
 8002b92:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002b96:	f104 0a1a 	add.w	sl, r4, #26
 8002b9a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002b9e:	1a9b      	subs	r3, r3, r2
 8002ba0:	eba3 0309 	sub.w	r3, r3, r9
 8002ba4:	4543      	cmp	r3, r8
 8002ba6:	f77f af7a 	ble.w	8002a9e <_printf_float+0x242>
 8002baa:	2301      	movs	r3, #1
 8002bac:	4652      	mov	r2, sl
 8002bae:	4631      	mov	r1, r6
 8002bb0:	4628      	mov	r0, r5
 8002bb2:	47b8      	blx	r7
 8002bb4:	3001      	adds	r0, #1
 8002bb6:	f43f aeac 	beq.w	8002912 <_printf_float+0xb6>
 8002bba:	f108 0801 	add.w	r8, r8, #1
 8002bbe:	e7ec      	b.n	8002b9a <_printf_float+0x33e>
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	4631      	mov	r1, r6
 8002bc4:	4642      	mov	r2, r8
 8002bc6:	4628      	mov	r0, r5
 8002bc8:	47b8      	blx	r7
 8002bca:	3001      	adds	r0, #1
 8002bcc:	d1c0      	bne.n	8002b50 <_printf_float+0x2f4>
 8002bce:	e6a0      	b.n	8002912 <_printf_float+0xb6>
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	4631      	mov	r1, r6
 8002bd4:	4628      	mov	r0, r5
 8002bd6:	920b      	str	r2, [sp, #44]	; 0x2c
 8002bd8:	47b8      	blx	r7
 8002bda:	3001      	adds	r0, #1
 8002bdc:	f43f ae99 	beq.w	8002912 <_printf_float+0xb6>
 8002be0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002be2:	f10b 0b01 	add.w	fp, fp, #1
 8002be6:	e7b9      	b.n	8002b5c <_printf_float+0x300>
 8002be8:	4631      	mov	r1, r6
 8002bea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002bee:	4628      	mov	r0, r5
 8002bf0:	47b8      	blx	r7
 8002bf2:	3001      	adds	r0, #1
 8002bf4:	d1bf      	bne.n	8002b76 <_printf_float+0x31a>
 8002bf6:	e68c      	b.n	8002912 <_printf_float+0xb6>
 8002bf8:	464b      	mov	r3, r9
 8002bfa:	4631      	mov	r1, r6
 8002bfc:	4628      	mov	r0, r5
 8002bfe:	eb08 020a 	add.w	r2, r8, sl
 8002c02:	47b8      	blx	r7
 8002c04:	3001      	adds	r0, #1
 8002c06:	d1c2      	bne.n	8002b8e <_printf_float+0x332>
 8002c08:	e683      	b.n	8002912 <_printf_float+0xb6>
 8002c0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002c0c:	2a01      	cmp	r2, #1
 8002c0e:	dc01      	bgt.n	8002c14 <_printf_float+0x3b8>
 8002c10:	07db      	lsls	r3, r3, #31
 8002c12:	d537      	bpl.n	8002c84 <_printf_float+0x428>
 8002c14:	2301      	movs	r3, #1
 8002c16:	4642      	mov	r2, r8
 8002c18:	4631      	mov	r1, r6
 8002c1a:	4628      	mov	r0, r5
 8002c1c:	47b8      	blx	r7
 8002c1e:	3001      	adds	r0, #1
 8002c20:	f43f ae77 	beq.w	8002912 <_printf_float+0xb6>
 8002c24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002c28:	4631      	mov	r1, r6
 8002c2a:	4628      	mov	r0, r5
 8002c2c:	47b8      	blx	r7
 8002c2e:	3001      	adds	r0, #1
 8002c30:	f43f ae6f 	beq.w	8002912 <_printf_float+0xb6>
 8002c34:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002c38:	2200      	movs	r2, #0
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	f7fd feb4 	bl	80009a8 <__aeabi_dcmpeq>
 8002c40:	b9d8      	cbnz	r0, 8002c7a <_printf_float+0x41e>
 8002c42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002c44:	f108 0201 	add.w	r2, r8, #1
 8002c48:	3b01      	subs	r3, #1
 8002c4a:	4631      	mov	r1, r6
 8002c4c:	4628      	mov	r0, r5
 8002c4e:	47b8      	blx	r7
 8002c50:	3001      	adds	r0, #1
 8002c52:	d10e      	bne.n	8002c72 <_printf_float+0x416>
 8002c54:	e65d      	b.n	8002912 <_printf_float+0xb6>
 8002c56:	2301      	movs	r3, #1
 8002c58:	464a      	mov	r2, r9
 8002c5a:	4631      	mov	r1, r6
 8002c5c:	4628      	mov	r0, r5
 8002c5e:	47b8      	blx	r7
 8002c60:	3001      	adds	r0, #1
 8002c62:	f43f ae56 	beq.w	8002912 <_printf_float+0xb6>
 8002c66:	f108 0801 	add.w	r8, r8, #1
 8002c6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	4543      	cmp	r3, r8
 8002c70:	dcf1      	bgt.n	8002c56 <_printf_float+0x3fa>
 8002c72:	4653      	mov	r3, sl
 8002c74:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8002c78:	e6e0      	b.n	8002a3c <_printf_float+0x1e0>
 8002c7a:	f04f 0800 	mov.w	r8, #0
 8002c7e:	f104 091a 	add.w	r9, r4, #26
 8002c82:	e7f2      	b.n	8002c6a <_printf_float+0x40e>
 8002c84:	2301      	movs	r3, #1
 8002c86:	4642      	mov	r2, r8
 8002c88:	e7df      	b.n	8002c4a <_printf_float+0x3ee>
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	464a      	mov	r2, r9
 8002c8e:	4631      	mov	r1, r6
 8002c90:	4628      	mov	r0, r5
 8002c92:	47b8      	blx	r7
 8002c94:	3001      	adds	r0, #1
 8002c96:	f43f ae3c 	beq.w	8002912 <_printf_float+0xb6>
 8002c9a:	f108 0801 	add.w	r8, r8, #1
 8002c9e:	68e3      	ldr	r3, [r4, #12]
 8002ca0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8002ca2:	1a5b      	subs	r3, r3, r1
 8002ca4:	4543      	cmp	r3, r8
 8002ca6:	dcf0      	bgt.n	8002c8a <_printf_float+0x42e>
 8002ca8:	e6fd      	b.n	8002aa6 <_printf_float+0x24a>
 8002caa:	f04f 0800 	mov.w	r8, #0
 8002cae:	f104 0919 	add.w	r9, r4, #25
 8002cb2:	e7f4      	b.n	8002c9e <_printf_float+0x442>

08002cb4 <_printf_common>:
 8002cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002cb8:	4616      	mov	r6, r2
 8002cba:	4699      	mov	r9, r3
 8002cbc:	688a      	ldr	r2, [r1, #8]
 8002cbe:	690b      	ldr	r3, [r1, #16]
 8002cc0:	4607      	mov	r7, r0
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	bfb8      	it	lt
 8002cc6:	4613      	movlt	r3, r2
 8002cc8:	6033      	str	r3, [r6, #0]
 8002cca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002cce:	460c      	mov	r4, r1
 8002cd0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002cd4:	b10a      	cbz	r2, 8002cda <_printf_common+0x26>
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	6033      	str	r3, [r6, #0]
 8002cda:	6823      	ldr	r3, [r4, #0]
 8002cdc:	0699      	lsls	r1, r3, #26
 8002cde:	bf42      	ittt	mi
 8002ce0:	6833      	ldrmi	r3, [r6, #0]
 8002ce2:	3302      	addmi	r3, #2
 8002ce4:	6033      	strmi	r3, [r6, #0]
 8002ce6:	6825      	ldr	r5, [r4, #0]
 8002ce8:	f015 0506 	ands.w	r5, r5, #6
 8002cec:	d106      	bne.n	8002cfc <_printf_common+0x48>
 8002cee:	f104 0a19 	add.w	sl, r4, #25
 8002cf2:	68e3      	ldr	r3, [r4, #12]
 8002cf4:	6832      	ldr	r2, [r6, #0]
 8002cf6:	1a9b      	subs	r3, r3, r2
 8002cf8:	42ab      	cmp	r3, r5
 8002cfa:	dc28      	bgt.n	8002d4e <_printf_common+0x9a>
 8002cfc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002d00:	1e13      	subs	r3, r2, #0
 8002d02:	6822      	ldr	r2, [r4, #0]
 8002d04:	bf18      	it	ne
 8002d06:	2301      	movne	r3, #1
 8002d08:	0692      	lsls	r2, r2, #26
 8002d0a:	d42d      	bmi.n	8002d68 <_printf_common+0xb4>
 8002d0c:	4649      	mov	r1, r9
 8002d0e:	4638      	mov	r0, r7
 8002d10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002d14:	47c0      	blx	r8
 8002d16:	3001      	adds	r0, #1
 8002d18:	d020      	beq.n	8002d5c <_printf_common+0xa8>
 8002d1a:	6823      	ldr	r3, [r4, #0]
 8002d1c:	68e5      	ldr	r5, [r4, #12]
 8002d1e:	f003 0306 	and.w	r3, r3, #6
 8002d22:	2b04      	cmp	r3, #4
 8002d24:	bf18      	it	ne
 8002d26:	2500      	movne	r5, #0
 8002d28:	6832      	ldr	r2, [r6, #0]
 8002d2a:	f04f 0600 	mov.w	r6, #0
 8002d2e:	68a3      	ldr	r3, [r4, #8]
 8002d30:	bf08      	it	eq
 8002d32:	1aad      	subeq	r5, r5, r2
 8002d34:	6922      	ldr	r2, [r4, #16]
 8002d36:	bf08      	it	eq
 8002d38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	bfc4      	itt	gt
 8002d40:	1a9b      	subgt	r3, r3, r2
 8002d42:	18ed      	addgt	r5, r5, r3
 8002d44:	341a      	adds	r4, #26
 8002d46:	42b5      	cmp	r5, r6
 8002d48:	d11a      	bne.n	8002d80 <_printf_common+0xcc>
 8002d4a:	2000      	movs	r0, #0
 8002d4c:	e008      	b.n	8002d60 <_printf_common+0xac>
 8002d4e:	2301      	movs	r3, #1
 8002d50:	4652      	mov	r2, sl
 8002d52:	4649      	mov	r1, r9
 8002d54:	4638      	mov	r0, r7
 8002d56:	47c0      	blx	r8
 8002d58:	3001      	adds	r0, #1
 8002d5a:	d103      	bne.n	8002d64 <_printf_common+0xb0>
 8002d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d64:	3501      	adds	r5, #1
 8002d66:	e7c4      	b.n	8002cf2 <_printf_common+0x3e>
 8002d68:	2030      	movs	r0, #48	; 0x30
 8002d6a:	18e1      	adds	r1, r4, r3
 8002d6c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002d70:	1c5a      	adds	r2, r3, #1
 8002d72:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002d76:	4422      	add	r2, r4
 8002d78:	3302      	adds	r3, #2
 8002d7a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002d7e:	e7c5      	b.n	8002d0c <_printf_common+0x58>
 8002d80:	2301      	movs	r3, #1
 8002d82:	4622      	mov	r2, r4
 8002d84:	4649      	mov	r1, r9
 8002d86:	4638      	mov	r0, r7
 8002d88:	47c0      	blx	r8
 8002d8a:	3001      	adds	r0, #1
 8002d8c:	d0e6      	beq.n	8002d5c <_printf_common+0xa8>
 8002d8e:	3601      	adds	r6, #1
 8002d90:	e7d9      	b.n	8002d46 <_printf_common+0x92>
	...

08002d94 <_printf_i>:
 8002d94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002d98:	460c      	mov	r4, r1
 8002d9a:	7e27      	ldrb	r7, [r4, #24]
 8002d9c:	4691      	mov	r9, r2
 8002d9e:	2f78      	cmp	r7, #120	; 0x78
 8002da0:	4680      	mov	r8, r0
 8002da2:	469a      	mov	sl, r3
 8002da4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002da6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002daa:	d807      	bhi.n	8002dbc <_printf_i+0x28>
 8002dac:	2f62      	cmp	r7, #98	; 0x62
 8002dae:	d80a      	bhi.n	8002dc6 <_printf_i+0x32>
 8002db0:	2f00      	cmp	r7, #0
 8002db2:	f000 80d9 	beq.w	8002f68 <_printf_i+0x1d4>
 8002db6:	2f58      	cmp	r7, #88	; 0x58
 8002db8:	f000 80a4 	beq.w	8002f04 <_printf_i+0x170>
 8002dbc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002dc0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002dc4:	e03a      	b.n	8002e3c <_printf_i+0xa8>
 8002dc6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002dca:	2b15      	cmp	r3, #21
 8002dcc:	d8f6      	bhi.n	8002dbc <_printf_i+0x28>
 8002dce:	a001      	add	r0, pc, #4	; (adr r0, 8002dd4 <_printf_i+0x40>)
 8002dd0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002dd4:	08002e2d 	.word	0x08002e2d
 8002dd8:	08002e41 	.word	0x08002e41
 8002ddc:	08002dbd 	.word	0x08002dbd
 8002de0:	08002dbd 	.word	0x08002dbd
 8002de4:	08002dbd 	.word	0x08002dbd
 8002de8:	08002dbd 	.word	0x08002dbd
 8002dec:	08002e41 	.word	0x08002e41
 8002df0:	08002dbd 	.word	0x08002dbd
 8002df4:	08002dbd 	.word	0x08002dbd
 8002df8:	08002dbd 	.word	0x08002dbd
 8002dfc:	08002dbd 	.word	0x08002dbd
 8002e00:	08002f4f 	.word	0x08002f4f
 8002e04:	08002e71 	.word	0x08002e71
 8002e08:	08002f31 	.word	0x08002f31
 8002e0c:	08002dbd 	.word	0x08002dbd
 8002e10:	08002dbd 	.word	0x08002dbd
 8002e14:	08002f71 	.word	0x08002f71
 8002e18:	08002dbd 	.word	0x08002dbd
 8002e1c:	08002e71 	.word	0x08002e71
 8002e20:	08002dbd 	.word	0x08002dbd
 8002e24:	08002dbd 	.word	0x08002dbd
 8002e28:	08002f39 	.word	0x08002f39
 8002e2c:	680b      	ldr	r3, [r1, #0]
 8002e2e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002e32:	1d1a      	adds	r2, r3, #4
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	600a      	str	r2, [r1, #0]
 8002e38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e0a4      	b.n	8002f8a <_printf_i+0x1f6>
 8002e40:	6825      	ldr	r5, [r4, #0]
 8002e42:	6808      	ldr	r0, [r1, #0]
 8002e44:	062e      	lsls	r6, r5, #24
 8002e46:	f100 0304 	add.w	r3, r0, #4
 8002e4a:	d50a      	bpl.n	8002e62 <_printf_i+0xce>
 8002e4c:	6805      	ldr	r5, [r0, #0]
 8002e4e:	600b      	str	r3, [r1, #0]
 8002e50:	2d00      	cmp	r5, #0
 8002e52:	da03      	bge.n	8002e5c <_printf_i+0xc8>
 8002e54:	232d      	movs	r3, #45	; 0x2d
 8002e56:	426d      	negs	r5, r5
 8002e58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e5c:	230a      	movs	r3, #10
 8002e5e:	485e      	ldr	r0, [pc, #376]	; (8002fd8 <_printf_i+0x244>)
 8002e60:	e019      	b.n	8002e96 <_printf_i+0x102>
 8002e62:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002e66:	6805      	ldr	r5, [r0, #0]
 8002e68:	600b      	str	r3, [r1, #0]
 8002e6a:	bf18      	it	ne
 8002e6c:	b22d      	sxthne	r5, r5
 8002e6e:	e7ef      	b.n	8002e50 <_printf_i+0xbc>
 8002e70:	680b      	ldr	r3, [r1, #0]
 8002e72:	6825      	ldr	r5, [r4, #0]
 8002e74:	1d18      	adds	r0, r3, #4
 8002e76:	6008      	str	r0, [r1, #0]
 8002e78:	0628      	lsls	r0, r5, #24
 8002e7a:	d501      	bpl.n	8002e80 <_printf_i+0xec>
 8002e7c:	681d      	ldr	r5, [r3, #0]
 8002e7e:	e002      	b.n	8002e86 <_printf_i+0xf2>
 8002e80:	0669      	lsls	r1, r5, #25
 8002e82:	d5fb      	bpl.n	8002e7c <_printf_i+0xe8>
 8002e84:	881d      	ldrh	r5, [r3, #0]
 8002e86:	2f6f      	cmp	r7, #111	; 0x6f
 8002e88:	bf0c      	ite	eq
 8002e8a:	2308      	moveq	r3, #8
 8002e8c:	230a      	movne	r3, #10
 8002e8e:	4852      	ldr	r0, [pc, #328]	; (8002fd8 <_printf_i+0x244>)
 8002e90:	2100      	movs	r1, #0
 8002e92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002e96:	6866      	ldr	r6, [r4, #4]
 8002e98:	2e00      	cmp	r6, #0
 8002e9a:	bfa8      	it	ge
 8002e9c:	6821      	ldrge	r1, [r4, #0]
 8002e9e:	60a6      	str	r6, [r4, #8]
 8002ea0:	bfa4      	itt	ge
 8002ea2:	f021 0104 	bicge.w	r1, r1, #4
 8002ea6:	6021      	strge	r1, [r4, #0]
 8002ea8:	b90d      	cbnz	r5, 8002eae <_printf_i+0x11a>
 8002eaa:	2e00      	cmp	r6, #0
 8002eac:	d04d      	beq.n	8002f4a <_printf_i+0x1b6>
 8002eae:	4616      	mov	r6, r2
 8002eb0:	fbb5 f1f3 	udiv	r1, r5, r3
 8002eb4:	fb03 5711 	mls	r7, r3, r1, r5
 8002eb8:	5dc7      	ldrb	r7, [r0, r7]
 8002eba:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002ebe:	462f      	mov	r7, r5
 8002ec0:	42bb      	cmp	r3, r7
 8002ec2:	460d      	mov	r5, r1
 8002ec4:	d9f4      	bls.n	8002eb0 <_printf_i+0x11c>
 8002ec6:	2b08      	cmp	r3, #8
 8002ec8:	d10b      	bne.n	8002ee2 <_printf_i+0x14e>
 8002eca:	6823      	ldr	r3, [r4, #0]
 8002ecc:	07df      	lsls	r7, r3, #31
 8002ece:	d508      	bpl.n	8002ee2 <_printf_i+0x14e>
 8002ed0:	6923      	ldr	r3, [r4, #16]
 8002ed2:	6861      	ldr	r1, [r4, #4]
 8002ed4:	4299      	cmp	r1, r3
 8002ed6:	bfde      	ittt	le
 8002ed8:	2330      	movle	r3, #48	; 0x30
 8002eda:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002ede:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002ee2:	1b92      	subs	r2, r2, r6
 8002ee4:	6122      	str	r2, [r4, #16]
 8002ee6:	464b      	mov	r3, r9
 8002ee8:	4621      	mov	r1, r4
 8002eea:	4640      	mov	r0, r8
 8002eec:	f8cd a000 	str.w	sl, [sp]
 8002ef0:	aa03      	add	r2, sp, #12
 8002ef2:	f7ff fedf 	bl	8002cb4 <_printf_common>
 8002ef6:	3001      	adds	r0, #1
 8002ef8:	d14c      	bne.n	8002f94 <_printf_i+0x200>
 8002efa:	f04f 30ff 	mov.w	r0, #4294967295
 8002efe:	b004      	add	sp, #16
 8002f00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f04:	4834      	ldr	r0, [pc, #208]	; (8002fd8 <_printf_i+0x244>)
 8002f06:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002f0a:	680e      	ldr	r6, [r1, #0]
 8002f0c:	6823      	ldr	r3, [r4, #0]
 8002f0e:	f856 5b04 	ldr.w	r5, [r6], #4
 8002f12:	061f      	lsls	r7, r3, #24
 8002f14:	600e      	str	r6, [r1, #0]
 8002f16:	d514      	bpl.n	8002f42 <_printf_i+0x1ae>
 8002f18:	07d9      	lsls	r1, r3, #31
 8002f1a:	bf44      	itt	mi
 8002f1c:	f043 0320 	orrmi.w	r3, r3, #32
 8002f20:	6023      	strmi	r3, [r4, #0]
 8002f22:	b91d      	cbnz	r5, 8002f2c <_printf_i+0x198>
 8002f24:	6823      	ldr	r3, [r4, #0]
 8002f26:	f023 0320 	bic.w	r3, r3, #32
 8002f2a:	6023      	str	r3, [r4, #0]
 8002f2c:	2310      	movs	r3, #16
 8002f2e:	e7af      	b.n	8002e90 <_printf_i+0xfc>
 8002f30:	6823      	ldr	r3, [r4, #0]
 8002f32:	f043 0320 	orr.w	r3, r3, #32
 8002f36:	6023      	str	r3, [r4, #0]
 8002f38:	2378      	movs	r3, #120	; 0x78
 8002f3a:	4828      	ldr	r0, [pc, #160]	; (8002fdc <_printf_i+0x248>)
 8002f3c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002f40:	e7e3      	b.n	8002f0a <_printf_i+0x176>
 8002f42:	065e      	lsls	r6, r3, #25
 8002f44:	bf48      	it	mi
 8002f46:	b2ad      	uxthmi	r5, r5
 8002f48:	e7e6      	b.n	8002f18 <_printf_i+0x184>
 8002f4a:	4616      	mov	r6, r2
 8002f4c:	e7bb      	b.n	8002ec6 <_printf_i+0x132>
 8002f4e:	680b      	ldr	r3, [r1, #0]
 8002f50:	6826      	ldr	r6, [r4, #0]
 8002f52:	1d1d      	adds	r5, r3, #4
 8002f54:	6960      	ldr	r0, [r4, #20]
 8002f56:	600d      	str	r5, [r1, #0]
 8002f58:	0635      	lsls	r5, r6, #24
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	d501      	bpl.n	8002f62 <_printf_i+0x1ce>
 8002f5e:	6018      	str	r0, [r3, #0]
 8002f60:	e002      	b.n	8002f68 <_printf_i+0x1d4>
 8002f62:	0671      	lsls	r1, r6, #25
 8002f64:	d5fb      	bpl.n	8002f5e <_printf_i+0x1ca>
 8002f66:	8018      	strh	r0, [r3, #0]
 8002f68:	2300      	movs	r3, #0
 8002f6a:	4616      	mov	r6, r2
 8002f6c:	6123      	str	r3, [r4, #16]
 8002f6e:	e7ba      	b.n	8002ee6 <_printf_i+0x152>
 8002f70:	680b      	ldr	r3, [r1, #0]
 8002f72:	1d1a      	adds	r2, r3, #4
 8002f74:	600a      	str	r2, [r1, #0]
 8002f76:	681e      	ldr	r6, [r3, #0]
 8002f78:	2100      	movs	r1, #0
 8002f7a:	4630      	mov	r0, r6
 8002f7c:	6862      	ldr	r2, [r4, #4]
 8002f7e:	f000 fff3 	bl	8003f68 <memchr>
 8002f82:	b108      	cbz	r0, 8002f88 <_printf_i+0x1f4>
 8002f84:	1b80      	subs	r0, r0, r6
 8002f86:	6060      	str	r0, [r4, #4]
 8002f88:	6863      	ldr	r3, [r4, #4]
 8002f8a:	6123      	str	r3, [r4, #16]
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f92:	e7a8      	b.n	8002ee6 <_printf_i+0x152>
 8002f94:	4632      	mov	r2, r6
 8002f96:	4649      	mov	r1, r9
 8002f98:	4640      	mov	r0, r8
 8002f9a:	6923      	ldr	r3, [r4, #16]
 8002f9c:	47d0      	blx	sl
 8002f9e:	3001      	adds	r0, #1
 8002fa0:	d0ab      	beq.n	8002efa <_printf_i+0x166>
 8002fa2:	6823      	ldr	r3, [r4, #0]
 8002fa4:	079b      	lsls	r3, r3, #30
 8002fa6:	d413      	bmi.n	8002fd0 <_printf_i+0x23c>
 8002fa8:	68e0      	ldr	r0, [r4, #12]
 8002faa:	9b03      	ldr	r3, [sp, #12]
 8002fac:	4298      	cmp	r0, r3
 8002fae:	bfb8      	it	lt
 8002fb0:	4618      	movlt	r0, r3
 8002fb2:	e7a4      	b.n	8002efe <_printf_i+0x16a>
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	4632      	mov	r2, r6
 8002fb8:	4649      	mov	r1, r9
 8002fba:	4640      	mov	r0, r8
 8002fbc:	47d0      	blx	sl
 8002fbe:	3001      	adds	r0, #1
 8002fc0:	d09b      	beq.n	8002efa <_printf_i+0x166>
 8002fc2:	3501      	adds	r5, #1
 8002fc4:	68e3      	ldr	r3, [r4, #12]
 8002fc6:	9903      	ldr	r1, [sp, #12]
 8002fc8:	1a5b      	subs	r3, r3, r1
 8002fca:	42ab      	cmp	r3, r5
 8002fcc:	dcf2      	bgt.n	8002fb4 <_printf_i+0x220>
 8002fce:	e7eb      	b.n	8002fa8 <_printf_i+0x214>
 8002fd0:	2500      	movs	r5, #0
 8002fd2:	f104 0619 	add.w	r6, r4, #25
 8002fd6:	e7f5      	b.n	8002fc4 <_printf_i+0x230>
 8002fd8:	080053e6 	.word	0x080053e6
 8002fdc:	080053f7 	.word	0x080053f7

08002fe0 <quorem>:
 8002fe0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fe4:	6903      	ldr	r3, [r0, #16]
 8002fe6:	690c      	ldr	r4, [r1, #16]
 8002fe8:	4607      	mov	r7, r0
 8002fea:	42a3      	cmp	r3, r4
 8002fec:	f2c0 8083 	blt.w	80030f6 <quorem+0x116>
 8002ff0:	3c01      	subs	r4, #1
 8002ff2:	f100 0514 	add.w	r5, r0, #20
 8002ff6:	f101 0814 	add.w	r8, r1, #20
 8002ffa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002ffe:	9301      	str	r3, [sp, #4]
 8003000:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003004:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003008:	3301      	adds	r3, #1
 800300a:	429a      	cmp	r2, r3
 800300c:	fbb2 f6f3 	udiv	r6, r2, r3
 8003010:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003014:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003018:	d332      	bcc.n	8003080 <quorem+0xa0>
 800301a:	f04f 0e00 	mov.w	lr, #0
 800301e:	4640      	mov	r0, r8
 8003020:	46ac      	mov	ip, r5
 8003022:	46f2      	mov	sl, lr
 8003024:	f850 2b04 	ldr.w	r2, [r0], #4
 8003028:	b293      	uxth	r3, r2
 800302a:	fb06 e303 	mla	r3, r6, r3, lr
 800302e:	0c12      	lsrs	r2, r2, #16
 8003030:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8003034:	fb06 e202 	mla	r2, r6, r2, lr
 8003038:	b29b      	uxth	r3, r3
 800303a:	ebaa 0303 	sub.w	r3, sl, r3
 800303e:	f8dc a000 	ldr.w	sl, [ip]
 8003042:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003046:	fa1f fa8a 	uxth.w	sl, sl
 800304a:	4453      	add	r3, sl
 800304c:	fa1f fa82 	uxth.w	sl, r2
 8003050:	f8dc 2000 	ldr.w	r2, [ip]
 8003054:	4581      	cmp	r9, r0
 8003056:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800305a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800305e:	b29b      	uxth	r3, r3
 8003060:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003064:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003068:	f84c 3b04 	str.w	r3, [ip], #4
 800306c:	d2da      	bcs.n	8003024 <quorem+0x44>
 800306e:	f855 300b 	ldr.w	r3, [r5, fp]
 8003072:	b92b      	cbnz	r3, 8003080 <quorem+0xa0>
 8003074:	9b01      	ldr	r3, [sp, #4]
 8003076:	3b04      	subs	r3, #4
 8003078:	429d      	cmp	r5, r3
 800307a:	461a      	mov	r2, r3
 800307c:	d32f      	bcc.n	80030de <quorem+0xfe>
 800307e:	613c      	str	r4, [r7, #16]
 8003080:	4638      	mov	r0, r7
 8003082:	f001 fa07 	bl	8004494 <__mcmp>
 8003086:	2800      	cmp	r0, #0
 8003088:	db25      	blt.n	80030d6 <quorem+0xf6>
 800308a:	4628      	mov	r0, r5
 800308c:	f04f 0c00 	mov.w	ip, #0
 8003090:	3601      	adds	r6, #1
 8003092:	f858 1b04 	ldr.w	r1, [r8], #4
 8003096:	f8d0 e000 	ldr.w	lr, [r0]
 800309a:	b28b      	uxth	r3, r1
 800309c:	ebac 0303 	sub.w	r3, ip, r3
 80030a0:	fa1f f28e 	uxth.w	r2, lr
 80030a4:	4413      	add	r3, r2
 80030a6:	0c0a      	lsrs	r2, r1, #16
 80030a8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80030ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80030b6:	45c1      	cmp	r9, r8
 80030b8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80030bc:	f840 3b04 	str.w	r3, [r0], #4
 80030c0:	d2e7      	bcs.n	8003092 <quorem+0xb2>
 80030c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80030c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80030ca:	b922      	cbnz	r2, 80030d6 <quorem+0xf6>
 80030cc:	3b04      	subs	r3, #4
 80030ce:	429d      	cmp	r5, r3
 80030d0:	461a      	mov	r2, r3
 80030d2:	d30a      	bcc.n	80030ea <quorem+0x10a>
 80030d4:	613c      	str	r4, [r7, #16]
 80030d6:	4630      	mov	r0, r6
 80030d8:	b003      	add	sp, #12
 80030da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030de:	6812      	ldr	r2, [r2, #0]
 80030e0:	3b04      	subs	r3, #4
 80030e2:	2a00      	cmp	r2, #0
 80030e4:	d1cb      	bne.n	800307e <quorem+0x9e>
 80030e6:	3c01      	subs	r4, #1
 80030e8:	e7c6      	b.n	8003078 <quorem+0x98>
 80030ea:	6812      	ldr	r2, [r2, #0]
 80030ec:	3b04      	subs	r3, #4
 80030ee:	2a00      	cmp	r2, #0
 80030f0:	d1f0      	bne.n	80030d4 <quorem+0xf4>
 80030f2:	3c01      	subs	r4, #1
 80030f4:	e7eb      	b.n	80030ce <quorem+0xee>
 80030f6:	2000      	movs	r0, #0
 80030f8:	e7ee      	b.n	80030d8 <quorem+0xf8>
 80030fa:	0000      	movs	r0, r0
 80030fc:	0000      	movs	r0, r0
	...

08003100 <_dtoa_r>:
 8003100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003104:	4616      	mov	r6, r2
 8003106:	461f      	mov	r7, r3
 8003108:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800310a:	b099      	sub	sp, #100	; 0x64
 800310c:	4605      	mov	r5, r0
 800310e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003112:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8003116:	b974      	cbnz	r4, 8003136 <_dtoa_r+0x36>
 8003118:	2010      	movs	r0, #16
 800311a:	f000 ff1d 	bl	8003f58 <malloc>
 800311e:	4602      	mov	r2, r0
 8003120:	6268      	str	r0, [r5, #36]	; 0x24
 8003122:	b920      	cbnz	r0, 800312e <_dtoa_r+0x2e>
 8003124:	21ea      	movs	r1, #234	; 0xea
 8003126:	4bae      	ldr	r3, [pc, #696]	; (80033e0 <_dtoa_r+0x2e0>)
 8003128:	48ae      	ldr	r0, [pc, #696]	; (80033e4 <_dtoa_r+0x2e4>)
 800312a:	f001 fba3 	bl	8004874 <__assert_func>
 800312e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003132:	6004      	str	r4, [r0, #0]
 8003134:	60c4      	str	r4, [r0, #12]
 8003136:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003138:	6819      	ldr	r1, [r3, #0]
 800313a:	b151      	cbz	r1, 8003152 <_dtoa_r+0x52>
 800313c:	685a      	ldr	r2, [r3, #4]
 800313e:	2301      	movs	r3, #1
 8003140:	4093      	lsls	r3, r2
 8003142:	604a      	str	r2, [r1, #4]
 8003144:	608b      	str	r3, [r1, #8]
 8003146:	4628      	mov	r0, r5
 8003148:	f000 ff6a 	bl	8004020 <_Bfree>
 800314c:	2200      	movs	r2, #0
 800314e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003150:	601a      	str	r2, [r3, #0]
 8003152:	1e3b      	subs	r3, r7, #0
 8003154:	bfaf      	iteee	ge
 8003156:	2300      	movge	r3, #0
 8003158:	2201      	movlt	r2, #1
 800315a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800315e:	9305      	strlt	r3, [sp, #20]
 8003160:	bfa8      	it	ge
 8003162:	f8c8 3000 	strge.w	r3, [r8]
 8003166:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800316a:	4b9f      	ldr	r3, [pc, #636]	; (80033e8 <_dtoa_r+0x2e8>)
 800316c:	bfb8      	it	lt
 800316e:	f8c8 2000 	strlt.w	r2, [r8]
 8003172:	ea33 0309 	bics.w	r3, r3, r9
 8003176:	d119      	bne.n	80031ac <_dtoa_r+0xac>
 8003178:	f242 730f 	movw	r3, #9999	; 0x270f
 800317c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800317e:	6013      	str	r3, [r2, #0]
 8003180:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003184:	4333      	orrs	r3, r6
 8003186:	f000 8580 	beq.w	8003c8a <_dtoa_r+0xb8a>
 800318a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800318c:	b953      	cbnz	r3, 80031a4 <_dtoa_r+0xa4>
 800318e:	4b97      	ldr	r3, [pc, #604]	; (80033ec <_dtoa_r+0x2ec>)
 8003190:	e022      	b.n	80031d8 <_dtoa_r+0xd8>
 8003192:	4b97      	ldr	r3, [pc, #604]	; (80033f0 <_dtoa_r+0x2f0>)
 8003194:	9308      	str	r3, [sp, #32]
 8003196:	3308      	adds	r3, #8
 8003198:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800319a:	6013      	str	r3, [r2, #0]
 800319c:	9808      	ldr	r0, [sp, #32]
 800319e:	b019      	add	sp, #100	; 0x64
 80031a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031a4:	4b91      	ldr	r3, [pc, #580]	; (80033ec <_dtoa_r+0x2ec>)
 80031a6:	9308      	str	r3, [sp, #32]
 80031a8:	3303      	adds	r3, #3
 80031aa:	e7f5      	b.n	8003198 <_dtoa_r+0x98>
 80031ac:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80031b0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80031b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80031b8:	2200      	movs	r2, #0
 80031ba:	2300      	movs	r3, #0
 80031bc:	f7fd fbf4 	bl	80009a8 <__aeabi_dcmpeq>
 80031c0:	4680      	mov	r8, r0
 80031c2:	b158      	cbz	r0, 80031dc <_dtoa_r+0xdc>
 80031c4:	2301      	movs	r3, #1
 80031c6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80031c8:	6013      	str	r3, [r2, #0]
 80031ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	f000 8559 	beq.w	8003c84 <_dtoa_r+0xb84>
 80031d2:	4888      	ldr	r0, [pc, #544]	; (80033f4 <_dtoa_r+0x2f4>)
 80031d4:	6018      	str	r0, [r3, #0]
 80031d6:	1e43      	subs	r3, r0, #1
 80031d8:	9308      	str	r3, [sp, #32]
 80031da:	e7df      	b.n	800319c <_dtoa_r+0x9c>
 80031dc:	ab16      	add	r3, sp, #88	; 0x58
 80031de:	9301      	str	r3, [sp, #4]
 80031e0:	ab17      	add	r3, sp, #92	; 0x5c
 80031e2:	9300      	str	r3, [sp, #0]
 80031e4:	4628      	mov	r0, r5
 80031e6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80031ea:	f001 f9ff 	bl	80045ec <__d2b>
 80031ee:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80031f2:	4682      	mov	sl, r0
 80031f4:	2c00      	cmp	r4, #0
 80031f6:	d07e      	beq.n	80032f6 <_dtoa_r+0x1f6>
 80031f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80031fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80031fe:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8003202:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003206:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800320a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800320e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8003212:	2200      	movs	r2, #0
 8003214:	4b78      	ldr	r3, [pc, #480]	; (80033f8 <_dtoa_r+0x2f8>)
 8003216:	f7fc ffa7 	bl	8000168 <__aeabi_dsub>
 800321a:	a36b      	add	r3, pc, #428	; (adr r3, 80033c8 <_dtoa_r+0x2c8>)
 800321c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003220:	f7fd f95a 	bl	80004d8 <__aeabi_dmul>
 8003224:	a36a      	add	r3, pc, #424	; (adr r3, 80033d0 <_dtoa_r+0x2d0>)
 8003226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800322a:	f7fc ff9f 	bl	800016c <__adddf3>
 800322e:	4606      	mov	r6, r0
 8003230:	4620      	mov	r0, r4
 8003232:	460f      	mov	r7, r1
 8003234:	f7fd f8e6 	bl	8000404 <__aeabi_i2d>
 8003238:	a367      	add	r3, pc, #412	; (adr r3, 80033d8 <_dtoa_r+0x2d8>)
 800323a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800323e:	f7fd f94b 	bl	80004d8 <__aeabi_dmul>
 8003242:	4602      	mov	r2, r0
 8003244:	460b      	mov	r3, r1
 8003246:	4630      	mov	r0, r6
 8003248:	4639      	mov	r1, r7
 800324a:	f7fc ff8f 	bl	800016c <__adddf3>
 800324e:	4606      	mov	r6, r0
 8003250:	460f      	mov	r7, r1
 8003252:	f7fd fbf1 	bl	8000a38 <__aeabi_d2iz>
 8003256:	2200      	movs	r2, #0
 8003258:	4681      	mov	r9, r0
 800325a:	2300      	movs	r3, #0
 800325c:	4630      	mov	r0, r6
 800325e:	4639      	mov	r1, r7
 8003260:	f7fd fbac 	bl	80009bc <__aeabi_dcmplt>
 8003264:	b148      	cbz	r0, 800327a <_dtoa_r+0x17a>
 8003266:	4648      	mov	r0, r9
 8003268:	f7fd f8cc 	bl	8000404 <__aeabi_i2d>
 800326c:	4632      	mov	r2, r6
 800326e:	463b      	mov	r3, r7
 8003270:	f7fd fb9a 	bl	80009a8 <__aeabi_dcmpeq>
 8003274:	b908      	cbnz	r0, 800327a <_dtoa_r+0x17a>
 8003276:	f109 39ff 	add.w	r9, r9, #4294967295
 800327a:	f1b9 0f16 	cmp.w	r9, #22
 800327e:	d857      	bhi.n	8003330 <_dtoa_r+0x230>
 8003280:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003284:	4b5d      	ldr	r3, [pc, #372]	; (80033fc <_dtoa_r+0x2fc>)
 8003286:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800328a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800328e:	f7fd fb95 	bl	80009bc <__aeabi_dcmplt>
 8003292:	2800      	cmp	r0, #0
 8003294:	d04e      	beq.n	8003334 <_dtoa_r+0x234>
 8003296:	2300      	movs	r3, #0
 8003298:	f109 39ff 	add.w	r9, r9, #4294967295
 800329c:	930f      	str	r3, [sp, #60]	; 0x3c
 800329e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80032a0:	1b1c      	subs	r4, r3, r4
 80032a2:	1e63      	subs	r3, r4, #1
 80032a4:	9309      	str	r3, [sp, #36]	; 0x24
 80032a6:	bf49      	itett	mi
 80032a8:	f1c4 0301 	rsbmi	r3, r4, #1
 80032ac:	2300      	movpl	r3, #0
 80032ae:	9306      	strmi	r3, [sp, #24]
 80032b0:	2300      	movmi	r3, #0
 80032b2:	bf54      	ite	pl
 80032b4:	9306      	strpl	r3, [sp, #24]
 80032b6:	9309      	strmi	r3, [sp, #36]	; 0x24
 80032b8:	f1b9 0f00 	cmp.w	r9, #0
 80032bc:	db3c      	blt.n	8003338 <_dtoa_r+0x238>
 80032be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80032c0:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80032c4:	444b      	add	r3, r9
 80032c6:	9309      	str	r3, [sp, #36]	; 0x24
 80032c8:	2300      	movs	r3, #0
 80032ca:	930a      	str	r3, [sp, #40]	; 0x28
 80032cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80032ce:	2b09      	cmp	r3, #9
 80032d0:	d86c      	bhi.n	80033ac <_dtoa_r+0x2ac>
 80032d2:	2b05      	cmp	r3, #5
 80032d4:	bfc4      	itt	gt
 80032d6:	3b04      	subgt	r3, #4
 80032d8:	9322      	strgt	r3, [sp, #136]	; 0x88
 80032da:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80032dc:	bfc8      	it	gt
 80032de:	2400      	movgt	r4, #0
 80032e0:	f1a3 0302 	sub.w	r3, r3, #2
 80032e4:	bfd8      	it	le
 80032e6:	2401      	movle	r4, #1
 80032e8:	2b03      	cmp	r3, #3
 80032ea:	f200 808b 	bhi.w	8003404 <_dtoa_r+0x304>
 80032ee:	e8df f003 	tbb	[pc, r3]
 80032f2:	4f2d      	.short	0x4f2d
 80032f4:	5b4d      	.short	0x5b4d
 80032f6:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80032fa:	441c      	add	r4, r3
 80032fc:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8003300:	2b20      	cmp	r3, #32
 8003302:	bfc3      	ittte	gt
 8003304:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003308:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800330c:	fa09 f303 	lslgt.w	r3, r9, r3
 8003310:	f1c3 0320 	rsble	r3, r3, #32
 8003314:	bfc6      	itte	gt
 8003316:	fa26 f000 	lsrgt.w	r0, r6, r0
 800331a:	4318      	orrgt	r0, r3
 800331c:	fa06 f003 	lslle.w	r0, r6, r3
 8003320:	f7fd f860 	bl	80003e4 <__aeabi_ui2d>
 8003324:	2301      	movs	r3, #1
 8003326:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800332a:	3c01      	subs	r4, #1
 800332c:	9313      	str	r3, [sp, #76]	; 0x4c
 800332e:	e770      	b.n	8003212 <_dtoa_r+0x112>
 8003330:	2301      	movs	r3, #1
 8003332:	e7b3      	b.n	800329c <_dtoa_r+0x19c>
 8003334:	900f      	str	r0, [sp, #60]	; 0x3c
 8003336:	e7b2      	b.n	800329e <_dtoa_r+0x19e>
 8003338:	9b06      	ldr	r3, [sp, #24]
 800333a:	eba3 0309 	sub.w	r3, r3, r9
 800333e:	9306      	str	r3, [sp, #24]
 8003340:	f1c9 0300 	rsb	r3, r9, #0
 8003344:	930a      	str	r3, [sp, #40]	; 0x28
 8003346:	2300      	movs	r3, #0
 8003348:	930e      	str	r3, [sp, #56]	; 0x38
 800334a:	e7bf      	b.n	80032cc <_dtoa_r+0x1cc>
 800334c:	2300      	movs	r3, #0
 800334e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003350:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003352:	2b00      	cmp	r3, #0
 8003354:	dc59      	bgt.n	800340a <_dtoa_r+0x30a>
 8003356:	f04f 0b01 	mov.w	fp, #1
 800335a:	465b      	mov	r3, fp
 800335c:	f8cd b008 	str.w	fp, [sp, #8]
 8003360:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8003364:	2200      	movs	r2, #0
 8003366:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8003368:	6042      	str	r2, [r0, #4]
 800336a:	2204      	movs	r2, #4
 800336c:	f102 0614 	add.w	r6, r2, #20
 8003370:	429e      	cmp	r6, r3
 8003372:	6841      	ldr	r1, [r0, #4]
 8003374:	d94f      	bls.n	8003416 <_dtoa_r+0x316>
 8003376:	4628      	mov	r0, r5
 8003378:	f000 fe12 	bl	8003fa0 <_Balloc>
 800337c:	9008      	str	r0, [sp, #32]
 800337e:	2800      	cmp	r0, #0
 8003380:	d14d      	bne.n	800341e <_dtoa_r+0x31e>
 8003382:	4602      	mov	r2, r0
 8003384:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003388:	4b1d      	ldr	r3, [pc, #116]	; (8003400 <_dtoa_r+0x300>)
 800338a:	e6cd      	b.n	8003128 <_dtoa_r+0x28>
 800338c:	2301      	movs	r3, #1
 800338e:	e7de      	b.n	800334e <_dtoa_r+0x24e>
 8003390:	2300      	movs	r3, #0
 8003392:	930b      	str	r3, [sp, #44]	; 0x2c
 8003394:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003396:	eb09 0b03 	add.w	fp, r9, r3
 800339a:	f10b 0301 	add.w	r3, fp, #1
 800339e:	2b01      	cmp	r3, #1
 80033a0:	9302      	str	r3, [sp, #8]
 80033a2:	bfb8      	it	lt
 80033a4:	2301      	movlt	r3, #1
 80033a6:	e7dd      	b.n	8003364 <_dtoa_r+0x264>
 80033a8:	2301      	movs	r3, #1
 80033aa:	e7f2      	b.n	8003392 <_dtoa_r+0x292>
 80033ac:	2401      	movs	r4, #1
 80033ae:	2300      	movs	r3, #0
 80033b0:	940b      	str	r4, [sp, #44]	; 0x2c
 80033b2:	9322      	str	r3, [sp, #136]	; 0x88
 80033b4:	f04f 3bff 	mov.w	fp, #4294967295
 80033b8:	2200      	movs	r2, #0
 80033ba:	2312      	movs	r3, #18
 80033bc:	f8cd b008 	str.w	fp, [sp, #8]
 80033c0:	9223      	str	r2, [sp, #140]	; 0x8c
 80033c2:	e7cf      	b.n	8003364 <_dtoa_r+0x264>
 80033c4:	f3af 8000 	nop.w
 80033c8:	636f4361 	.word	0x636f4361
 80033cc:	3fd287a7 	.word	0x3fd287a7
 80033d0:	8b60c8b3 	.word	0x8b60c8b3
 80033d4:	3fc68a28 	.word	0x3fc68a28
 80033d8:	509f79fb 	.word	0x509f79fb
 80033dc:	3fd34413 	.word	0x3fd34413
 80033e0:	08005415 	.word	0x08005415
 80033e4:	0800542c 	.word	0x0800542c
 80033e8:	7ff00000 	.word	0x7ff00000
 80033ec:	08005411 	.word	0x08005411
 80033f0:	08005408 	.word	0x08005408
 80033f4:	080053e5 	.word	0x080053e5
 80033f8:	3ff80000 	.word	0x3ff80000
 80033fc:	08005528 	.word	0x08005528
 8003400:	0800548b 	.word	0x0800548b
 8003404:	2301      	movs	r3, #1
 8003406:	930b      	str	r3, [sp, #44]	; 0x2c
 8003408:	e7d4      	b.n	80033b4 <_dtoa_r+0x2b4>
 800340a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800340e:	465b      	mov	r3, fp
 8003410:	f8cd b008 	str.w	fp, [sp, #8]
 8003414:	e7a6      	b.n	8003364 <_dtoa_r+0x264>
 8003416:	3101      	adds	r1, #1
 8003418:	6041      	str	r1, [r0, #4]
 800341a:	0052      	lsls	r2, r2, #1
 800341c:	e7a6      	b.n	800336c <_dtoa_r+0x26c>
 800341e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003420:	9a08      	ldr	r2, [sp, #32]
 8003422:	601a      	str	r2, [r3, #0]
 8003424:	9b02      	ldr	r3, [sp, #8]
 8003426:	2b0e      	cmp	r3, #14
 8003428:	f200 80a8 	bhi.w	800357c <_dtoa_r+0x47c>
 800342c:	2c00      	cmp	r4, #0
 800342e:	f000 80a5 	beq.w	800357c <_dtoa_r+0x47c>
 8003432:	f1b9 0f00 	cmp.w	r9, #0
 8003436:	dd34      	ble.n	80034a2 <_dtoa_r+0x3a2>
 8003438:	4a9a      	ldr	r2, [pc, #616]	; (80036a4 <_dtoa_r+0x5a4>)
 800343a:	f009 030f 	and.w	r3, r9, #15
 800343e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003442:	f419 7f80 	tst.w	r9, #256	; 0x100
 8003446:	e9d3 3400 	ldrd	r3, r4, [r3]
 800344a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800344e:	ea4f 1429 	mov.w	r4, r9, asr #4
 8003452:	d016      	beq.n	8003482 <_dtoa_r+0x382>
 8003454:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003458:	4b93      	ldr	r3, [pc, #588]	; (80036a8 <_dtoa_r+0x5a8>)
 800345a:	2703      	movs	r7, #3
 800345c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003460:	f7fd f964 	bl	800072c <__aeabi_ddiv>
 8003464:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003468:	f004 040f 	and.w	r4, r4, #15
 800346c:	4e8e      	ldr	r6, [pc, #568]	; (80036a8 <_dtoa_r+0x5a8>)
 800346e:	b954      	cbnz	r4, 8003486 <_dtoa_r+0x386>
 8003470:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003474:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003478:	f7fd f958 	bl	800072c <__aeabi_ddiv>
 800347c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003480:	e029      	b.n	80034d6 <_dtoa_r+0x3d6>
 8003482:	2702      	movs	r7, #2
 8003484:	e7f2      	b.n	800346c <_dtoa_r+0x36c>
 8003486:	07e1      	lsls	r1, r4, #31
 8003488:	d508      	bpl.n	800349c <_dtoa_r+0x39c>
 800348a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800348e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003492:	f7fd f821 	bl	80004d8 <__aeabi_dmul>
 8003496:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800349a:	3701      	adds	r7, #1
 800349c:	1064      	asrs	r4, r4, #1
 800349e:	3608      	adds	r6, #8
 80034a0:	e7e5      	b.n	800346e <_dtoa_r+0x36e>
 80034a2:	f000 80a5 	beq.w	80035f0 <_dtoa_r+0x4f0>
 80034a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80034aa:	f1c9 0400 	rsb	r4, r9, #0
 80034ae:	4b7d      	ldr	r3, [pc, #500]	; (80036a4 <_dtoa_r+0x5a4>)
 80034b0:	f004 020f 	and.w	r2, r4, #15
 80034b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80034b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034bc:	f7fd f80c 	bl	80004d8 <__aeabi_dmul>
 80034c0:	2702      	movs	r7, #2
 80034c2:	2300      	movs	r3, #0
 80034c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80034c8:	4e77      	ldr	r6, [pc, #476]	; (80036a8 <_dtoa_r+0x5a8>)
 80034ca:	1124      	asrs	r4, r4, #4
 80034cc:	2c00      	cmp	r4, #0
 80034ce:	f040 8084 	bne.w	80035da <_dtoa_r+0x4da>
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d1d2      	bne.n	800347c <_dtoa_r+0x37c>
 80034d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80034d8:	2b00      	cmp	r3, #0
 80034da:	f000 808b 	beq.w	80035f4 <_dtoa_r+0x4f4>
 80034de:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80034e2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80034e6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80034ea:	2200      	movs	r2, #0
 80034ec:	4b6f      	ldr	r3, [pc, #444]	; (80036ac <_dtoa_r+0x5ac>)
 80034ee:	f7fd fa65 	bl	80009bc <__aeabi_dcmplt>
 80034f2:	2800      	cmp	r0, #0
 80034f4:	d07e      	beq.n	80035f4 <_dtoa_r+0x4f4>
 80034f6:	9b02      	ldr	r3, [sp, #8]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d07b      	beq.n	80035f4 <_dtoa_r+0x4f4>
 80034fc:	f1bb 0f00 	cmp.w	fp, #0
 8003500:	dd38      	ble.n	8003574 <_dtoa_r+0x474>
 8003502:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003506:	2200      	movs	r2, #0
 8003508:	4b69      	ldr	r3, [pc, #420]	; (80036b0 <_dtoa_r+0x5b0>)
 800350a:	f7fc ffe5 	bl	80004d8 <__aeabi_dmul>
 800350e:	465c      	mov	r4, fp
 8003510:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003514:	f109 38ff 	add.w	r8, r9, #4294967295
 8003518:	3701      	adds	r7, #1
 800351a:	4638      	mov	r0, r7
 800351c:	f7fc ff72 	bl	8000404 <__aeabi_i2d>
 8003520:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003524:	f7fc ffd8 	bl	80004d8 <__aeabi_dmul>
 8003528:	2200      	movs	r2, #0
 800352a:	4b62      	ldr	r3, [pc, #392]	; (80036b4 <_dtoa_r+0x5b4>)
 800352c:	f7fc fe1e 	bl	800016c <__adddf3>
 8003530:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8003534:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003538:	9611      	str	r6, [sp, #68]	; 0x44
 800353a:	2c00      	cmp	r4, #0
 800353c:	d15d      	bne.n	80035fa <_dtoa_r+0x4fa>
 800353e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003542:	2200      	movs	r2, #0
 8003544:	4b5c      	ldr	r3, [pc, #368]	; (80036b8 <_dtoa_r+0x5b8>)
 8003546:	f7fc fe0f 	bl	8000168 <__aeabi_dsub>
 800354a:	4602      	mov	r2, r0
 800354c:	460b      	mov	r3, r1
 800354e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003552:	4633      	mov	r3, r6
 8003554:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003556:	f7fd fa4f 	bl	80009f8 <__aeabi_dcmpgt>
 800355a:	2800      	cmp	r0, #0
 800355c:	f040 829e 	bne.w	8003a9c <_dtoa_r+0x99c>
 8003560:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003564:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003566:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800356a:	f7fd fa27 	bl	80009bc <__aeabi_dcmplt>
 800356e:	2800      	cmp	r0, #0
 8003570:	f040 8292 	bne.w	8003a98 <_dtoa_r+0x998>
 8003574:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8003578:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800357c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800357e:	2b00      	cmp	r3, #0
 8003580:	f2c0 8153 	blt.w	800382a <_dtoa_r+0x72a>
 8003584:	f1b9 0f0e 	cmp.w	r9, #14
 8003588:	f300 814f 	bgt.w	800382a <_dtoa_r+0x72a>
 800358c:	4b45      	ldr	r3, [pc, #276]	; (80036a4 <_dtoa_r+0x5a4>)
 800358e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8003592:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003596:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800359a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800359c:	2b00      	cmp	r3, #0
 800359e:	f280 80db 	bge.w	8003758 <_dtoa_r+0x658>
 80035a2:	9b02      	ldr	r3, [sp, #8]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	f300 80d7 	bgt.w	8003758 <_dtoa_r+0x658>
 80035aa:	f040 8274 	bne.w	8003a96 <_dtoa_r+0x996>
 80035ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80035b2:	2200      	movs	r2, #0
 80035b4:	4b40      	ldr	r3, [pc, #256]	; (80036b8 <_dtoa_r+0x5b8>)
 80035b6:	f7fc ff8f 	bl	80004d8 <__aeabi_dmul>
 80035ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80035be:	f7fd fa11 	bl	80009e4 <__aeabi_dcmpge>
 80035c2:	9c02      	ldr	r4, [sp, #8]
 80035c4:	4626      	mov	r6, r4
 80035c6:	2800      	cmp	r0, #0
 80035c8:	f040 824a 	bne.w	8003a60 <_dtoa_r+0x960>
 80035cc:	2331      	movs	r3, #49	; 0x31
 80035ce:	9f08      	ldr	r7, [sp, #32]
 80035d0:	f109 0901 	add.w	r9, r9, #1
 80035d4:	f807 3b01 	strb.w	r3, [r7], #1
 80035d8:	e246      	b.n	8003a68 <_dtoa_r+0x968>
 80035da:	07e2      	lsls	r2, r4, #31
 80035dc:	d505      	bpl.n	80035ea <_dtoa_r+0x4ea>
 80035de:	e9d6 2300 	ldrd	r2, r3, [r6]
 80035e2:	f7fc ff79 	bl	80004d8 <__aeabi_dmul>
 80035e6:	2301      	movs	r3, #1
 80035e8:	3701      	adds	r7, #1
 80035ea:	1064      	asrs	r4, r4, #1
 80035ec:	3608      	adds	r6, #8
 80035ee:	e76d      	b.n	80034cc <_dtoa_r+0x3cc>
 80035f0:	2702      	movs	r7, #2
 80035f2:	e770      	b.n	80034d6 <_dtoa_r+0x3d6>
 80035f4:	46c8      	mov	r8, r9
 80035f6:	9c02      	ldr	r4, [sp, #8]
 80035f8:	e78f      	b.n	800351a <_dtoa_r+0x41a>
 80035fa:	9908      	ldr	r1, [sp, #32]
 80035fc:	4b29      	ldr	r3, [pc, #164]	; (80036a4 <_dtoa_r+0x5a4>)
 80035fe:	4421      	add	r1, r4
 8003600:	9112      	str	r1, [sp, #72]	; 0x48
 8003602:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003604:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003608:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800360c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003610:	2900      	cmp	r1, #0
 8003612:	d055      	beq.n	80036c0 <_dtoa_r+0x5c0>
 8003614:	2000      	movs	r0, #0
 8003616:	4929      	ldr	r1, [pc, #164]	; (80036bc <_dtoa_r+0x5bc>)
 8003618:	f7fd f888 	bl	800072c <__aeabi_ddiv>
 800361c:	463b      	mov	r3, r7
 800361e:	4632      	mov	r2, r6
 8003620:	f7fc fda2 	bl	8000168 <__aeabi_dsub>
 8003624:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003628:	9f08      	ldr	r7, [sp, #32]
 800362a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800362e:	f7fd fa03 	bl	8000a38 <__aeabi_d2iz>
 8003632:	4604      	mov	r4, r0
 8003634:	f7fc fee6 	bl	8000404 <__aeabi_i2d>
 8003638:	4602      	mov	r2, r0
 800363a:	460b      	mov	r3, r1
 800363c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003640:	f7fc fd92 	bl	8000168 <__aeabi_dsub>
 8003644:	4602      	mov	r2, r0
 8003646:	460b      	mov	r3, r1
 8003648:	3430      	adds	r4, #48	; 0x30
 800364a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800364e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003652:	f807 4b01 	strb.w	r4, [r7], #1
 8003656:	f7fd f9b1 	bl	80009bc <__aeabi_dcmplt>
 800365a:	2800      	cmp	r0, #0
 800365c:	d174      	bne.n	8003748 <_dtoa_r+0x648>
 800365e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003662:	2000      	movs	r0, #0
 8003664:	4911      	ldr	r1, [pc, #68]	; (80036ac <_dtoa_r+0x5ac>)
 8003666:	f7fc fd7f 	bl	8000168 <__aeabi_dsub>
 800366a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800366e:	f7fd f9a5 	bl	80009bc <__aeabi_dcmplt>
 8003672:	2800      	cmp	r0, #0
 8003674:	f040 80b6 	bne.w	80037e4 <_dtoa_r+0x6e4>
 8003678:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800367a:	429f      	cmp	r7, r3
 800367c:	f43f af7a 	beq.w	8003574 <_dtoa_r+0x474>
 8003680:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003684:	2200      	movs	r2, #0
 8003686:	4b0a      	ldr	r3, [pc, #40]	; (80036b0 <_dtoa_r+0x5b0>)
 8003688:	f7fc ff26 	bl	80004d8 <__aeabi_dmul>
 800368c:	2200      	movs	r2, #0
 800368e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003692:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003696:	4b06      	ldr	r3, [pc, #24]	; (80036b0 <_dtoa_r+0x5b0>)
 8003698:	f7fc ff1e 	bl	80004d8 <__aeabi_dmul>
 800369c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80036a0:	e7c3      	b.n	800362a <_dtoa_r+0x52a>
 80036a2:	bf00      	nop
 80036a4:	08005528 	.word	0x08005528
 80036a8:	08005500 	.word	0x08005500
 80036ac:	3ff00000 	.word	0x3ff00000
 80036b0:	40240000 	.word	0x40240000
 80036b4:	401c0000 	.word	0x401c0000
 80036b8:	40140000 	.word	0x40140000
 80036bc:	3fe00000 	.word	0x3fe00000
 80036c0:	4630      	mov	r0, r6
 80036c2:	4639      	mov	r1, r7
 80036c4:	f7fc ff08 	bl	80004d8 <__aeabi_dmul>
 80036c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80036ca:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80036ce:	9c08      	ldr	r4, [sp, #32]
 80036d0:	9314      	str	r3, [sp, #80]	; 0x50
 80036d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80036d6:	f7fd f9af 	bl	8000a38 <__aeabi_d2iz>
 80036da:	9015      	str	r0, [sp, #84]	; 0x54
 80036dc:	f7fc fe92 	bl	8000404 <__aeabi_i2d>
 80036e0:	4602      	mov	r2, r0
 80036e2:	460b      	mov	r3, r1
 80036e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80036e8:	f7fc fd3e 	bl	8000168 <__aeabi_dsub>
 80036ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80036ee:	4606      	mov	r6, r0
 80036f0:	3330      	adds	r3, #48	; 0x30
 80036f2:	f804 3b01 	strb.w	r3, [r4], #1
 80036f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80036f8:	460f      	mov	r7, r1
 80036fa:	429c      	cmp	r4, r3
 80036fc:	f04f 0200 	mov.w	r2, #0
 8003700:	d124      	bne.n	800374c <_dtoa_r+0x64c>
 8003702:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003706:	4bb3      	ldr	r3, [pc, #716]	; (80039d4 <_dtoa_r+0x8d4>)
 8003708:	f7fc fd30 	bl	800016c <__adddf3>
 800370c:	4602      	mov	r2, r0
 800370e:	460b      	mov	r3, r1
 8003710:	4630      	mov	r0, r6
 8003712:	4639      	mov	r1, r7
 8003714:	f7fd f970 	bl	80009f8 <__aeabi_dcmpgt>
 8003718:	2800      	cmp	r0, #0
 800371a:	d162      	bne.n	80037e2 <_dtoa_r+0x6e2>
 800371c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003720:	2000      	movs	r0, #0
 8003722:	49ac      	ldr	r1, [pc, #688]	; (80039d4 <_dtoa_r+0x8d4>)
 8003724:	f7fc fd20 	bl	8000168 <__aeabi_dsub>
 8003728:	4602      	mov	r2, r0
 800372a:	460b      	mov	r3, r1
 800372c:	4630      	mov	r0, r6
 800372e:	4639      	mov	r1, r7
 8003730:	f7fd f944 	bl	80009bc <__aeabi_dcmplt>
 8003734:	2800      	cmp	r0, #0
 8003736:	f43f af1d 	beq.w	8003574 <_dtoa_r+0x474>
 800373a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800373c:	1e7b      	subs	r3, r7, #1
 800373e:	9314      	str	r3, [sp, #80]	; 0x50
 8003740:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8003744:	2b30      	cmp	r3, #48	; 0x30
 8003746:	d0f8      	beq.n	800373a <_dtoa_r+0x63a>
 8003748:	46c1      	mov	r9, r8
 800374a:	e03a      	b.n	80037c2 <_dtoa_r+0x6c2>
 800374c:	4ba2      	ldr	r3, [pc, #648]	; (80039d8 <_dtoa_r+0x8d8>)
 800374e:	f7fc fec3 	bl	80004d8 <__aeabi_dmul>
 8003752:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003756:	e7bc      	b.n	80036d2 <_dtoa_r+0x5d2>
 8003758:	9f08      	ldr	r7, [sp, #32]
 800375a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800375e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003762:	f7fc ffe3 	bl	800072c <__aeabi_ddiv>
 8003766:	f7fd f967 	bl	8000a38 <__aeabi_d2iz>
 800376a:	4604      	mov	r4, r0
 800376c:	f7fc fe4a 	bl	8000404 <__aeabi_i2d>
 8003770:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003774:	f7fc feb0 	bl	80004d8 <__aeabi_dmul>
 8003778:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800377c:	460b      	mov	r3, r1
 800377e:	4602      	mov	r2, r0
 8003780:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003784:	f7fc fcf0 	bl	8000168 <__aeabi_dsub>
 8003788:	f807 6b01 	strb.w	r6, [r7], #1
 800378c:	9e08      	ldr	r6, [sp, #32]
 800378e:	9b02      	ldr	r3, [sp, #8]
 8003790:	1bbe      	subs	r6, r7, r6
 8003792:	42b3      	cmp	r3, r6
 8003794:	d13a      	bne.n	800380c <_dtoa_r+0x70c>
 8003796:	4602      	mov	r2, r0
 8003798:	460b      	mov	r3, r1
 800379a:	f7fc fce7 	bl	800016c <__adddf3>
 800379e:	4602      	mov	r2, r0
 80037a0:	460b      	mov	r3, r1
 80037a2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80037a6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80037aa:	f7fd f925 	bl	80009f8 <__aeabi_dcmpgt>
 80037ae:	bb58      	cbnz	r0, 8003808 <_dtoa_r+0x708>
 80037b0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80037b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80037b8:	f7fd f8f6 	bl	80009a8 <__aeabi_dcmpeq>
 80037bc:	b108      	cbz	r0, 80037c2 <_dtoa_r+0x6c2>
 80037be:	07e1      	lsls	r1, r4, #31
 80037c0:	d422      	bmi.n	8003808 <_dtoa_r+0x708>
 80037c2:	4628      	mov	r0, r5
 80037c4:	4651      	mov	r1, sl
 80037c6:	f000 fc2b 	bl	8004020 <_Bfree>
 80037ca:	2300      	movs	r3, #0
 80037cc:	703b      	strb	r3, [r7, #0]
 80037ce:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80037d0:	f109 0001 	add.w	r0, r9, #1
 80037d4:	6018      	str	r0, [r3, #0]
 80037d6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80037d8:	2b00      	cmp	r3, #0
 80037da:	f43f acdf 	beq.w	800319c <_dtoa_r+0x9c>
 80037de:	601f      	str	r7, [r3, #0]
 80037e0:	e4dc      	b.n	800319c <_dtoa_r+0x9c>
 80037e2:	4627      	mov	r7, r4
 80037e4:	463b      	mov	r3, r7
 80037e6:	461f      	mov	r7, r3
 80037e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80037ec:	2a39      	cmp	r2, #57	; 0x39
 80037ee:	d107      	bne.n	8003800 <_dtoa_r+0x700>
 80037f0:	9a08      	ldr	r2, [sp, #32]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d1f7      	bne.n	80037e6 <_dtoa_r+0x6e6>
 80037f6:	2230      	movs	r2, #48	; 0x30
 80037f8:	9908      	ldr	r1, [sp, #32]
 80037fa:	f108 0801 	add.w	r8, r8, #1
 80037fe:	700a      	strb	r2, [r1, #0]
 8003800:	781a      	ldrb	r2, [r3, #0]
 8003802:	3201      	adds	r2, #1
 8003804:	701a      	strb	r2, [r3, #0]
 8003806:	e79f      	b.n	8003748 <_dtoa_r+0x648>
 8003808:	46c8      	mov	r8, r9
 800380a:	e7eb      	b.n	80037e4 <_dtoa_r+0x6e4>
 800380c:	2200      	movs	r2, #0
 800380e:	4b72      	ldr	r3, [pc, #456]	; (80039d8 <_dtoa_r+0x8d8>)
 8003810:	f7fc fe62 	bl	80004d8 <__aeabi_dmul>
 8003814:	4602      	mov	r2, r0
 8003816:	460b      	mov	r3, r1
 8003818:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800381c:	2200      	movs	r2, #0
 800381e:	2300      	movs	r3, #0
 8003820:	f7fd f8c2 	bl	80009a8 <__aeabi_dcmpeq>
 8003824:	2800      	cmp	r0, #0
 8003826:	d098      	beq.n	800375a <_dtoa_r+0x65a>
 8003828:	e7cb      	b.n	80037c2 <_dtoa_r+0x6c2>
 800382a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800382c:	2a00      	cmp	r2, #0
 800382e:	f000 80cd 	beq.w	80039cc <_dtoa_r+0x8cc>
 8003832:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003834:	2a01      	cmp	r2, #1
 8003836:	f300 80af 	bgt.w	8003998 <_dtoa_r+0x898>
 800383a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800383c:	2a00      	cmp	r2, #0
 800383e:	f000 80a7 	beq.w	8003990 <_dtoa_r+0x890>
 8003842:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003846:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8003848:	9f06      	ldr	r7, [sp, #24]
 800384a:	9a06      	ldr	r2, [sp, #24]
 800384c:	2101      	movs	r1, #1
 800384e:	441a      	add	r2, r3
 8003850:	9206      	str	r2, [sp, #24]
 8003852:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003854:	4628      	mov	r0, r5
 8003856:	441a      	add	r2, r3
 8003858:	9209      	str	r2, [sp, #36]	; 0x24
 800385a:	f000 fc9b 	bl	8004194 <__i2b>
 800385e:	4606      	mov	r6, r0
 8003860:	2f00      	cmp	r7, #0
 8003862:	dd0c      	ble.n	800387e <_dtoa_r+0x77e>
 8003864:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003866:	2b00      	cmp	r3, #0
 8003868:	dd09      	ble.n	800387e <_dtoa_r+0x77e>
 800386a:	42bb      	cmp	r3, r7
 800386c:	bfa8      	it	ge
 800386e:	463b      	movge	r3, r7
 8003870:	9a06      	ldr	r2, [sp, #24]
 8003872:	1aff      	subs	r7, r7, r3
 8003874:	1ad2      	subs	r2, r2, r3
 8003876:	9206      	str	r2, [sp, #24]
 8003878:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	9309      	str	r3, [sp, #36]	; 0x24
 800387e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003880:	b1f3      	cbz	r3, 80038c0 <_dtoa_r+0x7c0>
 8003882:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003884:	2b00      	cmp	r3, #0
 8003886:	f000 80a9 	beq.w	80039dc <_dtoa_r+0x8dc>
 800388a:	2c00      	cmp	r4, #0
 800388c:	dd10      	ble.n	80038b0 <_dtoa_r+0x7b0>
 800388e:	4631      	mov	r1, r6
 8003890:	4622      	mov	r2, r4
 8003892:	4628      	mov	r0, r5
 8003894:	f000 fd38 	bl	8004308 <__pow5mult>
 8003898:	4652      	mov	r2, sl
 800389a:	4601      	mov	r1, r0
 800389c:	4606      	mov	r6, r0
 800389e:	4628      	mov	r0, r5
 80038a0:	f000 fc8e 	bl	80041c0 <__multiply>
 80038a4:	4680      	mov	r8, r0
 80038a6:	4651      	mov	r1, sl
 80038a8:	4628      	mov	r0, r5
 80038aa:	f000 fbb9 	bl	8004020 <_Bfree>
 80038ae:	46c2      	mov	sl, r8
 80038b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80038b2:	1b1a      	subs	r2, r3, r4
 80038b4:	d004      	beq.n	80038c0 <_dtoa_r+0x7c0>
 80038b6:	4651      	mov	r1, sl
 80038b8:	4628      	mov	r0, r5
 80038ba:	f000 fd25 	bl	8004308 <__pow5mult>
 80038be:	4682      	mov	sl, r0
 80038c0:	2101      	movs	r1, #1
 80038c2:	4628      	mov	r0, r5
 80038c4:	f000 fc66 	bl	8004194 <__i2b>
 80038c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80038ca:	4604      	mov	r4, r0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	f340 8087 	ble.w	80039e0 <_dtoa_r+0x8e0>
 80038d2:	461a      	mov	r2, r3
 80038d4:	4601      	mov	r1, r0
 80038d6:	4628      	mov	r0, r5
 80038d8:	f000 fd16 	bl	8004308 <__pow5mult>
 80038dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80038de:	4604      	mov	r4, r0
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	f340 8080 	ble.w	80039e6 <_dtoa_r+0x8e6>
 80038e6:	f04f 0800 	mov.w	r8, #0
 80038ea:	6923      	ldr	r3, [r4, #16]
 80038ec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80038f0:	6918      	ldr	r0, [r3, #16]
 80038f2:	f000 fc01 	bl	80040f8 <__hi0bits>
 80038f6:	f1c0 0020 	rsb	r0, r0, #32
 80038fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038fc:	4418      	add	r0, r3
 80038fe:	f010 001f 	ands.w	r0, r0, #31
 8003902:	f000 8092 	beq.w	8003a2a <_dtoa_r+0x92a>
 8003906:	f1c0 0320 	rsb	r3, r0, #32
 800390a:	2b04      	cmp	r3, #4
 800390c:	f340 808a 	ble.w	8003a24 <_dtoa_r+0x924>
 8003910:	f1c0 001c 	rsb	r0, r0, #28
 8003914:	9b06      	ldr	r3, [sp, #24]
 8003916:	4407      	add	r7, r0
 8003918:	4403      	add	r3, r0
 800391a:	9306      	str	r3, [sp, #24]
 800391c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800391e:	4403      	add	r3, r0
 8003920:	9309      	str	r3, [sp, #36]	; 0x24
 8003922:	9b06      	ldr	r3, [sp, #24]
 8003924:	2b00      	cmp	r3, #0
 8003926:	dd05      	ble.n	8003934 <_dtoa_r+0x834>
 8003928:	4651      	mov	r1, sl
 800392a:	461a      	mov	r2, r3
 800392c:	4628      	mov	r0, r5
 800392e:	f000 fd45 	bl	80043bc <__lshift>
 8003932:	4682      	mov	sl, r0
 8003934:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003936:	2b00      	cmp	r3, #0
 8003938:	dd05      	ble.n	8003946 <_dtoa_r+0x846>
 800393a:	4621      	mov	r1, r4
 800393c:	461a      	mov	r2, r3
 800393e:	4628      	mov	r0, r5
 8003940:	f000 fd3c 	bl	80043bc <__lshift>
 8003944:	4604      	mov	r4, r0
 8003946:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003948:	2b00      	cmp	r3, #0
 800394a:	d070      	beq.n	8003a2e <_dtoa_r+0x92e>
 800394c:	4621      	mov	r1, r4
 800394e:	4650      	mov	r0, sl
 8003950:	f000 fda0 	bl	8004494 <__mcmp>
 8003954:	2800      	cmp	r0, #0
 8003956:	da6a      	bge.n	8003a2e <_dtoa_r+0x92e>
 8003958:	2300      	movs	r3, #0
 800395a:	4651      	mov	r1, sl
 800395c:	220a      	movs	r2, #10
 800395e:	4628      	mov	r0, r5
 8003960:	f000 fb80 	bl	8004064 <__multadd>
 8003964:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003966:	4682      	mov	sl, r0
 8003968:	f109 39ff 	add.w	r9, r9, #4294967295
 800396c:	2b00      	cmp	r3, #0
 800396e:	f000 8193 	beq.w	8003c98 <_dtoa_r+0xb98>
 8003972:	4631      	mov	r1, r6
 8003974:	2300      	movs	r3, #0
 8003976:	220a      	movs	r2, #10
 8003978:	4628      	mov	r0, r5
 800397a:	f000 fb73 	bl	8004064 <__multadd>
 800397e:	f1bb 0f00 	cmp.w	fp, #0
 8003982:	4606      	mov	r6, r0
 8003984:	f300 8093 	bgt.w	8003aae <_dtoa_r+0x9ae>
 8003988:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800398a:	2b02      	cmp	r3, #2
 800398c:	dc57      	bgt.n	8003a3e <_dtoa_r+0x93e>
 800398e:	e08e      	b.n	8003aae <_dtoa_r+0x9ae>
 8003990:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003992:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003996:	e756      	b.n	8003846 <_dtoa_r+0x746>
 8003998:	9b02      	ldr	r3, [sp, #8]
 800399a:	1e5c      	subs	r4, r3, #1
 800399c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800399e:	42a3      	cmp	r3, r4
 80039a0:	bfb7      	itett	lt
 80039a2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80039a4:	1b1c      	subge	r4, r3, r4
 80039a6:	1ae2      	sublt	r2, r4, r3
 80039a8:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80039aa:	bfbe      	ittt	lt
 80039ac:	940a      	strlt	r4, [sp, #40]	; 0x28
 80039ae:	189b      	addlt	r3, r3, r2
 80039b0:	930e      	strlt	r3, [sp, #56]	; 0x38
 80039b2:	9b02      	ldr	r3, [sp, #8]
 80039b4:	bfb8      	it	lt
 80039b6:	2400      	movlt	r4, #0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	bfbb      	ittet	lt
 80039bc:	9b06      	ldrlt	r3, [sp, #24]
 80039be:	9a02      	ldrlt	r2, [sp, #8]
 80039c0:	9f06      	ldrge	r7, [sp, #24]
 80039c2:	1a9f      	sublt	r7, r3, r2
 80039c4:	bfac      	ite	ge
 80039c6:	9b02      	ldrge	r3, [sp, #8]
 80039c8:	2300      	movlt	r3, #0
 80039ca:	e73e      	b.n	800384a <_dtoa_r+0x74a>
 80039cc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80039ce:	9f06      	ldr	r7, [sp, #24]
 80039d0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80039d2:	e745      	b.n	8003860 <_dtoa_r+0x760>
 80039d4:	3fe00000 	.word	0x3fe00000
 80039d8:	40240000 	.word	0x40240000
 80039dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80039de:	e76a      	b.n	80038b6 <_dtoa_r+0x7b6>
 80039e0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	dc19      	bgt.n	8003a1a <_dtoa_r+0x91a>
 80039e6:	9b04      	ldr	r3, [sp, #16]
 80039e8:	b9bb      	cbnz	r3, 8003a1a <_dtoa_r+0x91a>
 80039ea:	9b05      	ldr	r3, [sp, #20]
 80039ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80039f0:	b99b      	cbnz	r3, 8003a1a <_dtoa_r+0x91a>
 80039f2:	9b05      	ldr	r3, [sp, #20]
 80039f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80039f8:	0d1b      	lsrs	r3, r3, #20
 80039fa:	051b      	lsls	r3, r3, #20
 80039fc:	b183      	cbz	r3, 8003a20 <_dtoa_r+0x920>
 80039fe:	f04f 0801 	mov.w	r8, #1
 8003a02:	9b06      	ldr	r3, [sp, #24]
 8003a04:	3301      	adds	r3, #1
 8003a06:	9306      	str	r3, [sp, #24]
 8003a08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	9309      	str	r3, [sp, #36]	; 0x24
 8003a0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	f47f af6a 	bne.w	80038ea <_dtoa_r+0x7ea>
 8003a16:	2001      	movs	r0, #1
 8003a18:	e76f      	b.n	80038fa <_dtoa_r+0x7fa>
 8003a1a:	f04f 0800 	mov.w	r8, #0
 8003a1e:	e7f6      	b.n	8003a0e <_dtoa_r+0x90e>
 8003a20:	4698      	mov	r8, r3
 8003a22:	e7f4      	b.n	8003a0e <_dtoa_r+0x90e>
 8003a24:	f43f af7d 	beq.w	8003922 <_dtoa_r+0x822>
 8003a28:	4618      	mov	r0, r3
 8003a2a:	301c      	adds	r0, #28
 8003a2c:	e772      	b.n	8003914 <_dtoa_r+0x814>
 8003a2e:	9b02      	ldr	r3, [sp, #8]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	dc36      	bgt.n	8003aa2 <_dtoa_r+0x9a2>
 8003a34:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	dd33      	ble.n	8003aa2 <_dtoa_r+0x9a2>
 8003a3a:	f8dd b008 	ldr.w	fp, [sp, #8]
 8003a3e:	f1bb 0f00 	cmp.w	fp, #0
 8003a42:	d10d      	bne.n	8003a60 <_dtoa_r+0x960>
 8003a44:	4621      	mov	r1, r4
 8003a46:	465b      	mov	r3, fp
 8003a48:	2205      	movs	r2, #5
 8003a4a:	4628      	mov	r0, r5
 8003a4c:	f000 fb0a 	bl	8004064 <__multadd>
 8003a50:	4601      	mov	r1, r0
 8003a52:	4604      	mov	r4, r0
 8003a54:	4650      	mov	r0, sl
 8003a56:	f000 fd1d 	bl	8004494 <__mcmp>
 8003a5a:	2800      	cmp	r0, #0
 8003a5c:	f73f adb6 	bgt.w	80035cc <_dtoa_r+0x4cc>
 8003a60:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003a62:	9f08      	ldr	r7, [sp, #32]
 8003a64:	ea6f 0903 	mvn.w	r9, r3
 8003a68:	f04f 0800 	mov.w	r8, #0
 8003a6c:	4621      	mov	r1, r4
 8003a6e:	4628      	mov	r0, r5
 8003a70:	f000 fad6 	bl	8004020 <_Bfree>
 8003a74:	2e00      	cmp	r6, #0
 8003a76:	f43f aea4 	beq.w	80037c2 <_dtoa_r+0x6c2>
 8003a7a:	f1b8 0f00 	cmp.w	r8, #0
 8003a7e:	d005      	beq.n	8003a8c <_dtoa_r+0x98c>
 8003a80:	45b0      	cmp	r8, r6
 8003a82:	d003      	beq.n	8003a8c <_dtoa_r+0x98c>
 8003a84:	4641      	mov	r1, r8
 8003a86:	4628      	mov	r0, r5
 8003a88:	f000 faca 	bl	8004020 <_Bfree>
 8003a8c:	4631      	mov	r1, r6
 8003a8e:	4628      	mov	r0, r5
 8003a90:	f000 fac6 	bl	8004020 <_Bfree>
 8003a94:	e695      	b.n	80037c2 <_dtoa_r+0x6c2>
 8003a96:	2400      	movs	r4, #0
 8003a98:	4626      	mov	r6, r4
 8003a9a:	e7e1      	b.n	8003a60 <_dtoa_r+0x960>
 8003a9c:	46c1      	mov	r9, r8
 8003a9e:	4626      	mov	r6, r4
 8003aa0:	e594      	b.n	80035cc <_dtoa_r+0x4cc>
 8003aa2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003aa4:	f8dd b008 	ldr.w	fp, [sp, #8]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	f000 80fc 	beq.w	8003ca6 <_dtoa_r+0xba6>
 8003aae:	2f00      	cmp	r7, #0
 8003ab0:	dd05      	ble.n	8003abe <_dtoa_r+0x9be>
 8003ab2:	4631      	mov	r1, r6
 8003ab4:	463a      	mov	r2, r7
 8003ab6:	4628      	mov	r0, r5
 8003ab8:	f000 fc80 	bl	80043bc <__lshift>
 8003abc:	4606      	mov	r6, r0
 8003abe:	f1b8 0f00 	cmp.w	r8, #0
 8003ac2:	d05c      	beq.n	8003b7e <_dtoa_r+0xa7e>
 8003ac4:	4628      	mov	r0, r5
 8003ac6:	6871      	ldr	r1, [r6, #4]
 8003ac8:	f000 fa6a 	bl	8003fa0 <_Balloc>
 8003acc:	4607      	mov	r7, r0
 8003ace:	b928      	cbnz	r0, 8003adc <_dtoa_r+0x9dc>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	f240 21ea 	movw	r1, #746	; 0x2ea
 8003ad6:	4b7e      	ldr	r3, [pc, #504]	; (8003cd0 <_dtoa_r+0xbd0>)
 8003ad8:	f7ff bb26 	b.w	8003128 <_dtoa_r+0x28>
 8003adc:	6932      	ldr	r2, [r6, #16]
 8003ade:	f106 010c 	add.w	r1, r6, #12
 8003ae2:	3202      	adds	r2, #2
 8003ae4:	0092      	lsls	r2, r2, #2
 8003ae6:	300c      	adds	r0, #12
 8003ae8:	f000 fa4c 	bl	8003f84 <memcpy>
 8003aec:	2201      	movs	r2, #1
 8003aee:	4639      	mov	r1, r7
 8003af0:	4628      	mov	r0, r5
 8003af2:	f000 fc63 	bl	80043bc <__lshift>
 8003af6:	46b0      	mov	r8, r6
 8003af8:	4606      	mov	r6, r0
 8003afa:	9b08      	ldr	r3, [sp, #32]
 8003afc:	3301      	adds	r3, #1
 8003afe:	9302      	str	r3, [sp, #8]
 8003b00:	9b08      	ldr	r3, [sp, #32]
 8003b02:	445b      	add	r3, fp
 8003b04:	930a      	str	r3, [sp, #40]	; 0x28
 8003b06:	9b04      	ldr	r3, [sp, #16]
 8003b08:	f003 0301 	and.w	r3, r3, #1
 8003b0c:	9309      	str	r3, [sp, #36]	; 0x24
 8003b0e:	9b02      	ldr	r3, [sp, #8]
 8003b10:	4621      	mov	r1, r4
 8003b12:	4650      	mov	r0, sl
 8003b14:	f103 3bff 	add.w	fp, r3, #4294967295
 8003b18:	f7ff fa62 	bl	8002fe0 <quorem>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	4641      	mov	r1, r8
 8003b20:	3330      	adds	r3, #48	; 0x30
 8003b22:	9004      	str	r0, [sp, #16]
 8003b24:	4650      	mov	r0, sl
 8003b26:	930b      	str	r3, [sp, #44]	; 0x2c
 8003b28:	f000 fcb4 	bl	8004494 <__mcmp>
 8003b2c:	4632      	mov	r2, r6
 8003b2e:	9006      	str	r0, [sp, #24]
 8003b30:	4621      	mov	r1, r4
 8003b32:	4628      	mov	r0, r5
 8003b34:	f000 fcca 	bl	80044cc <__mdiff>
 8003b38:	68c2      	ldr	r2, [r0, #12]
 8003b3a:	4607      	mov	r7, r0
 8003b3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003b3e:	bb02      	cbnz	r2, 8003b82 <_dtoa_r+0xa82>
 8003b40:	4601      	mov	r1, r0
 8003b42:	4650      	mov	r0, sl
 8003b44:	f000 fca6 	bl	8004494 <__mcmp>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003b4c:	4639      	mov	r1, r7
 8003b4e:	4628      	mov	r0, r5
 8003b50:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8003b54:	f000 fa64 	bl	8004020 <_Bfree>
 8003b58:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003b5a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003b5c:	9f02      	ldr	r7, [sp, #8]
 8003b5e:	ea43 0102 	orr.w	r1, r3, r2
 8003b62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b64:	430b      	orrs	r3, r1
 8003b66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003b68:	d10d      	bne.n	8003b86 <_dtoa_r+0xa86>
 8003b6a:	2b39      	cmp	r3, #57	; 0x39
 8003b6c:	d027      	beq.n	8003bbe <_dtoa_r+0xabe>
 8003b6e:	9a06      	ldr	r2, [sp, #24]
 8003b70:	2a00      	cmp	r2, #0
 8003b72:	dd01      	ble.n	8003b78 <_dtoa_r+0xa78>
 8003b74:	9b04      	ldr	r3, [sp, #16]
 8003b76:	3331      	adds	r3, #49	; 0x31
 8003b78:	f88b 3000 	strb.w	r3, [fp]
 8003b7c:	e776      	b.n	8003a6c <_dtoa_r+0x96c>
 8003b7e:	4630      	mov	r0, r6
 8003b80:	e7b9      	b.n	8003af6 <_dtoa_r+0x9f6>
 8003b82:	2201      	movs	r2, #1
 8003b84:	e7e2      	b.n	8003b4c <_dtoa_r+0xa4c>
 8003b86:	9906      	ldr	r1, [sp, #24]
 8003b88:	2900      	cmp	r1, #0
 8003b8a:	db04      	blt.n	8003b96 <_dtoa_r+0xa96>
 8003b8c:	9822      	ldr	r0, [sp, #136]	; 0x88
 8003b8e:	4301      	orrs	r1, r0
 8003b90:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003b92:	4301      	orrs	r1, r0
 8003b94:	d120      	bne.n	8003bd8 <_dtoa_r+0xad8>
 8003b96:	2a00      	cmp	r2, #0
 8003b98:	ddee      	ble.n	8003b78 <_dtoa_r+0xa78>
 8003b9a:	4651      	mov	r1, sl
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	4628      	mov	r0, r5
 8003ba0:	9302      	str	r3, [sp, #8]
 8003ba2:	f000 fc0b 	bl	80043bc <__lshift>
 8003ba6:	4621      	mov	r1, r4
 8003ba8:	4682      	mov	sl, r0
 8003baa:	f000 fc73 	bl	8004494 <__mcmp>
 8003bae:	2800      	cmp	r0, #0
 8003bb0:	9b02      	ldr	r3, [sp, #8]
 8003bb2:	dc02      	bgt.n	8003bba <_dtoa_r+0xaba>
 8003bb4:	d1e0      	bne.n	8003b78 <_dtoa_r+0xa78>
 8003bb6:	07da      	lsls	r2, r3, #31
 8003bb8:	d5de      	bpl.n	8003b78 <_dtoa_r+0xa78>
 8003bba:	2b39      	cmp	r3, #57	; 0x39
 8003bbc:	d1da      	bne.n	8003b74 <_dtoa_r+0xa74>
 8003bbe:	2339      	movs	r3, #57	; 0x39
 8003bc0:	f88b 3000 	strb.w	r3, [fp]
 8003bc4:	463b      	mov	r3, r7
 8003bc6:	461f      	mov	r7, r3
 8003bc8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8003bcc:	3b01      	subs	r3, #1
 8003bce:	2a39      	cmp	r2, #57	; 0x39
 8003bd0:	d050      	beq.n	8003c74 <_dtoa_r+0xb74>
 8003bd2:	3201      	adds	r2, #1
 8003bd4:	701a      	strb	r2, [r3, #0]
 8003bd6:	e749      	b.n	8003a6c <_dtoa_r+0x96c>
 8003bd8:	2a00      	cmp	r2, #0
 8003bda:	dd03      	ble.n	8003be4 <_dtoa_r+0xae4>
 8003bdc:	2b39      	cmp	r3, #57	; 0x39
 8003bde:	d0ee      	beq.n	8003bbe <_dtoa_r+0xabe>
 8003be0:	3301      	adds	r3, #1
 8003be2:	e7c9      	b.n	8003b78 <_dtoa_r+0xa78>
 8003be4:	9a02      	ldr	r2, [sp, #8]
 8003be6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003be8:	f802 3c01 	strb.w	r3, [r2, #-1]
 8003bec:	428a      	cmp	r2, r1
 8003bee:	d02a      	beq.n	8003c46 <_dtoa_r+0xb46>
 8003bf0:	4651      	mov	r1, sl
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	220a      	movs	r2, #10
 8003bf6:	4628      	mov	r0, r5
 8003bf8:	f000 fa34 	bl	8004064 <__multadd>
 8003bfc:	45b0      	cmp	r8, r6
 8003bfe:	4682      	mov	sl, r0
 8003c00:	f04f 0300 	mov.w	r3, #0
 8003c04:	f04f 020a 	mov.w	r2, #10
 8003c08:	4641      	mov	r1, r8
 8003c0a:	4628      	mov	r0, r5
 8003c0c:	d107      	bne.n	8003c1e <_dtoa_r+0xb1e>
 8003c0e:	f000 fa29 	bl	8004064 <__multadd>
 8003c12:	4680      	mov	r8, r0
 8003c14:	4606      	mov	r6, r0
 8003c16:	9b02      	ldr	r3, [sp, #8]
 8003c18:	3301      	adds	r3, #1
 8003c1a:	9302      	str	r3, [sp, #8]
 8003c1c:	e777      	b.n	8003b0e <_dtoa_r+0xa0e>
 8003c1e:	f000 fa21 	bl	8004064 <__multadd>
 8003c22:	4631      	mov	r1, r6
 8003c24:	4680      	mov	r8, r0
 8003c26:	2300      	movs	r3, #0
 8003c28:	220a      	movs	r2, #10
 8003c2a:	4628      	mov	r0, r5
 8003c2c:	f000 fa1a 	bl	8004064 <__multadd>
 8003c30:	4606      	mov	r6, r0
 8003c32:	e7f0      	b.n	8003c16 <_dtoa_r+0xb16>
 8003c34:	f1bb 0f00 	cmp.w	fp, #0
 8003c38:	bfcc      	ite	gt
 8003c3a:	465f      	movgt	r7, fp
 8003c3c:	2701      	movle	r7, #1
 8003c3e:	f04f 0800 	mov.w	r8, #0
 8003c42:	9a08      	ldr	r2, [sp, #32]
 8003c44:	4417      	add	r7, r2
 8003c46:	4651      	mov	r1, sl
 8003c48:	2201      	movs	r2, #1
 8003c4a:	4628      	mov	r0, r5
 8003c4c:	9302      	str	r3, [sp, #8]
 8003c4e:	f000 fbb5 	bl	80043bc <__lshift>
 8003c52:	4621      	mov	r1, r4
 8003c54:	4682      	mov	sl, r0
 8003c56:	f000 fc1d 	bl	8004494 <__mcmp>
 8003c5a:	2800      	cmp	r0, #0
 8003c5c:	dcb2      	bgt.n	8003bc4 <_dtoa_r+0xac4>
 8003c5e:	d102      	bne.n	8003c66 <_dtoa_r+0xb66>
 8003c60:	9b02      	ldr	r3, [sp, #8]
 8003c62:	07db      	lsls	r3, r3, #31
 8003c64:	d4ae      	bmi.n	8003bc4 <_dtoa_r+0xac4>
 8003c66:	463b      	mov	r3, r7
 8003c68:	461f      	mov	r7, r3
 8003c6a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003c6e:	2a30      	cmp	r2, #48	; 0x30
 8003c70:	d0fa      	beq.n	8003c68 <_dtoa_r+0xb68>
 8003c72:	e6fb      	b.n	8003a6c <_dtoa_r+0x96c>
 8003c74:	9a08      	ldr	r2, [sp, #32]
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d1a5      	bne.n	8003bc6 <_dtoa_r+0xac6>
 8003c7a:	2331      	movs	r3, #49	; 0x31
 8003c7c:	f109 0901 	add.w	r9, r9, #1
 8003c80:	7013      	strb	r3, [r2, #0]
 8003c82:	e6f3      	b.n	8003a6c <_dtoa_r+0x96c>
 8003c84:	4b13      	ldr	r3, [pc, #76]	; (8003cd4 <_dtoa_r+0xbd4>)
 8003c86:	f7ff baa7 	b.w	80031d8 <_dtoa_r+0xd8>
 8003c8a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	f47f aa80 	bne.w	8003192 <_dtoa_r+0x92>
 8003c92:	4b11      	ldr	r3, [pc, #68]	; (8003cd8 <_dtoa_r+0xbd8>)
 8003c94:	f7ff baa0 	b.w	80031d8 <_dtoa_r+0xd8>
 8003c98:	f1bb 0f00 	cmp.w	fp, #0
 8003c9c:	dc03      	bgt.n	8003ca6 <_dtoa_r+0xba6>
 8003c9e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	f73f aecc 	bgt.w	8003a3e <_dtoa_r+0x93e>
 8003ca6:	9f08      	ldr	r7, [sp, #32]
 8003ca8:	4621      	mov	r1, r4
 8003caa:	4650      	mov	r0, sl
 8003cac:	f7ff f998 	bl	8002fe0 <quorem>
 8003cb0:	9a08      	ldr	r2, [sp, #32]
 8003cb2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8003cb6:	f807 3b01 	strb.w	r3, [r7], #1
 8003cba:	1aba      	subs	r2, r7, r2
 8003cbc:	4593      	cmp	fp, r2
 8003cbe:	ddb9      	ble.n	8003c34 <_dtoa_r+0xb34>
 8003cc0:	4651      	mov	r1, sl
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	220a      	movs	r2, #10
 8003cc6:	4628      	mov	r0, r5
 8003cc8:	f000 f9cc 	bl	8004064 <__multadd>
 8003ccc:	4682      	mov	sl, r0
 8003cce:	e7eb      	b.n	8003ca8 <_dtoa_r+0xba8>
 8003cd0:	0800548b 	.word	0x0800548b
 8003cd4:	080053e4 	.word	0x080053e4
 8003cd8:	08005408 	.word	0x08005408

08003cdc <print_e>:
 8003cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cde:	b08b      	sub	sp, #44	; 0x2c
 8003ce0:	460d      	mov	r5, r1
 8003ce2:	a908      	add	r1, sp, #32
 8003ce4:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8003ce6:	9104      	str	r1, [sp, #16]
 8003ce8:	a907      	add	r1, sp, #28
 8003cea:	9103      	str	r1, [sp, #12]
 8003cec:	a909      	add	r1, sp, #36	; 0x24
 8003cee:	9102      	str	r1, [sp, #8]
 8003cf0:	1c71      	adds	r1, r6, #1
 8003cf2:	9101      	str	r1, [sp, #4]
 8003cf4:	2102      	movs	r1, #2
 8003cf6:	9100      	str	r1, [sp, #0]
 8003cf8:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 8003cfc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8003cfe:	f7ff f9ff 	bl	8003100 <_dtoa_r>
 8003d02:	f242 730f 	movw	r3, #9999	; 0x270f
 8003d06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d08:	4601      	mov	r1, r0
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d104      	bne.n	8003d18 <print_e+0x3c>
 8003d0e:	4628      	mov	r0, r5
 8003d10:	f000 fda8 	bl	8004864 <strcpy>
 8003d14:	b00b      	add	sp, #44	; 0x2c
 8003d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d18:	462b      	mov	r3, r5
 8003d1a:	7800      	ldrb	r0, [r0, #0]
 8003d1c:	2e00      	cmp	r6, #0
 8003d1e:	f803 0b01 	strb.w	r0, [r3], #1
 8003d22:	bfc8      	it	gt
 8003d24:	2401      	movgt	r4, #1
 8003d26:	4608      	mov	r0, r1
 8003d28:	212e      	movs	r1, #46	; 0x2e
 8003d2a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8003d2e:	b10d      	cbz	r5, 8003d34 <print_e+0x58>
 8003d30:	2e00      	cmp	r6, #0
 8003d32:	dc36      	bgt.n	8003da2 <print_e+0xc6>
 8003d34:	2f67      	cmp	r7, #103	; 0x67
 8003d36:	d045      	beq.n	8003dc4 <print_e+0xe8>
 8003d38:	2f47      	cmp	r7, #71	; 0x47
 8003d3a:	d045      	beq.n	8003dc8 <print_e+0xec>
 8003d3c:	212e      	movs	r1, #46	; 0x2e
 8003d3e:	2030      	movs	r0, #48	; 0x30
 8003d40:	2e00      	cmp	r6, #0
 8003d42:	dc37      	bgt.n	8003db4 <print_e+0xd8>
 8003d44:	1e51      	subs	r1, r2, #1
 8003d46:	2900      	cmp	r1, #0
 8003d48:	9109      	str	r1, [sp, #36]	; 0x24
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	bfb7      	itett	lt
 8003d4e:	212d      	movlt	r1, #45	; 0x2d
 8003d50:	222b      	movge	r2, #43	; 0x2b
 8003d52:	f1c2 0201 	rsblt	r2, r2, #1
 8003d56:	9209      	strlt	r2, [sp, #36]	; 0x24
 8003d58:	f800 7b02 	strb.w	r7, [r0], #2
 8003d5c:	bfb8      	it	lt
 8003d5e:	7059      	strblt	r1, [r3, #1]
 8003d60:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003d62:	bfa8      	it	ge
 8003d64:	705a      	strbge	r2, [r3, #1]
 8003d66:	2963      	cmp	r1, #99	; 0x63
 8003d68:	dd0b      	ble.n	8003d82 <print_e+0xa6>
 8003d6a:	2264      	movs	r2, #100	; 0x64
 8003d6c:	fb91 f2f2 	sdiv	r2, r1, r2
 8003d70:	f102 0430 	add.w	r4, r2, #48	; 0x30
 8003d74:	1cd8      	adds	r0, r3, #3
 8003d76:	709c      	strb	r4, [r3, #2]
 8003d78:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8003d7c:	fb03 1202 	mla	r2, r3, r2, r1
 8003d80:	9209      	str	r2, [sp, #36]	; 0x24
 8003d82:	230a      	movs	r3, #10
 8003d84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d86:	fb92 f3f3 	sdiv	r3, r2, r3
 8003d8a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8003d8e:	7001      	strb	r1, [r0, #0]
 8003d90:	f06f 0109 	mvn.w	r1, #9
 8003d94:	fb01 2303 	mla	r3, r1, r3, r2
 8003d98:	3330      	adds	r3, #48	; 0x30
 8003d9a:	7043      	strb	r3, [r0, #1]
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	7083      	strb	r3, [r0, #2]
 8003da0:	e7b8      	b.n	8003d14 <print_e+0x38>
 8003da2:	b10c      	cbz	r4, 8003da8 <print_e+0xcc>
 8003da4:	f803 1b01 	strb.w	r1, [r3], #1
 8003da8:	7804      	ldrb	r4, [r0, #0]
 8003daa:	3e01      	subs	r6, #1
 8003dac:	f803 4b01 	strb.w	r4, [r3], #1
 8003db0:	2400      	movs	r4, #0
 8003db2:	e7ba      	b.n	8003d2a <print_e+0x4e>
 8003db4:	b10c      	cbz	r4, 8003dba <print_e+0xde>
 8003db6:	f803 1b01 	strb.w	r1, [r3], #1
 8003dba:	2400      	movs	r4, #0
 8003dbc:	f803 0b01 	strb.w	r0, [r3], #1
 8003dc0:	3e01      	subs	r6, #1
 8003dc2:	e7bd      	b.n	8003d40 <print_e+0x64>
 8003dc4:	2765      	movs	r7, #101	; 0x65
 8003dc6:	e7bd      	b.n	8003d44 <print_e+0x68>
 8003dc8:	2745      	movs	r7, #69	; 0x45
 8003dca:	e7bb      	b.n	8003d44 <print_e+0x68>
 8003dcc:	0000      	movs	r0, r0
	...

08003dd0 <_gcvt>:
 8003dd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003dd4:	4690      	mov	r8, r2
 8003dd6:	461c      	mov	r4, r3
 8003dd8:	b08b      	sub	sp, #44	; 0x2c
 8003dda:	4681      	mov	r9, r0
 8003ddc:	e9dd 7512 	ldrd	r7, r5, [sp, #72]	; 0x48
 8003de0:	2200      	movs	r2, #0
 8003de2:	2300      	movs	r3, #0
 8003de4:	4640      	mov	r0, r8
 8003de6:	4621      	mov	r1, r4
 8003de8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8003dea:	f7fc fde7 	bl	80009bc <__aeabi_dcmplt>
 8003dee:	b108      	cbz	r0, 8003df4 <_gcvt+0x24>
 8003df0:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
 8003df4:	2200      	movs	r2, #0
 8003df6:	2300      	movs	r3, #0
 8003df8:	4640      	mov	r0, r8
 8003dfa:	4621      	mov	r1, r4
 8003dfc:	f7fc fdd4 	bl	80009a8 <__aeabi_dcmpeq>
 8003e00:	b138      	cbz	r0, 8003e12 <_gcvt+0x42>
 8003e02:	2330      	movs	r3, #48	; 0x30
 8003e04:	702b      	strb	r3, [r5, #0]
 8003e06:	2300      	movs	r3, #0
 8003e08:	706b      	strb	r3, [r5, #1]
 8003e0a:	4628      	mov	r0, r5
 8003e0c:	b00b      	add	sp, #44	; 0x2c
 8003e0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003e12:	4640      	mov	r0, r8
 8003e14:	a34c      	add	r3, pc, #304	; (adr r3, 8003f48 <_gcvt+0x178>)
 8003e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e1a:	4621      	mov	r1, r4
 8003e1c:	f7fc fdd8 	bl	80009d0 <__aeabi_dcmple>
 8003e20:	b160      	cbz	r0, 8003e3c <_gcvt+0x6c>
 8003e22:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8003e26:	3f01      	subs	r7, #1
 8003e28:	9301      	str	r3, [sp, #4]
 8003e2a:	4642      	mov	r2, r8
 8003e2c:	4623      	mov	r3, r4
 8003e2e:	4629      	mov	r1, r5
 8003e30:	4648      	mov	r0, r9
 8003e32:	9602      	str	r6, [sp, #8]
 8003e34:	9700      	str	r7, [sp, #0]
 8003e36:	f7ff ff51 	bl	8003cdc <print_e>
 8003e3a:	e7e6      	b.n	8003e0a <_gcvt+0x3a>
 8003e3c:	4638      	mov	r0, r7
 8003e3e:	f000 fc31 	bl	80046a4 <_mprec_log10>
 8003e42:	4642      	mov	r2, r8
 8003e44:	4623      	mov	r3, r4
 8003e46:	f7fc fdc3 	bl	80009d0 <__aeabi_dcmple>
 8003e4a:	2800      	cmp	r0, #0
 8003e4c:	d1e9      	bne.n	8003e22 <_gcvt+0x52>
 8003e4e:	ab09      	add	r3, sp, #36	; 0x24
 8003e50:	9304      	str	r3, [sp, #16]
 8003e52:	ab08      	add	r3, sp, #32
 8003e54:	9303      	str	r3, [sp, #12]
 8003e56:	ab07      	add	r3, sp, #28
 8003e58:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8003e5c:	2302      	movs	r3, #2
 8003e5e:	4642      	mov	r2, r8
 8003e60:	9300      	str	r3, [sp, #0]
 8003e62:	4648      	mov	r0, r9
 8003e64:	4623      	mov	r3, r4
 8003e66:	f7ff f94b 	bl	8003100 <_dtoa_r>
 8003e6a:	f242 730f 	movw	r3, #9999	; 0x270f
 8003e6e:	9a07      	ldr	r2, [sp, #28]
 8003e70:	4601      	mov	r1, r0
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d00f      	beq.n	8003e96 <_gcvt+0xc6>
 8003e76:	462b      	mov	r3, r5
 8003e78:	442f      	add	r7, r5
 8003e7a:	4608      	mov	r0, r1
 8003e7c:	f811 cb01 	ldrb.w	ip, [r1], #1
 8003e80:	9a07      	ldr	r2, [sp, #28]
 8003e82:	1afc      	subs	r4, r7, r3
 8003e84:	f1bc 0f00 	cmp.w	ip, #0
 8003e88:	d001      	beq.n	8003e8e <_gcvt+0xbe>
 8003e8a:	2a00      	cmp	r2, #0
 8003e8c:	dc07      	bgt.n	8003e9e <_gcvt+0xce>
 8003e8e:	2100      	movs	r1, #0
 8003e90:	f04f 0c30 	mov.w	ip, #48	; 0x30
 8003e94:	e00c      	b.n	8003eb0 <_gcvt+0xe0>
 8003e96:	4628      	mov	r0, r5
 8003e98:	f000 fce4 	bl	8004864 <strcpy>
 8003e9c:	e7b5      	b.n	8003e0a <_gcvt+0x3a>
 8003e9e:	3a01      	subs	r2, #1
 8003ea0:	f803 cb01 	strb.w	ip, [r3], #1
 8003ea4:	9207      	str	r2, [sp, #28]
 8003ea6:	e7e8      	b.n	8003e7a <_gcvt+0xaa>
 8003ea8:	2101      	movs	r1, #1
 8003eaa:	f803 cb01 	strb.w	ip, [r3], #1
 8003eae:	3c01      	subs	r4, #1
 8003eb0:	2a00      	cmp	r2, #0
 8003eb2:	4617      	mov	r7, r2
 8003eb4:	dc2a      	bgt.n	8003f0c <_gcvt+0x13c>
 8003eb6:	b101      	cbz	r1, 8003eba <_gcvt+0xea>
 8003eb8:	9207      	str	r2, [sp, #28]
 8003eba:	b90e      	cbnz	r6, 8003ec0 <_gcvt+0xf0>
 8003ebc:	7802      	ldrb	r2, [r0, #0]
 8003ebe:	b312      	cbz	r2, 8003f06 <_gcvt+0x136>
 8003ec0:	42ab      	cmp	r3, r5
 8003ec2:	bf04      	itt	eq
 8003ec4:	2230      	moveq	r2, #48	; 0x30
 8003ec6:	f803 2b01 	strbeq.w	r2, [r3], #1
 8003eca:	222e      	movs	r2, #46	; 0x2e
 8003ecc:	4619      	mov	r1, r3
 8003ece:	2700      	movs	r7, #0
 8003ed0:	f04f 0e30 	mov.w	lr, #48	; 0x30
 8003ed4:	701a      	strb	r2, [r3, #0]
 8003ed6:	9a07      	ldr	r2, [sp, #28]
 8003ed8:	eba2 0c03 	sub.w	ip, r2, r3
 8003edc:	eb1c 0f01 	cmn.w	ip, r1
 8003ee0:	d41c      	bmi.n	8003f1c <_gcvt+0x14c>
 8003ee2:	2a00      	cmp	r2, #0
 8003ee4:	f1c2 0100 	rsb	r1, r2, #0
 8003ee8:	bfc8      	it	gt
 8003eea:	2100      	movgt	r1, #0
 8003eec:	f101 0c01 	add.w	ip, r1, #1
 8003ef0:	4463      	add	r3, ip
 8003ef2:	440a      	add	r2, r1
 8003ef4:	b107      	cbz	r7, 8003ef8 <_gcvt+0x128>
 8003ef6:	9207      	str	r2, [sp, #28]
 8003ef8:	1e42      	subs	r2, r0, #1
 8003efa:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8003efe:	b109      	cbz	r1, 8003f04 <_gcvt+0x134>
 8003f00:	2c00      	cmp	r4, #0
 8003f02:	dc0f      	bgt.n	8003f24 <_gcvt+0x154>
 8003f04:	b9de      	cbnz	r6, 8003f3e <_gcvt+0x16e>
 8003f06:	2200      	movs	r2, #0
 8003f08:	701a      	strb	r2, [r3, #0]
 8003f0a:	e77e      	b.n	8003e0a <_gcvt+0x3a>
 8003f0c:	2c00      	cmp	r4, #0
 8003f0e:	f102 32ff 	add.w	r2, r2, #4294967295
 8003f12:	dcc9      	bgt.n	8003ea8 <_gcvt+0xd8>
 8003f14:	2900      	cmp	r1, #0
 8003f16:	d0d0      	beq.n	8003eba <_gcvt+0xea>
 8003f18:	9707      	str	r7, [sp, #28]
 8003f1a:	e7ce      	b.n	8003eba <_gcvt+0xea>
 8003f1c:	2701      	movs	r7, #1
 8003f1e:	f801 ef01 	strb.w	lr, [r1, #1]!
 8003f22:	e7db      	b.n	8003edc <_gcvt+0x10c>
 8003f24:	f803 1b01 	strb.w	r1, [r3], #1
 8003f28:	3c01      	subs	r4, #1
 8003f2a:	e7e6      	b.n	8003efa <_gcvt+0x12a>
 8003f2c:	f802 6b01 	strb.w	r6, [r2], #1
 8003f30:	1a81      	subs	r1, r0, r2
 8003f32:	2900      	cmp	r1, #0
 8003f34:	dcfa      	bgt.n	8003f2c <_gcvt+0x15c>
 8003f36:	2c00      	cmp	r4, #0
 8003f38:	bfa8      	it	ge
 8003f3a:	191b      	addge	r3, r3, r4
 8003f3c:	e7e3      	b.n	8003f06 <_gcvt+0x136>
 8003f3e:	461a      	mov	r2, r3
 8003f40:	2630      	movs	r6, #48	; 0x30
 8003f42:	1918      	adds	r0, r3, r4
 8003f44:	e7f4      	b.n	8003f30 <_gcvt+0x160>
 8003f46:	bf00      	nop
 8003f48:	eb1c432d 	.word	0xeb1c432d
 8003f4c:	3f1a36e2 	.word	0x3f1a36e2

08003f50 <_localeconv_r>:
 8003f50:	4800      	ldr	r0, [pc, #0]	; (8003f54 <_localeconv_r+0x4>)
 8003f52:	4770      	bx	lr
 8003f54:	20000160 	.word	0x20000160

08003f58 <malloc>:
 8003f58:	4b02      	ldr	r3, [pc, #8]	; (8003f64 <malloc+0xc>)
 8003f5a:	4601      	mov	r1, r0
 8003f5c:	6818      	ldr	r0, [r3, #0]
 8003f5e:	f000 bc17 	b.w	8004790 <_malloc_r>
 8003f62:	bf00      	nop
 8003f64:	2000000c 	.word	0x2000000c

08003f68 <memchr>:
 8003f68:	4603      	mov	r3, r0
 8003f6a:	b510      	push	{r4, lr}
 8003f6c:	b2c9      	uxtb	r1, r1
 8003f6e:	4402      	add	r2, r0
 8003f70:	4293      	cmp	r3, r2
 8003f72:	4618      	mov	r0, r3
 8003f74:	d101      	bne.n	8003f7a <memchr+0x12>
 8003f76:	2000      	movs	r0, #0
 8003f78:	e003      	b.n	8003f82 <memchr+0x1a>
 8003f7a:	7804      	ldrb	r4, [r0, #0]
 8003f7c:	3301      	adds	r3, #1
 8003f7e:	428c      	cmp	r4, r1
 8003f80:	d1f6      	bne.n	8003f70 <memchr+0x8>
 8003f82:	bd10      	pop	{r4, pc}

08003f84 <memcpy>:
 8003f84:	440a      	add	r2, r1
 8003f86:	4291      	cmp	r1, r2
 8003f88:	f100 33ff 	add.w	r3, r0, #4294967295
 8003f8c:	d100      	bne.n	8003f90 <memcpy+0xc>
 8003f8e:	4770      	bx	lr
 8003f90:	b510      	push	{r4, lr}
 8003f92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003f96:	4291      	cmp	r1, r2
 8003f98:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003f9c:	d1f9      	bne.n	8003f92 <memcpy+0xe>
 8003f9e:	bd10      	pop	{r4, pc}

08003fa0 <_Balloc>:
 8003fa0:	b570      	push	{r4, r5, r6, lr}
 8003fa2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003fa4:	4604      	mov	r4, r0
 8003fa6:	460d      	mov	r5, r1
 8003fa8:	b976      	cbnz	r6, 8003fc8 <_Balloc+0x28>
 8003faa:	2010      	movs	r0, #16
 8003fac:	f7ff ffd4 	bl	8003f58 <malloc>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	6260      	str	r0, [r4, #36]	; 0x24
 8003fb4:	b920      	cbnz	r0, 8003fc0 <_Balloc+0x20>
 8003fb6:	2166      	movs	r1, #102	; 0x66
 8003fb8:	4b17      	ldr	r3, [pc, #92]	; (8004018 <_Balloc+0x78>)
 8003fba:	4818      	ldr	r0, [pc, #96]	; (800401c <_Balloc+0x7c>)
 8003fbc:	f000 fc5a 	bl	8004874 <__assert_func>
 8003fc0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003fc4:	6006      	str	r6, [r0, #0]
 8003fc6:	60c6      	str	r6, [r0, #12]
 8003fc8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8003fca:	68f3      	ldr	r3, [r6, #12]
 8003fcc:	b183      	cbz	r3, 8003ff0 <_Balloc+0x50>
 8003fce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8003fd6:	b9b8      	cbnz	r0, 8004008 <_Balloc+0x68>
 8003fd8:	2101      	movs	r1, #1
 8003fda:	fa01 f605 	lsl.w	r6, r1, r5
 8003fde:	1d72      	adds	r2, r6, #5
 8003fe0:	4620      	mov	r0, r4
 8003fe2:	0092      	lsls	r2, r2, #2
 8003fe4:	f000 fb7a 	bl	80046dc <_calloc_r>
 8003fe8:	b160      	cbz	r0, 8004004 <_Balloc+0x64>
 8003fea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8003fee:	e00e      	b.n	800400e <_Balloc+0x6e>
 8003ff0:	2221      	movs	r2, #33	; 0x21
 8003ff2:	2104      	movs	r1, #4
 8003ff4:	4620      	mov	r0, r4
 8003ff6:	f000 fb71 	bl	80046dc <_calloc_r>
 8003ffa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ffc:	60f0      	str	r0, [r6, #12]
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d1e4      	bne.n	8003fce <_Balloc+0x2e>
 8004004:	2000      	movs	r0, #0
 8004006:	bd70      	pop	{r4, r5, r6, pc}
 8004008:	6802      	ldr	r2, [r0, #0]
 800400a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800400e:	2300      	movs	r3, #0
 8004010:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004014:	e7f7      	b.n	8004006 <_Balloc+0x66>
 8004016:	bf00      	nop
 8004018:	08005415 	.word	0x08005415
 800401c:	0800549c 	.word	0x0800549c

08004020 <_Bfree>:
 8004020:	b570      	push	{r4, r5, r6, lr}
 8004022:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004024:	4605      	mov	r5, r0
 8004026:	460c      	mov	r4, r1
 8004028:	b976      	cbnz	r6, 8004048 <_Bfree+0x28>
 800402a:	2010      	movs	r0, #16
 800402c:	f7ff ff94 	bl	8003f58 <malloc>
 8004030:	4602      	mov	r2, r0
 8004032:	6268      	str	r0, [r5, #36]	; 0x24
 8004034:	b920      	cbnz	r0, 8004040 <_Bfree+0x20>
 8004036:	218a      	movs	r1, #138	; 0x8a
 8004038:	4b08      	ldr	r3, [pc, #32]	; (800405c <_Bfree+0x3c>)
 800403a:	4809      	ldr	r0, [pc, #36]	; (8004060 <_Bfree+0x40>)
 800403c:	f000 fc1a 	bl	8004874 <__assert_func>
 8004040:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004044:	6006      	str	r6, [r0, #0]
 8004046:	60c6      	str	r6, [r0, #12]
 8004048:	b13c      	cbz	r4, 800405a <_Bfree+0x3a>
 800404a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800404c:	6862      	ldr	r2, [r4, #4]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004054:	6021      	str	r1, [r4, #0]
 8004056:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800405a:	bd70      	pop	{r4, r5, r6, pc}
 800405c:	08005415 	.word	0x08005415
 8004060:	0800549c 	.word	0x0800549c

08004064 <__multadd>:
 8004064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004068:	4698      	mov	r8, r3
 800406a:	460c      	mov	r4, r1
 800406c:	2300      	movs	r3, #0
 800406e:	690e      	ldr	r6, [r1, #16]
 8004070:	4607      	mov	r7, r0
 8004072:	f101 0014 	add.w	r0, r1, #20
 8004076:	6805      	ldr	r5, [r0, #0]
 8004078:	3301      	adds	r3, #1
 800407a:	b2a9      	uxth	r1, r5
 800407c:	fb02 8101 	mla	r1, r2, r1, r8
 8004080:	0c2d      	lsrs	r5, r5, #16
 8004082:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8004086:	fb02 c505 	mla	r5, r2, r5, ip
 800408a:	b289      	uxth	r1, r1
 800408c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8004090:	429e      	cmp	r6, r3
 8004092:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8004096:	f840 1b04 	str.w	r1, [r0], #4
 800409a:	dcec      	bgt.n	8004076 <__multadd+0x12>
 800409c:	f1b8 0f00 	cmp.w	r8, #0
 80040a0:	d022      	beq.n	80040e8 <__multadd+0x84>
 80040a2:	68a3      	ldr	r3, [r4, #8]
 80040a4:	42b3      	cmp	r3, r6
 80040a6:	dc19      	bgt.n	80040dc <__multadd+0x78>
 80040a8:	6861      	ldr	r1, [r4, #4]
 80040aa:	4638      	mov	r0, r7
 80040ac:	3101      	adds	r1, #1
 80040ae:	f7ff ff77 	bl	8003fa0 <_Balloc>
 80040b2:	4605      	mov	r5, r0
 80040b4:	b928      	cbnz	r0, 80040c2 <__multadd+0x5e>
 80040b6:	4602      	mov	r2, r0
 80040b8:	21b5      	movs	r1, #181	; 0xb5
 80040ba:	4b0d      	ldr	r3, [pc, #52]	; (80040f0 <__multadd+0x8c>)
 80040bc:	480d      	ldr	r0, [pc, #52]	; (80040f4 <__multadd+0x90>)
 80040be:	f000 fbd9 	bl	8004874 <__assert_func>
 80040c2:	6922      	ldr	r2, [r4, #16]
 80040c4:	f104 010c 	add.w	r1, r4, #12
 80040c8:	3202      	adds	r2, #2
 80040ca:	0092      	lsls	r2, r2, #2
 80040cc:	300c      	adds	r0, #12
 80040ce:	f7ff ff59 	bl	8003f84 <memcpy>
 80040d2:	4621      	mov	r1, r4
 80040d4:	4638      	mov	r0, r7
 80040d6:	f7ff ffa3 	bl	8004020 <_Bfree>
 80040da:	462c      	mov	r4, r5
 80040dc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80040e0:	3601      	adds	r6, #1
 80040e2:	f8c3 8014 	str.w	r8, [r3, #20]
 80040e6:	6126      	str	r6, [r4, #16]
 80040e8:	4620      	mov	r0, r4
 80040ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040ee:	bf00      	nop
 80040f0:	0800548b 	.word	0x0800548b
 80040f4:	0800549c 	.word	0x0800549c

080040f8 <__hi0bits>:
 80040f8:	0c02      	lsrs	r2, r0, #16
 80040fa:	0412      	lsls	r2, r2, #16
 80040fc:	4603      	mov	r3, r0
 80040fe:	b9ca      	cbnz	r2, 8004134 <__hi0bits+0x3c>
 8004100:	0403      	lsls	r3, r0, #16
 8004102:	2010      	movs	r0, #16
 8004104:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004108:	bf04      	itt	eq
 800410a:	021b      	lsleq	r3, r3, #8
 800410c:	3008      	addeq	r0, #8
 800410e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004112:	bf04      	itt	eq
 8004114:	011b      	lsleq	r3, r3, #4
 8004116:	3004      	addeq	r0, #4
 8004118:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800411c:	bf04      	itt	eq
 800411e:	009b      	lsleq	r3, r3, #2
 8004120:	3002      	addeq	r0, #2
 8004122:	2b00      	cmp	r3, #0
 8004124:	db05      	blt.n	8004132 <__hi0bits+0x3a>
 8004126:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800412a:	f100 0001 	add.w	r0, r0, #1
 800412e:	bf08      	it	eq
 8004130:	2020      	moveq	r0, #32
 8004132:	4770      	bx	lr
 8004134:	2000      	movs	r0, #0
 8004136:	e7e5      	b.n	8004104 <__hi0bits+0xc>

08004138 <__lo0bits>:
 8004138:	6803      	ldr	r3, [r0, #0]
 800413a:	4602      	mov	r2, r0
 800413c:	f013 0007 	ands.w	r0, r3, #7
 8004140:	d00b      	beq.n	800415a <__lo0bits+0x22>
 8004142:	07d9      	lsls	r1, r3, #31
 8004144:	d422      	bmi.n	800418c <__lo0bits+0x54>
 8004146:	0798      	lsls	r0, r3, #30
 8004148:	bf49      	itett	mi
 800414a:	085b      	lsrmi	r3, r3, #1
 800414c:	089b      	lsrpl	r3, r3, #2
 800414e:	2001      	movmi	r0, #1
 8004150:	6013      	strmi	r3, [r2, #0]
 8004152:	bf5c      	itt	pl
 8004154:	2002      	movpl	r0, #2
 8004156:	6013      	strpl	r3, [r2, #0]
 8004158:	4770      	bx	lr
 800415a:	b299      	uxth	r1, r3
 800415c:	b909      	cbnz	r1, 8004162 <__lo0bits+0x2a>
 800415e:	2010      	movs	r0, #16
 8004160:	0c1b      	lsrs	r3, r3, #16
 8004162:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004166:	bf04      	itt	eq
 8004168:	0a1b      	lsreq	r3, r3, #8
 800416a:	3008      	addeq	r0, #8
 800416c:	0719      	lsls	r1, r3, #28
 800416e:	bf04      	itt	eq
 8004170:	091b      	lsreq	r3, r3, #4
 8004172:	3004      	addeq	r0, #4
 8004174:	0799      	lsls	r1, r3, #30
 8004176:	bf04      	itt	eq
 8004178:	089b      	lsreq	r3, r3, #2
 800417a:	3002      	addeq	r0, #2
 800417c:	07d9      	lsls	r1, r3, #31
 800417e:	d403      	bmi.n	8004188 <__lo0bits+0x50>
 8004180:	085b      	lsrs	r3, r3, #1
 8004182:	f100 0001 	add.w	r0, r0, #1
 8004186:	d003      	beq.n	8004190 <__lo0bits+0x58>
 8004188:	6013      	str	r3, [r2, #0]
 800418a:	4770      	bx	lr
 800418c:	2000      	movs	r0, #0
 800418e:	4770      	bx	lr
 8004190:	2020      	movs	r0, #32
 8004192:	4770      	bx	lr

08004194 <__i2b>:
 8004194:	b510      	push	{r4, lr}
 8004196:	460c      	mov	r4, r1
 8004198:	2101      	movs	r1, #1
 800419a:	f7ff ff01 	bl	8003fa0 <_Balloc>
 800419e:	4602      	mov	r2, r0
 80041a0:	b928      	cbnz	r0, 80041ae <__i2b+0x1a>
 80041a2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80041a6:	4b04      	ldr	r3, [pc, #16]	; (80041b8 <__i2b+0x24>)
 80041a8:	4804      	ldr	r0, [pc, #16]	; (80041bc <__i2b+0x28>)
 80041aa:	f000 fb63 	bl	8004874 <__assert_func>
 80041ae:	2301      	movs	r3, #1
 80041b0:	6144      	str	r4, [r0, #20]
 80041b2:	6103      	str	r3, [r0, #16]
 80041b4:	bd10      	pop	{r4, pc}
 80041b6:	bf00      	nop
 80041b8:	0800548b 	.word	0x0800548b
 80041bc:	0800549c 	.word	0x0800549c

080041c0 <__multiply>:
 80041c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041c4:	4614      	mov	r4, r2
 80041c6:	690a      	ldr	r2, [r1, #16]
 80041c8:	6923      	ldr	r3, [r4, #16]
 80041ca:	460d      	mov	r5, r1
 80041cc:	429a      	cmp	r2, r3
 80041ce:	bfbe      	ittt	lt
 80041d0:	460b      	movlt	r3, r1
 80041d2:	4625      	movlt	r5, r4
 80041d4:	461c      	movlt	r4, r3
 80041d6:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80041da:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80041de:	68ab      	ldr	r3, [r5, #8]
 80041e0:	6869      	ldr	r1, [r5, #4]
 80041e2:	eb0a 0709 	add.w	r7, sl, r9
 80041e6:	42bb      	cmp	r3, r7
 80041e8:	b085      	sub	sp, #20
 80041ea:	bfb8      	it	lt
 80041ec:	3101      	addlt	r1, #1
 80041ee:	f7ff fed7 	bl	8003fa0 <_Balloc>
 80041f2:	b930      	cbnz	r0, 8004202 <__multiply+0x42>
 80041f4:	4602      	mov	r2, r0
 80041f6:	f240 115d 	movw	r1, #349	; 0x15d
 80041fa:	4b41      	ldr	r3, [pc, #260]	; (8004300 <__multiply+0x140>)
 80041fc:	4841      	ldr	r0, [pc, #260]	; (8004304 <__multiply+0x144>)
 80041fe:	f000 fb39 	bl	8004874 <__assert_func>
 8004202:	f100 0614 	add.w	r6, r0, #20
 8004206:	4633      	mov	r3, r6
 8004208:	2200      	movs	r2, #0
 800420a:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800420e:	4543      	cmp	r3, r8
 8004210:	d31e      	bcc.n	8004250 <__multiply+0x90>
 8004212:	f105 0c14 	add.w	ip, r5, #20
 8004216:	f104 0314 	add.w	r3, r4, #20
 800421a:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800421e:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8004222:	9202      	str	r2, [sp, #8]
 8004224:	ebac 0205 	sub.w	r2, ip, r5
 8004228:	3a15      	subs	r2, #21
 800422a:	f022 0203 	bic.w	r2, r2, #3
 800422e:	3204      	adds	r2, #4
 8004230:	f105 0115 	add.w	r1, r5, #21
 8004234:	458c      	cmp	ip, r1
 8004236:	bf38      	it	cc
 8004238:	2204      	movcc	r2, #4
 800423a:	9201      	str	r2, [sp, #4]
 800423c:	9a02      	ldr	r2, [sp, #8]
 800423e:	9303      	str	r3, [sp, #12]
 8004240:	429a      	cmp	r2, r3
 8004242:	d808      	bhi.n	8004256 <__multiply+0x96>
 8004244:	2f00      	cmp	r7, #0
 8004246:	dc55      	bgt.n	80042f4 <__multiply+0x134>
 8004248:	6107      	str	r7, [r0, #16]
 800424a:	b005      	add	sp, #20
 800424c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004250:	f843 2b04 	str.w	r2, [r3], #4
 8004254:	e7db      	b.n	800420e <__multiply+0x4e>
 8004256:	f8b3 a000 	ldrh.w	sl, [r3]
 800425a:	f1ba 0f00 	cmp.w	sl, #0
 800425e:	d020      	beq.n	80042a2 <__multiply+0xe2>
 8004260:	46b1      	mov	r9, r6
 8004262:	2200      	movs	r2, #0
 8004264:	f105 0e14 	add.w	lr, r5, #20
 8004268:	f85e 4b04 	ldr.w	r4, [lr], #4
 800426c:	f8d9 b000 	ldr.w	fp, [r9]
 8004270:	b2a1      	uxth	r1, r4
 8004272:	fa1f fb8b 	uxth.w	fp, fp
 8004276:	fb0a b101 	mla	r1, sl, r1, fp
 800427a:	4411      	add	r1, r2
 800427c:	f8d9 2000 	ldr.w	r2, [r9]
 8004280:	0c24      	lsrs	r4, r4, #16
 8004282:	0c12      	lsrs	r2, r2, #16
 8004284:	fb0a 2404 	mla	r4, sl, r4, r2
 8004288:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800428c:	b289      	uxth	r1, r1
 800428e:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8004292:	45f4      	cmp	ip, lr
 8004294:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8004298:	f849 1b04 	str.w	r1, [r9], #4
 800429c:	d8e4      	bhi.n	8004268 <__multiply+0xa8>
 800429e:	9901      	ldr	r1, [sp, #4]
 80042a0:	5072      	str	r2, [r6, r1]
 80042a2:	9a03      	ldr	r2, [sp, #12]
 80042a4:	3304      	adds	r3, #4
 80042a6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80042aa:	f1b9 0f00 	cmp.w	r9, #0
 80042ae:	d01f      	beq.n	80042f0 <__multiply+0x130>
 80042b0:	46b6      	mov	lr, r6
 80042b2:	f04f 0a00 	mov.w	sl, #0
 80042b6:	6834      	ldr	r4, [r6, #0]
 80042b8:	f105 0114 	add.w	r1, r5, #20
 80042bc:	880a      	ldrh	r2, [r1, #0]
 80042be:	f8be b002 	ldrh.w	fp, [lr, #2]
 80042c2:	b2a4      	uxth	r4, r4
 80042c4:	fb09 b202 	mla	r2, r9, r2, fp
 80042c8:	4492      	add	sl, r2
 80042ca:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80042ce:	f84e 4b04 	str.w	r4, [lr], #4
 80042d2:	f851 4b04 	ldr.w	r4, [r1], #4
 80042d6:	f8be 2000 	ldrh.w	r2, [lr]
 80042da:	0c24      	lsrs	r4, r4, #16
 80042dc:	fb09 2404 	mla	r4, r9, r4, r2
 80042e0:	458c      	cmp	ip, r1
 80042e2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80042e6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80042ea:	d8e7      	bhi.n	80042bc <__multiply+0xfc>
 80042ec:	9a01      	ldr	r2, [sp, #4]
 80042ee:	50b4      	str	r4, [r6, r2]
 80042f0:	3604      	adds	r6, #4
 80042f2:	e7a3      	b.n	800423c <__multiply+0x7c>
 80042f4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d1a5      	bne.n	8004248 <__multiply+0x88>
 80042fc:	3f01      	subs	r7, #1
 80042fe:	e7a1      	b.n	8004244 <__multiply+0x84>
 8004300:	0800548b 	.word	0x0800548b
 8004304:	0800549c 	.word	0x0800549c

08004308 <__pow5mult>:
 8004308:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800430c:	4615      	mov	r5, r2
 800430e:	f012 0203 	ands.w	r2, r2, #3
 8004312:	4606      	mov	r6, r0
 8004314:	460f      	mov	r7, r1
 8004316:	d007      	beq.n	8004328 <__pow5mult+0x20>
 8004318:	4c25      	ldr	r4, [pc, #148]	; (80043b0 <__pow5mult+0xa8>)
 800431a:	3a01      	subs	r2, #1
 800431c:	2300      	movs	r3, #0
 800431e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004322:	f7ff fe9f 	bl	8004064 <__multadd>
 8004326:	4607      	mov	r7, r0
 8004328:	10ad      	asrs	r5, r5, #2
 800432a:	d03d      	beq.n	80043a8 <__pow5mult+0xa0>
 800432c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800432e:	b97c      	cbnz	r4, 8004350 <__pow5mult+0x48>
 8004330:	2010      	movs	r0, #16
 8004332:	f7ff fe11 	bl	8003f58 <malloc>
 8004336:	4602      	mov	r2, r0
 8004338:	6270      	str	r0, [r6, #36]	; 0x24
 800433a:	b928      	cbnz	r0, 8004348 <__pow5mult+0x40>
 800433c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8004340:	4b1c      	ldr	r3, [pc, #112]	; (80043b4 <__pow5mult+0xac>)
 8004342:	481d      	ldr	r0, [pc, #116]	; (80043b8 <__pow5mult+0xb0>)
 8004344:	f000 fa96 	bl	8004874 <__assert_func>
 8004348:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800434c:	6004      	str	r4, [r0, #0]
 800434e:	60c4      	str	r4, [r0, #12]
 8004350:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004354:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004358:	b94c      	cbnz	r4, 800436e <__pow5mult+0x66>
 800435a:	f240 2171 	movw	r1, #625	; 0x271
 800435e:	4630      	mov	r0, r6
 8004360:	f7ff ff18 	bl	8004194 <__i2b>
 8004364:	2300      	movs	r3, #0
 8004366:	4604      	mov	r4, r0
 8004368:	f8c8 0008 	str.w	r0, [r8, #8]
 800436c:	6003      	str	r3, [r0, #0]
 800436e:	f04f 0900 	mov.w	r9, #0
 8004372:	07eb      	lsls	r3, r5, #31
 8004374:	d50a      	bpl.n	800438c <__pow5mult+0x84>
 8004376:	4639      	mov	r1, r7
 8004378:	4622      	mov	r2, r4
 800437a:	4630      	mov	r0, r6
 800437c:	f7ff ff20 	bl	80041c0 <__multiply>
 8004380:	4680      	mov	r8, r0
 8004382:	4639      	mov	r1, r7
 8004384:	4630      	mov	r0, r6
 8004386:	f7ff fe4b 	bl	8004020 <_Bfree>
 800438a:	4647      	mov	r7, r8
 800438c:	106d      	asrs	r5, r5, #1
 800438e:	d00b      	beq.n	80043a8 <__pow5mult+0xa0>
 8004390:	6820      	ldr	r0, [r4, #0]
 8004392:	b938      	cbnz	r0, 80043a4 <__pow5mult+0x9c>
 8004394:	4622      	mov	r2, r4
 8004396:	4621      	mov	r1, r4
 8004398:	4630      	mov	r0, r6
 800439a:	f7ff ff11 	bl	80041c0 <__multiply>
 800439e:	6020      	str	r0, [r4, #0]
 80043a0:	f8c0 9000 	str.w	r9, [r0]
 80043a4:	4604      	mov	r4, r0
 80043a6:	e7e4      	b.n	8004372 <__pow5mult+0x6a>
 80043a8:	4638      	mov	r0, r7
 80043aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80043ae:	bf00      	nop
 80043b0:	080055f0 	.word	0x080055f0
 80043b4:	08005415 	.word	0x08005415
 80043b8:	0800549c 	.word	0x0800549c

080043bc <__lshift>:
 80043bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043c0:	460c      	mov	r4, r1
 80043c2:	4607      	mov	r7, r0
 80043c4:	4691      	mov	r9, r2
 80043c6:	6923      	ldr	r3, [r4, #16]
 80043c8:	6849      	ldr	r1, [r1, #4]
 80043ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80043ce:	68a3      	ldr	r3, [r4, #8]
 80043d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80043d4:	f108 0601 	add.w	r6, r8, #1
 80043d8:	42b3      	cmp	r3, r6
 80043da:	db0b      	blt.n	80043f4 <__lshift+0x38>
 80043dc:	4638      	mov	r0, r7
 80043de:	f7ff fddf 	bl	8003fa0 <_Balloc>
 80043e2:	4605      	mov	r5, r0
 80043e4:	b948      	cbnz	r0, 80043fa <__lshift+0x3e>
 80043e6:	4602      	mov	r2, r0
 80043e8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80043ec:	4b27      	ldr	r3, [pc, #156]	; (800448c <__lshift+0xd0>)
 80043ee:	4828      	ldr	r0, [pc, #160]	; (8004490 <__lshift+0xd4>)
 80043f0:	f000 fa40 	bl	8004874 <__assert_func>
 80043f4:	3101      	adds	r1, #1
 80043f6:	005b      	lsls	r3, r3, #1
 80043f8:	e7ee      	b.n	80043d8 <__lshift+0x1c>
 80043fa:	2300      	movs	r3, #0
 80043fc:	f100 0114 	add.w	r1, r0, #20
 8004400:	f100 0210 	add.w	r2, r0, #16
 8004404:	4618      	mov	r0, r3
 8004406:	4553      	cmp	r3, sl
 8004408:	db33      	blt.n	8004472 <__lshift+0xb6>
 800440a:	6920      	ldr	r0, [r4, #16]
 800440c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004410:	f104 0314 	add.w	r3, r4, #20
 8004414:	f019 091f 	ands.w	r9, r9, #31
 8004418:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800441c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004420:	d02b      	beq.n	800447a <__lshift+0xbe>
 8004422:	468a      	mov	sl, r1
 8004424:	2200      	movs	r2, #0
 8004426:	f1c9 0e20 	rsb	lr, r9, #32
 800442a:	6818      	ldr	r0, [r3, #0]
 800442c:	fa00 f009 	lsl.w	r0, r0, r9
 8004430:	4302      	orrs	r2, r0
 8004432:	f84a 2b04 	str.w	r2, [sl], #4
 8004436:	f853 2b04 	ldr.w	r2, [r3], #4
 800443a:	459c      	cmp	ip, r3
 800443c:	fa22 f20e 	lsr.w	r2, r2, lr
 8004440:	d8f3      	bhi.n	800442a <__lshift+0x6e>
 8004442:	ebac 0304 	sub.w	r3, ip, r4
 8004446:	3b15      	subs	r3, #21
 8004448:	f023 0303 	bic.w	r3, r3, #3
 800444c:	3304      	adds	r3, #4
 800444e:	f104 0015 	add.w	r0, r4, #21
 8004452:	4584      	cmp	ip, r0
 8004454:	bf38      	it	cc
 8004456:	2304      	movcc	r3, #4
 8004458:	50ca      	str	r2, [r1, r3]
 800445a:	b10a      	cbz	r2, 8004460 <__lshift+0xa4>
 800445c:	f108 0602 	add.w	r6, r8, #2
 8004460:	3e01      	subs	r6, #1
 8004462:	4638      	mov	r0, r7
 8004464:	4621      	mov	r1, r4
 8004466:	612e      	str	r6, [r5, #16]
 8004468:	f7ff fdda 	bl	8004020 <_Bfree>
 800446c:	4628      	mov	r0, r5
 800446e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004472:	f842 0f04 	str.w	r0, [r2, #4]!
 8004476:	3301      	adds	r3, #1
 8004478:	e7c5      	b.n	8004406 <__lshift+0x4a>
 800447a:	3904      	subs	r1, #4
 800447c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004480:	459c      	cmp	ip, r3
 8004482:	f841 2f04 	str.w	r2, [r1, #4]!
 8004486:	d8f9      	bhi.n	800447c <__lshift+0xc0>
 8004488:	e7ea      	b.n	8004460 <__lshift+0xa4>
 800448a:	bf00      	nop
 800448c:	0800548b 	.word	0x0800548b
 8004490:	0800549c 	.word	0x0800549c

08004494 <__mcmp>:
 8004494:	4603      	mov	r3, r0
 8004496:	690a      	ldr	r2, [r1, #16]
 8004498:	6900      	ldr	r0, [r0, #16]
 800449a:	b530      	push	{r4, r5, lr}
 800449c:	1a80      	subs	r0, r0, r2
 800449e:	d10d      	bne.n	80044bc <__mcmp+0x28>
 80044a0:	3314      	adds	r3, #20
 80044a2:	3114      	adds	r1, #20
 80044a4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80044a8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80044ac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80044b0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80044b4:	4295      	cmp	r5, r2
 80044b6:	d002      	beq.n	80044be <__mcmp+0x2a>
 80044b8:	d304      	bcc.n	80044c4 <__mcmp+0x30>
 80044ba:	2001      	movs	r0, #1
 80044bc:	bd30      	pop	{r4, r5, pc}
 80044be:	42a3      	cmp	r3, r4
 80044c0:	d3f4      	bcc.n	80044ac <__mcmp+0x18>
 80044c2:	e7fb      	b.n	80044bc <__mcmp+0x28>
 80044c4:	f04f 30ff 	mov.w	r0, #4294967295
 80044c8:	e7f8      	b.n	80044bc <__mcmp+0x28>
	...

080044cc <__mdiff>:
 80044cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044d0:	460c      	mov	r4, r1
 80044d2:	4606      	mov	r6, r0
 80044d4:	4611      	mov	r1, r2
 80044d6:	4620      	mov	r0, r4
 80044d8:	4692      	mov	sl, r2
 80044da:	f7ff ffdb 	bl	8004494 <__mcmp>
 80044de:	1e05      	subs	r5, r0, #0
 80044e0:	d111      	bne.n	8004506 <__mdiff+0x3a>
 80044e2:	4629      	mov	r1, r5
 80044e4:	4630      	mov	r0, r6
 80044e6:	f7ff fd5b 	bl	8003fa0 <_Balloc>
 80044ea:	4602      	mov	r2, r0
 80044ec:	b928      	cbnz	r0, 80044fa <__mdiff+0x2e>
 80044ee:	f240 2132 	movw	r1, #562	; 0x232
 80044f2:	4b3c      	ldr	r3, [pc, #240]	; (80045e4 <__mdiff+0x118>)
 80044f4:	483c      	ldr	r0, [pc, #240]	; (80045e8 <__mdiff+0x11c>)
 80044f6:	f000 f9bd 	bl	8004874 <__assert_func>
 80044fa:	2301      	movs	r3, #1
 80044fc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004500:	4610      	mov	r0, r2
 8004502:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004506:	bfa4      	itt	ge
 8004508:	4653      	movge	r3, sl
 800450a:	46a2      	movge	sl, r4
 800450c:	4630      	mov	r0, r6
 800450e:	f8da 1004 	ldr.w	r1, [sl, #4]
 8004512:	bfa6      	itte	ge
 8004514:	461c      	movge	r4, r3
 8004516:	2500      	movge	r5, #0
 8004518:	2501      	movlt	r5, #1
 800451a:	f7ff fd41 	bl	8003fa0 <_Balloc>
 800451e:	4602      	mov	r2, r0
 8004520:	b918      	cbnz	r0, 800452a <__mdiff+0x5e>
 8004522:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004526:	4b2f      	ldr	r3, [pc, #188]	; (80045e4 <__mdiff+0x118>)
 8004528:	e7e4      	b.n	80044f4 <__mdiff+0x28>
 800452a:	f100 0814 	add.w	r8, r0, #20
 800452e:	f8da 7010 	ldr.w	r7, [sl, #16]
 8004532:	60c5      	str	r5, [r0, #12]
 8004534:	f04f 0c00 	mov.w	ip, #0
 8004538:	f10a 0514 	add.w	r5, sl, #20
 800453c:	f10a 0010 	add.w	r0, sl, #16
 8004540:	46c2      	mov	sl, r8
 8004542:	6926      	ldr	r6, [r4, #16]
 8004544:	f104 0914 	add.w	r9, r4, #20
 8004548:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800454c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8004550:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8004554:	f859 3b04 	ldr.w	r3, [r9], #4
 8004558:	fa1f f18b 	uxth.w	r1, fp
 800455c:	4461      	add	r1, ip
 800455e:	fa1f fc83 	uxth.w	ip, r3
 8004562:	0c1b      	lsrs	r3, r3, #16
 8004564:	eba1 010c 	sub.w	r1, r1, ip
 8004568:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800456c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8004570:	b289      	uxth	r1, r1
 8004572:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8004576:	454e      	cmp	r6, r9
 8004578:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800457c:	f84a 3b04 	str.w	r3, [sl], #4
 8004580:	d8e6      	bhi.n	8004550 <__mdiff+0x84>
 8004582:	1b33      	subs	r3, r6, r4
 8004584:	3b15      	subs	r3, #21
 8004586:	f023 0303 	bic.w	r3, r3, #3
 800458a:	3415      	adds	r4, #21
 800458c:	3304      	adds	r3, #4
 800458e:	42a6      	cmp	r6, r4
 8004590:	bf38      	it	cc
 8004592:	2304      	movcc	r3, #4
 8004594:	441d      	add	r5, r3
 8004596:	4443      	add	r3, r8
 8004598:	461e      	mov	r6, r3
 800459a:	462c      	mov	r4, r5
 800459c:	4574      	cmp	r4, lr
 800459e:	d30e      	bcc.n	80045be <__mdiff+0xf2>
 80045a0:	f10e 0103 	add.w	r1, lr, #3
 80045a4:	1b49      	subs	r1, r1, r5
 80045a6:	f021 0103 	bic.w	r1, r1, #3
 80045aa:	3d03      	subs	r5, #3
 80045ac:	45ae      	cmp	lr, r5
 80045ae:	bf38      	it	cc
 80045b0:	2100      	movcc	r1, #0
 80045b2:	4419      	add	r1, r3
 80045b4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80045b8:	b18b      	cbz	r3, 80045de <__mdiff+0x112>
 80045ba:	6117      	str	r7, [r2, #16]
 80045bc:	e7a0      	b.n	8004500 <__mdiff+0x34>
 80045be:	f854 8b04 	ldr.w	r8, [r4], #4
 80045c2:	fa1f f188 	uxth.w	r1, r8
 80045c6:	4461      	add	r1, ip
 80045c8:	1408      	asrs	r0, r1, #16
 80045ca:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 80045ce:	b289      	uxth	r1, r1
 80045d0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80045d4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80045d8:	f846 1b04 	str.w	r1, [r6], #4
 80045dc:	e7de      	b.n	800459c <__mdiff+0xd0>
 80045de:	3f01      	subs	r7, #1
 80045e0:	e7e8      	b.n	80045b4 <__mdiff+0xe8>
 80045e2:	bf00      	nop
 80045e4:	0800548b 	.word	0x0800548b
 80045e8:	0800549c 	.word	0x0800549c

080045ec <__d2b>:
 80045ec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80045f0:	2101      	movs	r1, #1
 80045f2:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80045f6:	4690      	mov	r8, r2
 80045f8:	461d      	mov	r5, r3
 80045fa:	f7ff fcd1 	bl	8003fa0 <_Balloc>
 80045fe:	4604      	mov	r4, r0
 8004600:	b930      	cbnz	r0, 8004610 <__d2b+0x24>
 8004602:	4602      	mov	r2, r0
 8004604:	f240 310a 	movw	r1, #778	; 0x30a
 8004608:	4b24      	ldr	r3, [pc, #144]	; (800469c <__d2b+0xb0>)
 800460a:	4825      	ldr	r0, [pc, #148]	; (80046a0 <__d2b+0xb4>)
 800460c:	f000 f932 	bl	8004874 <__assert_func>
 8004610:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8004614:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8004618:	bb2d      	cbnz	r5, 8004666 <__d2b+0x7a>
 800461a:	9301      	str	r3, [sp, #4]
 800461c:	f1b8 0300 	subs.w	r3, r8, #0
 8004620:	d026      	beq.n	8004670 <__d2b+0x84>
 8004622:	4668      	mov	r0, sp
 8004624:	9300      	str	r3, [sp, #0]
 8004626:	f7ff fd87 	bl	8004138 <__lo0bits>
 800462a:	9900      	ldr	r1, [sp, #0]
 800462c:	b1f0      	cbz	r0, 800466c <__d2b+0x80>
 800462e:	9a01      	ldr	r2, [sp, #4]
 8004630:	f1c0 0320 	rsb	r3, r0, #32
 8004634:	fa02 f303 	lsl.w	r3, r2, r3
 8004638:	430b      	orrs	r3, r1
 800463a:	40c2      	lsrs	r2, r0
 800463c:	6163      	str	r3, [r4, #20]
 800463e:	9201      	str	r2, [sp, #4]
 8004640:	9b01      	ldr	r3, [sp, #4]
 8004642:	2b00      	cmp	r3, #0
 8004644:	bf14      	ite	ne
 8004646:	2102      	movne	r1, #2
 8004648:	2101      	moveq	r1, #1
 800464a:	61a3      	str	r3, [r4, #24]
 800464c:	6121      	str	r1, [r4, #16]
 800464e:	b1c5      	cbz	r5, 8004682 <__d2b+0x96>
 8004650:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8004654:	4405      	add	r5, r0
 8004656:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800465a:	603d      	str	r5, [r7, #0]
 800465c:	6030      	str	r0, [r6, #0]
 800465e:	4620      	mov	r0, r4
 8004660:	b002      	add	sp, #8
 8004662:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004666:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800466a:	e7d6      	b.n	800461a <__d2b+0x2e>
 800466c:	6161      	str	r1, [r4, #20]
 800466e:	e7e7      	b.n	8004640 <__d2b+0x54>
 8004670:	a801      	add	r0, sp, #4
 8004672:	f7ff fd61 	bl	8004138 <__lo0bits>
 8004676:	2101      	movs	r1, #1
 8004678:	9b01      	ldr	r3, [sp, #4]
 800467a:	6121      	str	r1, [r4, #16]
 800467c:	6163      	str	r3, [r4, #20]
 800467e:	3020      	adds	r0, #32
 8004680:	e7e5      	b.n	800464e <__d2b+0x62>
 8004682:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8004686:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800468a:	6038      	str	r0, [r7, #0]
 800468c:	6918      	ldr	r0, [r3, #16]
 800468e:	f7ff fd33 	bl	80040f8 <__hi0bits>
 8004692:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8004696:	6031      	str	r1, [r6, #0]
 8004698:	e7e1      	b.n	800465e <__d2b+0x72>
 800469a:	bf00      	nop
 800469c:	0800548b 	.word	0x0800548b
 80046a0:	0800549c 	.word	0x0800549c

080046a4 <_mprec_log10>:
 80046a4:	2817      	cmp	r0, #23
 80046a6:	b5d0      	push	{r4, r6, r7, lr}
 80046a8:	4604      	mov	r4, r0
 80046aa:	dc05      	bgt.n	80046b8 <_mprec_log10+0x14>
 80046ac:	4808      	ldr	r0, [pc, #32]	; (80046d0 <_mprec_log10+0x2c>)
 80046ae:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 80046b2:	e9d4 0100 	ldrd	r0, r1, [r4]
 80046b6:	bdd0      	pop	{r4, r6, r7, pc}
 80046b8:	2000      	movs	r0, #0
 80046ba:	2600      	movs	r6, #0
 80046bc:	4905      	ldr	r1, [pc, #20]	; (80046d4 <_mprec_log10+0x30>)
 80046be:	4f06      	ldr	r7, [pc, #24]	; (80046d8 <_mprec_log10+0x34>)
 80046c0:	4632      	mov	r2, r6
 80046c2:	463b      	mov	r3, r7
 80046c4:	f7fb ff08 	bl	80004d8 <__aeabi_dmul>
 80046c8:	3c01      	subs	r4, #1
 80046ca:	d1f9      	bne.n	80046c0 <_mprec_log10+0x1c>
 80046cc:	e7f3      	b.n	80046b6 <_mprec_log10+0x12>
 80046ce:	bf00      	nop
 80046d0:	08005528 	.word	0x08005528
 80046d4:	3ff00000 	.word	0x3ff00000
 80046d8:	40240000 	.word	0x40240000

080046dc <_calloc_r>:
 80046dc:	b538      	push	{r3, r4, r5, lr}
 80046de:	fb02 f501 	mul.w	r5, r2, r1
 80046e2:	4629      	mov	r1, r5
 80046e4:	f000 f854 	bl	8004790 <_malloc_r>
 80046e8:	4604      	mov	r4, r0
 80046ea:	b118      	cbz	r0, 80046f4 <_calloc_r+0x18>
 80046ec:	462a      	mov	r2, r5
 80046ee:	2100      	movs	r1, #0
 80046f0:	f7fe f80e 	bl	8002710 <memset>
 80046f4:	4620      	mov	r0, r4
 80046f6:	bd38      	pop	{r3, r4, r5, pc}

080046f8 <_free_r>:
 80046f8:	b538      	push	{r3, r4, r5, lr}
 80046fa:	4605      	mov	r5, r0
 80046fc:	2900      	cmp	r1, #0
 80046fe:	d043      	beq.n	8004788 <_free_r+0x90>
 8004700:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004704:	1f0c      	subs	r4, r1, #4
 8004706:	2b00      	cmp	r3, #0
 8004708:	bfb8      	it	lt
 800470a:	18e4      	addlt	r4, r4, r3
 800470c:	f000 f8f4 	bl	80048f8 <__malloc_lock>
 8004710:	4a1e      	ldr	r2, [pc, #120]	; (800478c <_free_r+0x94>)
 8004712:	6813      	ldr	r3, [r2, #0]
 8004714:	4610      	mov	r0, r2
 8004716:	b933      	cbnz	r3, 8004726 <_free_r+0x2e>
 8004718:	6063      	str	r3, [r4, #4]
 800471a:	6014      	str	r4, [r2, #0]
 800471c:	4628      	mov	r0, r5
 800471e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004722:	f000 b8ef 	b.w	8004904 <__malloc_unlock>
 8004726:	42a3      	cmp	r3, r4
 8004728:	d90a      	bls.n	8004740 <_free_r+0x48>
 800472a:	6821      	ldr	r1, [r4, #0]
 800472c:	1862      	adds	r2, r4, r1
 800472e:	4293      	cmp	r3, r2
 8004730:	bf01      	itttt	eq
 8004732:	681a      	ldreq	r2, [r3, #0]
 8004734:	685b      	ldreq	r3, [r3, #4]
 8004736:	1852      	addeq	r2, r2, r1
 8004738:	6022      	streq	r2, [r4, #0]
 800473a:	6063      	str	r3, [r4, #4]
 800473c:	6004      	str	r4, [r0, #0]
 800473e:	e7ed      	b.n	800471c <_free_r+0x24>
 8004740:	461a      	mov	r2, r3
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	b10b      	cbz	r3, 800474a <_free_r+0x52>
 8004746:	42a3      	cmp	r3, r4
 8004748:	d9fa      	bls.n	8004740 <_free_r+0x48>
 800474a:	6811      	ldr	r1, [r2, #0]
 800474c:	1850      	adds	r0, r2, r1
 800474e:	42a0      	cmp	r0, r4
 8004750:	d10b      	bne.n	800476a <_free_r+0x72>
 8004752:	6820      	ldr	r0, [r4, #0]
 8004754:	4401      	add	r1, r0
 8004756:	1850      	adds	r0, r2, r1
 8004758:	4283      	cmp	r3, r0
 800475a:	6011      	str	r1, [r2, #0]
 800475c:	d1de      	bne.n	800471c <_free_r+0x24>
 800475e:	6818      	ldr	r0, [r3, #0]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	4401      	add	r1, r0
 8004764:	6011      	str	r1, [r2, #0]
 8004766:	6053      	str	r3, [r2, #4]
 8004768:	e7d8      	b.n	800471c <_free_r+0x24>
 800476a:	d902      	bls.n	8004772 <_free_r+0x7a>
 800476c:	230c      	movs	r3, #12
 800476e:	602b      	str	r3, [r5, #0]
 8004770:	e7d4      	b.n	800471c <_free_r+0x24>
 8004772:	6820      	ldr	r0, [r4, #0]
 8004774:	1821      	adds	r1, r4, r0
 8004776:	428b      	cmp	r3, r1
 8004778:	bf01      	itttt	eq
 800477a:	6819      	ldreq	r1, [r3, #0]
 800477c:	685b      	ldreq	r3, [r3, #4]
 800477e:	1809      	addeq	r1, r1, r0
 8004780:	6021      	streq	r1, [r4, #0]
 8004782:	6063      	str	r3, [r4, #4]
 8004784:	6054      	str	r4, [r2, #4]
 8004786:	e7c9      	b.n	800471c <_free_r+0x24>
 8004788:	bd38      	pop	{r3, r4, r5, pc}
 800478a:	bf00      	nop
 800478c:	20000208 	.word	0x20000208

08004790 <_malloc_r>:
 8004790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004792:	1ccd      	adds	r5, r1, #3
 8004794:	f025 0503 	bic.w	r5, r5, #3
 8004798:	3508      	adds	r5, #8
 800479a:	2d0c      	cmp	r5, #12
 800479c:	bf38      	it	cc
 800479e:	250c      	movcc	r5, #12
 80047a0:	2d00      	cmp	r5, #0
 80047a2:	4606      	mov	r6, r0
 80047a4:	db01      	blt.n	80047aa <_malloc_r+0x1a>
 80047a6:	42a9      	cmp	r1, r5
 80047a8:	d903      	bls.n	80047b2 <_malloc_r+0x22>
 80047aa:	230c      	movs	r3, #12
 80047ac:	6033      	str	r3, [r6, #0]
 80047ae:	2000      	movs	r0, #0
 80047b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047b2:	f000 f8a1 	bl	80048f8 <__malloc_lock>
 80047b6:	4921      	ldr	r1, [pc, #132]	; (800483c <_malloc_r+0xac>)
 80047b8:	680a      	ldr	r2, [r1, #0]
 80047ba:	4614      	mov	r4, r2
 80047bc:	b99c      	cbnz	r4, 80047e6 <_malloc_r+0x56>
 80047be:	4f20      	ldr	r7, [pc, #128]	; (8004840 <_malloc_r+0xb0>)
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	b923      	cbnz	r3, 80047ce <_malloc_r+0x3e>
 80047c4:	4621      	mov	r1, r4
 80047c6:	4630      	mov	r0, r6
 80047c8:	f000 f83c 	bl	8004844 <_sbrk_r>
 80047cc:	6038      	str	r0, [r7, #0]
 80047ce:	4629      	mov	r1, r5
 80047d0:	4630      	mov	r0, r6
 80047d2:	f000 f837 	bl	8004844 <_sbrk_r>
 80047d6:	1c43      	adds	r3, r0, #1
 80047d8:	d123      	bne.n	8004822 <_malloc_r+0x92>
 80047da:	230c      	movs	r3, #12
 80047dc:	4630      	mov	r0, r6
 80047de:	6033      	str	r3, [r6, #0]
 80047e0:	f000 f890 	bl	8004904 <__malloc_unlock>
 80047e4:	e7e3      	b.n	80047ae <_malloc_r+0x1e>
 80047e6:	6823      	ldr	r3, [r4, #0]
 80047e8:	1b5b      	subs	r3, r3, r5
 80047ea:	d417      	bmi.n	800481c <_malloc_r+0x8c>
 80047ec:	2b0b      	cmp	r3, #11
 80047ee:	d903      	bls.n	80047f8 <_malloc_r+0x68>
 80047f0:	6023      	str	r3, [r4, #0]
 80047f2:	441c      	add	r4, r3
 80047f4:	6025      	str	r5, [r4, #0]
 80047f6:	e004      	b.n	8004802 <_malloc_r+0x72>
 80047f8:	6863      	ldr	r3, [r4, #4]
 80047fa:	42a2      	cmp	r2, r4
 80047fc:	bf0c      	ite	eq
 80047fe:	600b      	streq	r3, [r1, #0]
 8004800:	6053      	strne	r3, [r2, #4]
 8004802:	4630      	mov	r0, r6
 8004804:	f000 f87e 	bl	8004904 <__malloc_unlock>
 8004808:	f104 000b 	add.w	r0, r4, #11
 800480c:	1d23      	adds	r3, r4, #4
 800480e:	f020 0007 	bic.w	r0, r0, #7
 8004812:	1ac2      	subs	r2, r0, r3
 8004814:	d0cc      	beq.n	80047b0 <_malloc_r+0x20>
 8004816:	1a1b      	subs	r3, r3, r0
 8004818:	50a3      	str	r3, [r4, r2]
 800481a:	e7c9      	b.n	80047b0 <_malloc_r+0x20>
 800481c:	4622      	mov	r2, r4
 800481e:	6864      	ldr	r4, [r4, #4]
 8004820:	e7cc      	b.n	80047bc <_malloc_r+0x2c>
 8004822:	1cc4      	adds	r4, r0, #3
 8004824:	f024 0403 	bic.w	r4, r4, #3
 8004828:	42a0      	cmp	r0, r4
 800482a:	d0e3      	beq.n	80047f4 <_malloc_r+0x64>
 800482c:	1a21      	subs	r1, r4, r0
 800482e:	4630      	mov	r0, r6
 8004830:	f000 f808 	bl	8004844 <_sbrk_r>
 8004834:	3001      	adds	r0, #1
 8004836:	d1dd      	bne.n	80047f4 <_malloc_r+0x64>
 8004838:	e7cf      	b.n	80047da <_malloc_r+0x4a>
 800483a:	bf00      	nop
 800483c:	20000208 	.word	0x20000208
 8004840:	2000020c 	.word	0x2000020c

08004844 <_sbrk_r>:
 8004844:	b538      	push	{r3, r4, r5, lr}
 8004846:	2300      	movs	r3, #0
 8004848:	4d05      	ldr	r5, [pc, #20]	; (8004860 <_sbrk_r+0x1c>)
 800484a:	4604      	mov	r4, r0
 800484c:	4608      	mov	r0, r1
 800484e:	602b      	str	r3, [r5, #0]
 8004850:	f7fc fd14 	bl	800127c <_sbrk>
 8004854:	1c43      	adds	r3, r0, #1
 8004856:	d102      	bne.n	800485e <_sbrk_r+0x1a>
 8004858:	682b      	ldr	r3, [r5, #0]
 800485a:	b103      	cbz	r3, 800485e <_sbrk_r+0x1a>
 800485c:	6023      	str	r3, [r4, #0]
 800485e:	bd38      	pop	{r3, r4, r5, pc}
 8004860:	20000278 	.word	0x20000278

08004864 <strcpy>:
 8004864:	4603      	mov	r3, r0
 8004866:	f811 2b01 	ldrb.w	r2, [r1], #1
 800486a:	f803 2b01 	strb.w	r2, [r3], #1
 800486e:	2a00      	cmp	r2, #0
 8004870:	d1f9      	bne.n	8004866 <strcpy+0x2>
 8004872:	4770      	bx	lr

08004874 <__assert_func>:
 8004874:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004876:	4614      	mov	r4, r2
 8004878:	461a      	mov	r2, r3
 800487a:	4b09      	ldr	r3, [pc, #36]	; (80048a0 <__assert_func+0x2c>)
 800487c:	4605      	mov	r5, r0
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	68d8      	ldr	r0, [r3, #12]
 8004882:	b14c      	cbz	r4, 8004898 <__assert_func+0x24>
 8004884:	4b07      	ldr	r3, [pc, #28]	; (80048a4 <__assert_func+0x30>)
 8004886:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800488a:	9100      	str	r1, [sp, #0]
 800488c:	462b      	mov	r3, r5
 800488e:	4906      	ldr	r1, [pc, #24]	; (80048a8 <__assert_func+0x34>)
 8004890:	f000 f80e 	bl	80048b0 <fiprintf>
 8004894:	f000 fa62 	bl	8004d5c <abort>
 8004898:	4b04      	ldr	r3, [pc, #16]	; (80048ac <__assert_func+0x38>)
 800489a:	461c      	mov	r4, r3
 800489c:	e7f3      	b.n	8004886 <__assert_func+0x12>
 800489e:	bf00      	nop
 80048a0:	2000000c 	.word	0x2000000c
 80048a4:	080055fc 	.word	0x080055fc
 80048a8:	08005609 	.word	0x08005609
 80048ac:	08005637 	.word	0x08005637

080048b0 <fiprintf>:
 80048b0:	b40e      	push	{r1, r2, r3}
 80048b2:	b503      	push	{r0, r1, lr}
 80048b4:	4601      	mov	r1, r0
 80048b6:	ab03      	add	r3, sp, #12
 80048b8:	4805      	ldr	r0, [pc, #20]	; (80048d0 <fiprintf+0x20>)
 80048ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80048be:	6800      	ldr	r0, [r0, #0]
 80048c0:	9301      	str	r3, [sp, #4]
 80048c2:	f000 f84d 	bl	8004960 <_vfiprintf_r>
 80048c6:	b002      	add	sp, #8
 80048c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80048cc:	b003      	add	sp, #12
 80048ce:	4770      	bx	lr
 80048d0:	2000000c 	.word	0x2000000c

080048d4 <__ascii_mbtowc>:
 80048d4:	b082      	sub	sp, #8
 80048d6:	b901      	cbnz	r1, 80048da <__ascii_mbtowc+0x6>
 80048d8:	a901      	add	r1, sp, #4
 80048da:	b142      	cbz	r2, 80048ee <__ascii_mbtowc+0x1a>
 80048dc:	b14b      	cbz	r3, 80048f2 <__ascii_mbtowc+0x1e>
 80048de:	7813      	ldrb	r3, [r2, #0]
 80048e0:	600b      	str	r3, [r1, #0]
 80048e2:	7812      	ldrb	r2, [r2, #0]
 80048e4:	1e10      	subs	r0, r2, #0
 80048e6:	bf18      	it	ne
 80048e8:	2001      	movne	r0, #1
 80048ea:	b002      	add	sp, #8
 80048ec:	4770      	bx	lr
 80048ee:	4610      	mov	r0, r2
 80048f0:	e7fb      	b.n	80048ea <__ascii_mbtowc+0x16>
 80048f2:	f06f 0001 	mvn.w	r0, #1
 80048f6:	e7f8      	b.n	80048ea <__ascii_mbtowc+0x16>

080048f8 <__malloc_lock>:
 80048f8:	4801      	ldr	r0, [pc, #4]	; (8004900 <__malloc_lock+0x8>)
 80048fa:	f000 bbef 	b.w	80050dc <__retarget_lock_acquire_recursive>
 80048fe:	bf00      	nop
 8004900:	20000280 	.word	0x20000280

08004904 <__malloc_unlock>:
 8004904:	4801      	ldr	r0, [pc, #4]	; (800490c <__malloc_unlock+0x8>)
 8004906:	f000 bbea 	b.w	80050de <__retarget_lock_release_recursive>
 800490a:	bf00      	nop
 800490c:	20000280 	.word	0x20000280

08004910 <__sfputc_r>:
 8004910:	6893      	ldr	r3, [r2, #8]
 8004912:	b410      	push	{r4}
 8004914:	3b01      	subs	r3, #1
 8004916:	2b00      	cmp	r3, #0
 8004918:	6093      	str	r3, [r2, #8]
 800491a:	da07      	bge.n	800492c <__sfputc_r+0x1c>
 800491c:	6994      	ldr	r4, [r2, #24]
 800491e:	42a3      	cmp	r3, r4
 8004920:	db01      	blt.n	8004926 <__sfputc_r+0x16>
 8004922:	290a      	cmp	r1, #10
 8004924:	d102      	bne.n	800492c <__sfputc_r+0x1c>
 8004926:	bc10      	pop	{r4}
 8004928:	f000 b94a 	b.w	8004bc0 <__swbuf_r>
 800492c:	6813      	ldr	r3, [r2, #0]
 800492e:	1c58      	adds	r0, r3, #1
 8004930:	6010      	str	r0, [r2, #0]
 8004932:	7019      	strb	r1, [r3, #0]
 8004934:	4608      	mov	r0, r1
 8004936:	bc10      	pop	{r4}
 8004938:	4770      	bx	lr

0800493a <__sfputs_r>:
 800493a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800493c:	4606      	mov	r6, r0
 800493e:	460f      	mov	r7, r1
 8004940:	4614      	mov	r4, r2
 8004942:	18d5      	adds	r5, r2, r3
 8004944:	42ac      	cmp	r4, r5
 8004946:	d101      	bne.n	800494c <__sfputs_r+0x12>
 8004948:	2000      	movs	r0, #0
 800494a:	e007      	b.n	800495c <__sfputs_r+0x22>
 800494c:	463a      	mov	r2, r7
 800494e:	4630      	mov	r0, r6
 8004950:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004954:	f7ff ffdc 	bl	8004910 <__sfputc_r>
 8004958:	1c43      	adds	r3, r0, #1
 800495a:	d1f3      	bne.n	8004944 <__sfputs_r+0xa>
 800495c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004960 <_vfiprintf_r>:
 8004960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004964:	460d      	mov	r5, r1
 8004966:	4614      	mov	r4, r2
 8004968:	4698      	mov	r8, r3
 800496a:	4606      	mov	r6, r0
 800496c:	b09d      	sub	sp, #116	; 0x74
 800496e:	b118      	cbz	r0, 8004978 <_vfiprintf_r+0x18>
 8004970:	6983      	ldr	r3, [r0, #24]
 8004972:	b90b      	cbnz	r3, 8004978 <_vfiprintf_r+0x18>
 8004974:	f000 fb14 	bl	8004fa0 <__sinit>
 8004978:	4b89      	ldr	r3, [pc, #548]	; (8004ba0 <_vfiprintf_r+0x240>)
 800497a:	429d      	cmp	r5, r3
 800497c:	d11b      	bne.n	80049b6 <_vfiprintf_r+0x56>
 800497e:	6875      	ldr	r5, [r6, #4]
 8004980:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004982:	07d9      	lsls	r1, r3, #31
 8004984:	d405      	bmi.n	8004992 <_vfiprintf_r+0x32>
 8004986:	89ab      	ldrh	r3, [r5, #12]
 8004988:	059a      	lsls	r2, r3, #22
 800498a:	d402      	bmi.n	8004992 <_vfiprintf_r+0x32>
 800498c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800498e:	f000 fba5 	bl	80050dc <__retarget_lock_acquire_recursive>
 8004992:	89ab      	ldrh	r3, [r5, #12]
 8004994:	071b      	lsls	r3, r3, #28
 8004996:	d501      	bpl.n	800499c <_vfiprintf_r+0x3c>
 8004998:	692b      	ldr	r3, [r5, #16]
 800499a:	b9eb      	cbnz	r3, 80049d8 <_vfiprintf_r+0x78>
 800499c:	4629      	mov	r1, r5
 800499e:	4630      	mov	r0, r6
 80049a0:	f000 f96e 	bl	8004c80 <__swsetup_r>
 80049a4:	b1c0      	cbz	r0, 80049d8 <_vfiprintf_r+0x78>
 80049a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80049a8:	07dc      	lsls	r4, r3, #31
 80049aa:	d50e      	bpl.n	80049ca <_vfiprintf_r+0x6a>
 80049ac:	f04f 30ff 	mov.w	r0, #4294967295
 80049b0:	b01d      	add	sp, #116	; 0x74
 80049b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049b6:	4b7b      	ldr	r3, [pc, #492]	; (8004ba4 <_vfiprintf_r+0x244>)
 80049b8:	429d      	cmp	r5, r3
 80049ba:	d101      	bne.n	80049c0 <_vfiprintf_r+0x60>
 80049bc:	68b5      	ldr	r5, [r6, #8]
 80049be:	e7df      	b.n	8004980 <_vfiprintf_r+0x20>
 80049c0:	4b79      	ldr	r3, [pc, #484]	; (8004ba8 <_vfiprintf_r+0x248>)
 80049c2:	429d      	cmp	r5, r3
 80049c4:	bf08      	it	eq
 80049c6:	68f5      	ldreq	r5, [r6, #12]
 80049c8:	e7da      	b.n	8004980 <_vfiprintf_r+0x20>
 80049ca:	89ab      	ldrh	r3, [r5, #12]
 80049cc:	0598      	lsls	r0, r3, #22
 80049ce:	d4ed      	bmi.n	80049ac <_vfiprintf_r+0x4c>
 80049d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80049d2:	f000 fb84 	bl	80050de <__retarget_lock_release_recursive>
 80049d6:	e7e9      	b.n	80049ac <_vfiprintf_r+0x4c>
 80049d8:	2300      	movs	r3, #0
 80049da:	9309      	str	r3, [sp, #36]	; 0x24
 80049dc:	2320      	movs	r3, #32
 80049de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80049e2:	2330      	movs	r3, #48	; 0x30
 80049e4:	f04f 0901 	mov.w	r9, #1
 80049e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80049ec:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8004bac <_vfiprintf_r+0x24c>
 80049f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80049f4:	4623      	mov	r3, r4
 80049f6:	469a      	mov	sl, r3
 80049f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80049fc:	b10a      	cbz	r2, 8004a02 <_vfiprintf_r+0xa2>
 80049fe:	2a25      	cmp	r2, #37	; 0x25
 8004a00:	d1f9      	bne.n	80049f6 <_vfiprintf_r+0x96>
 8004a02:	ebba 0b04 	subs.w	fp, sl, r4
 8004a06:	d00b      	beq.n	8004a20 <_vfiprintf_r+0xc0>
 8004a08:	465b      	mov	r3, fp
 8004a0a:	4622      	mov	r2, r4
 8004a0c:	4629      	mov	r1, r5
 8004a0e:	4630      	mov	r0, r6
 8004a10:	f7ff ff93 	bl	800493a <__sfputs_r>
 8004a14:	3001      	adds	r0, #1
 8004a16:	f000 80aa 	beq.w	8004b6e <_vfiprintf_r+0x20e>
 8004a1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a1c:	445a      	add	r2, fp
 8004a1e:	9209      	str	r2, [sp, #36]	; 0x24
 8004a20:	f89a 3000 	ldrb.w	r3, [sl]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	f000 80a2 	beq.w	8004b6e <_vfiprintf_r+0x20e>
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8004a30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a34:	f10a 0a01 	add.w	sl, sl, #1
 8004a38:	9304      	str	r3, [sp, #16]
 8004a3a:	9307      	str	r3, [sp, #28]
 8004a3c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004a40:	931a      	str	r3, [sp, #104]	; 0x68
 8004a42:	4654      	mov	r4, sl
 8004a44:	2205      	movs	r2, #5
 8004a46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a4a:	4858      	ldr	r0, [pc, #352]	; (8004bac <_vfiprintf_r+0x24c>)
 8004a4c:	f7ff fa8c 	bl	8003f68 <memchr>
 8004a50:	9a04      	ldr	r2, [sp, #16]
 8004a52:	b9d8      	cbnz	r0, 8004a8c <_vfiprintf_r+0x12c>
 8004a54:	06d1      	lsls	r1, r2, #27
 8004a56:	bf44      	itt	mi
 8004a58:	2320      	movmi	r3, #32
 8004a5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a5e:	0713      	lsls	r3, r2, #28
 8004a60:	bf44      	itt	mi
 8004a62:	232b      	movmi	r3, #43	; 0x2b
 8004a64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a68:	f89a 3000 	ldrb.w	r3, [sl]
 8004a6c:	2b2a      	cmp	r3, #42	; 0x2a
 8004a6e:	d015      	beq.n	8004a9c <_vfiprintf_r+0x13c>
 8004a70:	4654      	mov	r4, sl
 8004a72:	2000      	movs	r0, #0
 8004a74:	f04f 0c0a 	mov.w	ip, #10
 8004a78:	9a07      	ldr	r2, [sp, #28]
 8004a7a:	4621      	mov	r1, r4
 8004a7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a80:	3b30      	subs	r3, #48	; 0x30
 8004a82:	2b09      	cmp	r3, #9
 8004a84:	d94e      	bls.n	8004b24 <_vfiprintf_r+0x1c4>
 8004a86:	b1b0      	cbz	r0, 8004ab6 <_vfiprintf_r+0x156>
 8004a88:	9207      	str	r2, [sp, #28]
 8004a8a:	e014      	b.n	8004ab6 <_vfiprintf_r+0x156>
 8004a8c:	eba0 0308 	sub.w	r3, r0, r8
 8004a90:	fa09 f303 	lsl.w	r3, r9, r3
 8004a94:	4313      	orrs	r3, r2
 8004a96:	46a2      	mov	sl, r4
 8004a98:	9304      	str	r3, [sp, #16]
 8004a9a:	e7d2      	b.n	8004a42 <_vfiprintf_r+0xe2>
 8004a9c:	9b03      	ldr	r3, [sp, #12]
 8004a9e:	1d19      	adds	r1, r3, #4
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	9103      	str	r1, [sp, #12]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	bfbb      	ittet	lt
 8004aa8:	425b      	neglt	r3, r3
 8004aaa:	f042 0202 	orrlt.w	r2, r2, #2
 8004aae:	9307      	strge	r3, [sp, #28]
 8004ab0:	9307      	strlt	r3, [sp, #28]
 8004ab2:	bfb8      	it	lt
 8004ab4:	9204      	strlt	r2, [sp, #16]
 8004ab6:	7823      	ldrb	r3, [r4, #0]
 8004ab8:	2b2e      	cmp	r3, #46	; 0x2e
 8004aba:	d10c      	bne.n	8004ad6 <_vfiprintf_r+0x176>
 8004abc:	7863      	ldrb	r3, [r4, #1]
 8004abe:	2b2a      	cmp	r3, #42	; 0x2a
 8004ac0:	d135      	bne.n	8004b2e <_vfiprintf_r+0x1ce>
 8004ac2:	9b03      	ldr	r3, [sp, #12]
 8004ac4:	3402      	adds	r4, #2
 8004ac6:	1d1a      	adds	r2, r3, #4
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	9203      	str	r2, [sp, #12]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	bfb8      	it	lt
 8004ad0:	f04f 33ff 	movlt.w	r3, #4294967295
 8004ad4:	9305      	str	r3, [sp, #20]
 8004ad6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004bbc <_vfiprintf_r+0x25c>
 8004ada:	2203      	movs	r2, #3
 8004adc:	4650      	mov	r0, sl
 8004ade:	7821      	ldrb	r1, [r4, #0]
 8004ae0:	f7ff fa42 	bl	8003f68 <memchr>
 8004ae4:	b140      	cbz	r0, 8004af8 <_vfiprintf_r+0x198>
 8004ae6:	2340      	movs	r3, #64	; 0x40
 8004ae8:	eba0 000a 	sub.w	r0, r0, sl
 8004aec:	fa03 f000 	lsl.w	r0, r3, r0
 8004af0:	9b04      	ldr	r3, [sp, #16]
 8004af2:	3401      	adds	r4, #1
 8004af4:	4303      	orrs	r3, r0
 8004af6:	9304      	str	r3, [sp, #16]
 8004af8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004afc:	2206      	movs	r2, #6
 8004afe:	482c      	ldr	r0, [pc, #176]	; (8004bb0 <_vfiprintf_r+0x250>)
 8004b00:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004b04:	f7ff fa30 	bl	8003f68 <memchr>
 8004b08:	2800      	cmp	r0, #0
 8004b0a:	d03f      	beq.n	8004b8c <_vfiprintf_r+0x22c>
 8004b0c:	4b29      	ldr	r3, [pc, #164]	; (8004bb4 <_vfiprintf_r+0x254>)
 8004b0e:	bb1b      	cbnz	r3, 8004b58 <_vfiprintf_r+0x1f8>
 8004b10:	9b03      	ldr	r3, [sp, #12]
 8004b12:	3307      	adds	r3, #7
 8004b14:	f023 0307 	bic.w	r3, r3, #7
 8004b18:	3308      	adds	r3, #8
 8004b1a:	9303      	str	r3, [sp, #12]
 8004b1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b1e:	443b      	add	r3, r7
 8004b20:	9309      	str	r3, [sp, #36]	; 0x24
 8004b22:	e767      	b.n	80049f4 <_vfiprintf_r+0x94>
 8004b24:	460c      	mov	r4, r1
 8004b26:	2001      	movs	r0, #1
 8004b28:	fb0c 3202 	mla	r2, ip, r2, r3
 8004b2c:	e7a5      	b.n	8004a7a <_vfiprintf_r+0x11a>
 8004b2e:	2300      	movs	r3, #0
 8004b30:	f04f 0c0a 	mov.w	ip, #10
 8004b34:	4619      	mov	r1, r3
 8004b36:	3401      	adds	r4, #1
 8004b38:	9305      	str	r3, [sp, #20]
 8004b3a:	4620      	mov	r0, r4
 8004b3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b40:	3a30      	subs	r2, #48	; 0x30
 8004b42:	2a09      	cmp	r2, #9
 8004b44:	d903      	bls.n	8004b4e <_vfiprintf_r+0x1ee>
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d0c5      	beq.n	8004ad6 <_vfiprintf_r+0x176>
 8004b4a:	9105      	str	r1, [sp, #20]
 8004b4c:	e7c3      	b.n	8004ad6 <_vfiprintf_r+0x176>
 8004b4e:	4604      	mov	r4, r0
 8004b50:	2301      	movs	r3, #1
 8004b52:	fb0c 2101 	mla	r1, ip, r1, r2
 8004b56:	e7f0      	b.n	8004b3a <_vfiprintf_r+0x1da>
 8004b58:	ab03      	add	r3, sp, #12
 8004b5a:	9300      	str	r3, [sp, #0]
 8004b5c:	462a      	mov	r2, r5
 8004b5e:	4630      	mov	r0, r6
 8004b60:	4b15      	ldr	r3, [pc, #84]	; (8004bb8 <_vfiprintf_r+0x258>)
 8004b62:	a904      	add	r1, sp, #16
 8004b64:	f7fd fe7a 	bl	800285c <_printf_float>
 8004b68:	4607      	mov	r7, r0
 8004b6a:	1c78      	adds	r0, r7, #1
 8004b6c:	d1d6      	bne.n	8004b1c <_vfiprintf_r+0x1bc>
 8004b6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004b70:	07d9      	lsls	r1, r3, #31
 8004b72:	d405      	bmi.n	8004b80 <_vfiprintf_r+0x220>
 8004b74:	89ab      	ldrh	r3, [r5, #12]
 8004b76:	059a      	lsls	r2, r3, #22
 8004b78:	d402      	bmi.n	8004b80 <_vfiprintf_r+0x220>
 8004b7a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004b7c:	f000 faaf 	bl	80050de <__retarget_lock_release_recursive>
 8004b80:	89ab      	ldrh	r3, [r5, #12]
 8004b82:	065b      	lsls	r3, r3, #25
 8004b84:	f53f af12 	bmi.w	80049ac <_vfiprintf_r+0x4c>
 8004b88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004b8a:	e711      	b.n	80049b0 <_vfiprintf_r+0x50>
 8004b8c:	ab03      	add	r3, sp, #12
 8004b8e:	9300      	str	r3, [sp, #0]
 8004b90:	462a      	mov	r2, r5
 8004b92:	4630      	mov	r0, r6
 8004b94:	4b08      	ldr	r3, [pc, #32]	; (8004bb8 <_vfiprintf_r+0x258>)
 8004b96:	a904      	add	r1, sp, #16
 8004b98:	f7fe f8fc 	bl	8002d94 <_printf_i>
 8004b9c:	e7e4      	b.n	8004b68 <_vfiprintf_r+0x208>
 8004b9e:	bf00      	nop
 8004ba0:	08005774 	.word	0x08005774
 8004ba4:	08005794 	.word	0x08005794
 8004ba8:	08005754 	.word	0x08005754
 8004bac:	08005642 	.word	0x08005642
 8004bb0:	0800564c 	.word	0x0800564c
 8004bb4:	0800285d 	.word	0x0800285d
 8004bb8:	0800493b 	.word	0x0800493b
 8004bbc:	08005648 	.word	0x08005648

08004bc0 <__swbuf_r>:
 8004bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bc2:	460e      	mov	r6, r1
 8004bc4:	4614      	mov	r4, r2
 8004bc6:	4605      	mov	r5, r0
 8004bc8:	b118      	cbz	r0, 8004bd2 <__swbuf_r+0x12>
 8004bca:	6983      	ldr	r3, [r0, #24]
 8004bcc:	b90b      	cbnz	r3, 8004bd2 <__swbuf_r+0x12>
 8004bce:	f000 f9e7 	bl	8004fa0 <__sinit>
 8004bd2:	4b21      	ldr	r3, [pc, #132]	; (8004c58 <__swbuf_r+0x98>)
 8004bd4:	429c      	cmp	r4, r3
 8004bd6:	d12b      	bne.n	8004c30 <__swbuf_r+0x70>
 8004bd8:	686c      	ldr	r4, [r5, #4]
 8004bda:	69a3      	ldr	r3, [r4, #24]
 8004bdc:	60a3      	str	r3, [r4, #8]
 8004bde:	89a3      	ldrh	r3, [r4, #12]
 8004be0:	071a      	lsls	r2, r3, #28
 8004be2:	d52f      	bpl.n	8004c44 <__swbuf_r+0x84>
 8004be4:	6923      	ldr	r3, [r4, #16]
 8004be6:	b36b      	cbz	r3, 8004c44 <__swbuf_r+0x84>
 8004be8:	6923      	ldr	r3, [r4, #16]
 8004bea:	6820      	ldr	r0, [r4, #0]
 8004bec:	b2f6      	uxtb	r6, r6
 8004bee:	1ac0      	subs	r0, r0, r3
 8004bf0:	6963      	ldr	r3, [r4, #20]
 8004bf2:	4637      	mov	r7, r6
 8004bf4:	4283      	cmp	r3, r0
 8004bf6:	dc04      	bgt.n	8004c02 <__swbuf_r+0x42>
 8004bf8:	4621      	mov	r1, r4
 8004bfa:	4628      	mov	r0, r5
 8004bfc:	f000 f93c 	bl	8004e78 <_fflush_r>
 8004c00:	bb30      	cbnz	r0, 8004c50 <__swbuf_r+0x90>
 8004c02:	68a3      	ldr	r3, [r4, #8]
 8004c04:	3001      	adds	r0, #1
 8004c06:	3b01      	subs	r3, #1
 8004c08:	60a3      	str	r3, [r4, #8]
 8004c0a:	6823      	ldr	r3, [r4, #0]
 8004c0c:	1c5a      	adds	r2, r3, #1
 8004c0e:	6022      	str	r2, [r4, #0]
 8004c10:	701e      	strb	r6, [r3, #0]
 8004c12:	6963      	ldr	r3, [r4, #20]
 8004c14:	4283      	cmp	r3, r0
 8004c16:	d004      	beq.n	8004c22 <__swbuf_r+0x62>
 8004c18:	89a3      	ldrh	r3, [r4, #12]
 8004c1a:	07db      	lsls	r3, r3, #31
 8004c1c:	d506      	bpl.n	8004c2c <__swbuf_r+0x6c>
 8004c1e:	2e0a      	cmp	r6, #10
 8004c20:	d104      	bne.n	8004c2c <__swbuf_r+0x6c>
 8004c22:	4621      	mov	r1, r4
 8004c24:	4628      	mov	r0, r5
 8004c26:	f000 f927 	bl	8004e78 <_fflush_r>
 8004c2a:	b988      	cbnz	r0, 8004c50 <__swbuf_r+0x90>
 8004c2c:	4638      	mov	r0, r7
 8004c2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c30:	4b0a      	ldr	r3, [pc, #40]	; (8004c5c <__swbuf_r+0x9c>)
 8004c32:	429c      	cmp	r4, r3
 8004c34:	d101      	bne.n	8004c3a <__swbuf_r+0x7a>
 8004c36:	68ac      	ldr	r4, [r5, #8]
 8004c38:	e7cf      	b.n	8004bda <__swbuf_r+0x1a>
 8004c3a:	4b09      	ldr	r3, [pc, #36]	; (8004c60 <__swbuf_r+0xa0>)
 8004c3c:	429c      	cmp	r4, r3
 8004c3e:	bf08      	it	eq
 8004c40:	68ec      	ldreq	r4, [r5, #12]
 8004c42:	e7ca      	b.n	8004bda <__swbuf_r+0x1a>
 8004c44:	4621      	mov	r1, r4
 8004c46:	4628      	mov	r0, r5
 8004c48:	f000 f81a 	bl	8004c80 <__swsetup_r>
 8004c4c:	2800      	cmp	r0, #0
 8004c4e:	d0cb      	beq.n	8004be8 <__swbuf_r+0x28>
 8004c50:	f04f 37ff 	mov.w	r7, #4294967295
 8004c54:	e7ea      	b.n	8004c2c <__swbuf_r+0x6c>
 8004c56:	bf00      	nop
 8004c58:	08005774 	.word	0x08005774
 8004c5c:	08005794 	.word	0x08005794
 8004c60:	08005754 	.word	0x08005754

08004c64 <__ascii_wctomb>:
 8004c64:	4603      	mov	r3, r0
 8004c66:	4608      	mov	r0, r1
 8004c68:	b141      	cbz	r1, 8004c7c <__ascii_wctomb+0x18>
 8004c6a:	2aff      	cmp	r2, #255	; 0xff
 8004c6c:	d904      	bls.n	8004c78 <__ascii_wctomb+0x14>
 8004c6e:	228a      	movs	r2, #138	; 0x8a
 8004c70:	f04f 30ff 	mov.w	r0, #4294967295
 8004c74:	601a      	str	r2, [r3, #0]
 8004c76:	4770      	bx	lr
 8004c78:	2001      	movs	r0, #1
 8004c7a:	700a      	strb	r2, [r1, #0]
 8004c7c:	4770      	bx	lr
	...

08004c80 <__swsetup_r>:
 8004c80:	4b32      	ldr	r3, [pc, #200]	; (8004d4c <__swsetup_r+0xcc>)
 8004c82:	b570      	push	{r4, r5, r6, lr}
 8004c84:	681d      	ldr	r5, [r3, #0]
 8004c86:	4606      	mov	r6, r0
 8004c88:	460c      	mov	r4, r1
 8004c8a:	b125      	cbz	r5, 8004c96 <__swsetup_r+0x16>
 8004c8c:	69ab      	ldr	r3, [r5, #24]
 8004c8e:	b913      	cbnz	r3, 8004c96 <__swsetup_r+0x16>
 8004c90:	4628      	mov	r0, r5
 8004c92:	f000 f985 	bl	8004fa0 <__sinit>
 8004c96:	4b2e      	ldr	r3, [pc, #184]	; (8004d50 <__swsetup_r+0xd0>)
 8004c98:	429c      	cmp	r4, r3
 8004c9a:	d10f      	bne.n	8004cbc <__swsetup_r+0x3c>
 8004c9c:	686c      	ldr	r4, [r5, #4]
 8004c9e:	89a3      	ldrh	r3, [r4, #12]
 8004ca0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004ca4:	0719      	lsls	r1, r3, #28
 8004ca6:	d42c      	bmi.n	8004d02 <__swsetup_r+0x82>
 8004ca8:	06dd      	lsls	r5, r3, #27
 8004caa:	d411      	bmi.n	8004cd0 <__swsetup_r+0x50>
 8004cac:	2309      	movs	r3, #9
 8004cae:	6033      	str	r3, [r6, #0]
 8004cb0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8004cb8:	81a3      	strh	r3, [r4, #12]
 8004cba:	e03e      	b.n	8004d3a <__swsetup_r+0xba>
 8004cbc:	4b25      	ldr	r3, [pc, #148]	; (8004d54 <__swsetup_r+0xd4>)
 8004cbe:	429c      	cmp	r4, r3
 8004cc0:	d101      	bne.n	8004cc6 <__swsetup_r+0x46>
 8004cc2:	68ac      	ldr	r4, [r5, #8]
 8004cc4:	e7eb      	b.n	8004c9e <__swsetup_r+0x1e>
 8004cc6:	4b24      	ldr	r3, [pc, #144]	; (8004d58 <__swsetup_r+0xd8>)
 8004cc8:	429c      	cmp	r4, r3
 8004cca:	bf08      	it	eq
 8004ccc:	68ec      	ldreq	r4, [r5, #12]
 8004cce:	e7e6      	b.n	8004c9e <__swsetup_r+0x1e>
 8004cd0:	0758      	lsls	r0, r3, #29
 8004cd2:	d512      	bpl.n	8004cfa <__swsetup_r+0x7a>
 8004cd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004cd6:	b141      	cbz	r1, 8004cea <__swsetup_r+0x6a>
 8004cd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004cdc:	4299      	cmp	r1, r3
 8004cde:	d002      	beq.n	8004ce6 <__swsetup_r+0x66>
 8004ce0:	4630      	mov	r0, r6
 8004ce2:	f7ff fd09 	bl	80046f8 <_free_r>
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	6363      	str	r3, [r4, #52]	; 0x34
 8004cea:	89a3      	ldrh	r3, [r4, #12]
 8004cec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004cf0:	81a3      	strh	r3, [r4, #12]
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	6063      	str	r3, [r4, #4]
 8004cf6:	6923      	ldr	r3, [r4, #16]
 8004cf8:	6023      	str	r3, [r4, #0]
 8004cfa:	89a3      	ldrh	r3, [r4, #12]
 8004cfc:	f043 0308 	orr.w	r3, r3, #8
 8004d00:	81a3      	strh	r3, [r4, #12]
 8004d02:	6923      	ldr	r3, [r4, #16]
 8004d04:	b94b      	cbnz	r3, 8004d1a <__swsetup_r+0x9a>
 8004d06:	89a3      	ldrh	r3, [r4, #12]
 8004d08:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004d0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d10:	d003      	beq.n	8004d1a <__swsetup_r+0x9a>
 8004d12:	4621      	mov	r1, r4
 8004d14:	4630      	mov	r0, r6
 8004d16:	f000 fa07 	bl	8005128 <__smakebuf_r>
 8004d1a:	89a0      	ldrh	r0, [r4, #12]
 8004d1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004d20:	f010 0301 	ands.w	r3, r0, #1
 8004d24:	d00a      	beq.n	8004d3c <__swsetup_r+0xbc>
 8004d26:	2300      	movs	r3, #0
 8004d28:	60a3      	str	r3, [r4, #8]
 8004d2a:	6963      	ldr	r3, [r4, #20]
 8004d2c:	425b      	negs	r3, r3
 8004d2e:	61a3      	str	r3, [r4, #24]
 8004d30:	6923      	ldr	r3, [r4, #16]
 8004d32:	b943      	cbnz	r3, 8004d46 <__swsetup_r+0xc6>
 8004d34:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004d38:	d1ba      	bne.n	8004cb0 <__swsetup_r+0x30>
 8004d3a:	bd70      	pop	{r4, r5, r6, pc}
 8004d3c:	0781      	lsls	r1, r0, #30
 8004d3e:	bf58      	it	pl
 8004d40:	6963      	ldrpl	r3, [r4, #20]
 8004d42:	60a3      	str	r3, [r4, #8]
 8004d44:	e7f4      	b.n	8004d30 <__swsetup_r+0xb0>
 8004d46:	2000      	movs	r0, #0
 8004d48:	e7f7      	b.n	8004d3a <__swsetup_r+0xba>
 8004d4a:	bf00      	nop
 8004d4c:	2000000c 	.word	0x2000000c
 8004d50:	08005774 	.word	0x08005774
 8004d54:	08005794 	.word	0x08005794
 8004d58:	08005754 	.word	0x08005754

08004d5c <abort>:
 8004d5c:	2006      	movs	r0, #6
 8004d5e:	b508      	push	{r3, lr}
 8004d60:	f000 fa4a 	bl	80051f8 <raise>
 8004d64:	2001      	movs	r0, #1
 8004d66:	f7fc fa15 	bl	8001194 <_exit>
	...

08004d6c <__sflush_r>:
 8004d6c:	898a      	ldrh	r2, [r1, #12]
 8004d6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d72:	4605      	mov	r5, r0
 8004d74:	0710      	lsls	r0, r2, #28
 8004d76:	460c      	mov	r4, r1
 8004d78:	d458      	bmi.n	8004e2c <__sflush_r+0xc0>
 8004d7a:	684b      	ldr	r3, [r1, #4]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	dc05      	bgt.n	8004d8c <__sflush_r+0x20>
 8004d80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	dc02      	bgt.n	8004d8c <__sflush_r+0x20>
 8004d86:	2000      	movs	r0, #0
 8004d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004d8e:	2e00      	cmp	r6, #0
 8004d90:	d0f9      	beq.n	8004d86 <__sflush_r+0x1a>
 8004d92:	2300      	movs	r3, #0
 8004d94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004d98:	682f      	ldr	r7, [r5, #0]
 8004d9a:	602b      	str	r3, [r5, #0]
 8004d9c:	d032      	beq.n	8004e04 <__sflush_r+0x98>
 8004d9e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004da0:	89a3      	ldrh	r3, [r4, #12]
 8004da2:	075a      	lsls	r2, r3, #29
 8004da4:	d505      	bpl.n	8004db2 <__sflush_r+0x46>
 8004da6:	6863      	ldr	r3, [r4, #4]
 8004da8:	1ac0      	subs	r0, r0, r3
 8004daa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004dac:	b10b      	cbz	r3, 8004db2 <__sflush_r+0x46>
 8004dae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004db0:	1ac0      	subs	r0, r0, r3
 8004db2:	2300      	movs	r3, #0
 8004db4:	4602      	mov	r2, r0
 8004db6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004db8:	4628      	mov	r0, r5
 8004dba:	6a21      	ldr	r1, [r4, #32]
 8004dbc:	47b0      	blx	r6
 8004dbe:	1c43      	adds	r3, r0, #1
 8004dc0:	89a3      	ldrh	r3, [r4, #12]
 8004dc2:	d106      	bne.n	8004dd2 <__sflush_r+0x66>
 8004dc4:	6829      	ldr	r1, [r5, #0]
 8004dc6:	291d      	cmp	r1, #29
 8004dc8:	d82c      	bhi.n	8004e24 <__sflush_r+0xb8>
 8004dca:	4a2a      	ldr	r2, [pc, #168]	; (8004e74 <__sflush_r+0x108>)
 8004dcc:	40ca      	lsrs	r2, r1
 8004dce:	07d6      	lsls	r6, r2, #31
 8004dd0:	d528      	bpl.n	8004e24 <__sflush_r+0xb8>
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	6062      	str	r2, [r4, #4]
 8004dd6:	6922      	ldr	r2, [r4, #16]
 8004dd8:	04d9      	lsls	r1, r3, #19
 8004dda:	6022      	str	r2, [r4, #0]
 8004ddc:	d504      	bpl.n	8004de8 <__sflush_r+0x7c>
 8004dde:	1c42      	adds	r2, r0, #1
 8004de0:	d101      	bne.n	8004de6 <__sflush_r+0x7a>
 8004de2:	682b      	ldr	r3, [r5, #0]
 8004de4:	b903      	cbnz	r3, 8004de8 <__sflush_r+0x7c>
 8004de6:	6560      	str	r0, [r4, #84]	; 0x54
 8004de8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004dea:	602f      	str	r7, [r5, #0]
 8004dec:	2900      	cmp	r1, #0
 8004dee:	d0ca      	beq.n	8004d86 <__sflush_r+0x1a>
 8004df0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004df4:	4299      	cmp	r1, r3
 8004df6:	d002      	beq.n	8004dfe <__sflush_r+0x92>
 8004df8:	4628      	mov	r0, r5
 8004dfa:	f7ff fc7d 	bl	80046f8 <_free_r>
 8004dfe:	2000      	movs	r0, #0
 8004e00:	6360      	str	r0, [r4, #52]	; 0x34
 8004e02:	e7c1      	b.n	8004d88 <__sflush_r+0x1c>
 8004e04:	6a21      	ldr	r1, [r4, #32]
 8004e06:	2301      	movs	r3, #1
 8004e08:	4628      	mov	r0, r5
 8004e0a:	47b0      	blx	r6
 8004e0c:	1c41      	adds	r1, r0, #1
 8004e0e:	d1c7      	bne.n	8004da0 <__sflush_r+0x34>
 8004e10:	682b      	ldr	r3, [r5, #0]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d0c4      	beq.n	8004da0 <__sflush_r+0x34>
 8004e16:	2b1d      	cmp	r3, #29
 8004e18:	d001      	beq.n	8004e1e <__sflush_r+0xb2>
 8004e1a:	2b16      	cmp	r3, #22
 8004e1c:	d101      	bne.n	8004e22 <__sflush_r+0xb6>
 8004e1e:	602f      	str	r7, [r5, #0]
 8004e20:	e7b1      	b.n	8004d86 <__sflush_r+0x1a>
 8004e22:	89a3      	ldrh	r3, [r4, #12]
 8004e24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e28:	81a3      	strh	r3, [r4, #12]
 8004e2a:	e7ad      	b.n	8004d88 <__sflush_r+0x1c>
 8004e2c:	690f      	ldr	r7, [r1, #16]
 8004e2e:	2f00      	cmp	r7, #0
 8004e30:	d0a9      	beq.n	8004d86 <__sflush_r+0x1a>
 8004e32:	0793      	lsls	r3, r2, #30
 8004e34:	bf18      	it	ne
 8004e36:	2300      	movne	r3, #0
 8004e38:	680e      	ldr	r6, [r1, #0]
 8004e3a:	bf08      	it	eq
 8004e3c:	694b      	ldreq	r3, [r1, #20]
 8004e3e:	eba6 0807 	sub.w	r8, r6, r7
 8004e42:	600f      	str	r7, [r1, #0]
 8004e44:	608b      	str	r3, [r1, #8]
 8004e46:	f1b8 0f00 	cmp.w	r8, #0
 8004e4a:	dd9c      	ble.n	8004d86 <__sflush_r+0x1a>
 8004e4c:	4643      	mov	r3, r8
 8004e4e:	463a      	mov	r2, r7
 8004e50:	4628      	mov	r0, r5
 8004e52:	6a21      	ldr	r1, [r4, #32]
 8004e54:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004e56:	47b0      	blx	r6
 8004e58:	2800      	cmp	r0, #0
 8004e5a:	dc06      	bgt.n	8004e6a <__sflush_r+0xfe>
 8004e5c:	89a3      	ldrh	r3, [r4, #12]
 8004e5e:	f04f 30ff 	mov.w	r0, #4294967295
 8004e62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e66:	81a3      	strh	r3, [r4, #12]
 8004e68:	e78e      	b.n	8004d88 <__sflush_r+0x1c>
 8004e6a:	4407      	add	r7, r0
 8004e6c:	eba8 0800 	sub.w	r8, r8, r0
 8004e70:	e7e9      	b.n	8004e46 <__sflush_r+0xda>
 8004e72:	bf00      	nop
 8004e74:	20400001 	.word	0x20400001

08004e78 <_fflush_r>:
 8004e78:	b538      	push	{r3, r4, r5, lr}
 8004e7a:	690b      	ldr	r3, [r1, #16]
 8004e7c:	4605      	mov	r5, r0
 8004e7e:	460c      	mov	r4, r1
 8004e80:	b913      	cbnz	r3, 8004e88 <_fflush_r+0x10>
 8004e82:	2500      	movs	r5, #0
 8004e84:	4628      	mov	r0, r5
 8004e86:	bd38      	pop	{r3, r4, r5, pc}
 8004e88:	b118      	cbz	r0, 8004e92 <_fflush_r+0x1a>
 8004e8a:	6983      	ldr	r3, [r0, #24]
 8004e8c:	b90b      	cbnz	r3, 8004e92 <_fflush_r+0x1a>
 8004e8e:	f000 f887 	bl	8004fa0 <__sinit>
 8004e92:	4b14      	ldr	r3, [pc, #80]	; (8004ee4 <_fflush_r+0x6c>)
 8004e94:	429c      	cmp	r4, r3
 8004e96:	d11b      	bne.n	8004ed0 <_fflush_r+0x58>
 8004e98:	686c      	ldr	r4, [r5, #4]
 8004e9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d0ef      	beq.n	8004e82 <_fflush_r+0xa>
 8004ea2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004ea4:	07d0      	lsls	r0, r2, #31
 8004ea6:	d404      	bmi.n	8004eb2 <_fflush_r+0x3a>
 8004ea8:	0599      	lsls	r1, r3, #22
 8004eaa:	d402      	bmi.n	8004eb2 <_fflush_r+0x3a>
 8004eac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004eae:	f000 f915 	bl	80050dc <__retarget_lock_acquire_recursive>
 8004eb2:	4628      	mov	r0, r5
 8004eb4:	4621      	mov	r1, r4
 8004eb6:	f7ff ff59 	bl	8004d6c <__sflush_r>
 8004eba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ebc:	4605      	mov	r5, r0
 8004ebe:	07da      	lsls	r2, r3, #31
 8004ec0:	d4e0      	bmi.n	8004e84 <_fflush_r+0xc>
 8004ec2:	89a3      	ldrh	r3, [r4, #12]
 8004ec4:	059b      	lsls	r3, r3, #22
 8004ec6:	d4dd      	bmi.n	8004e84 <_fflush_r+0xc>
 8004ec8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004eca:	f000 f908 	bl	80050de <__retarget_lock_release_recursive>
 8004ece:	e7d9      	b.n	8004e84 <_fflush_r+0xc>
 8004ed0:	4b05      	ldr	r3, [pc, #20]	; (8004ee8 <_fflush_r+0x70>)
 8004ed2:	429c      	cmp	r4, r3
 8004ed4:	d101      	bne.n	8004eda <_fflush_r+0x62>
 8004ed6:	68ac      	ldr	r4, [r5, #8]
 8004ed8:	e7df      	b.n	8004e9a <_fflush_r+0x22>
 8004eda:	4b04      	ldr	r3, [pc, #16]	; (8004eec <_fflush_r+0x74>)
 8004edc:	429c      	cmp	r4, r3
 8004ede:	bf08      	it	eq
 8004ee0:	68ec      	ldreq	r4, [r5, #12]
 8004ee2:	e7da      	b.n	8004e9a <_fflush_r+0x22>
 8004ee4:	08005774 	.word	0x08005774
 8004ee8:	08005794 	.word	0x08005794
 8004eec:	08005754 	.word	0x08005754

08004ef0 <std>:
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	b510      	push	{r4, lr}
 8004ef4:	4604      	mov	r4, r0
 8004ef6:	e9c0 3300 	strd	r3, r3, [r0]
 8004efa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004efe:	6083      	str	r3, [r0, #8]
 8004f00:	8181      	strh	r1, [r0, #12]
 8004f02:	6643      	str	r3, [r0, #100]	; 0x64
 8004f04:	81c2      	strh	r2, [r0, #14]
 8004f06:	6183      	str	r3, [r0, #24]
 8004f08:	4619      	mov	r1, r3
 8004f0a:	2208      	movs	r2, #8
 8004f0c:	305c      	adds	r0, #92	; 0x5c
 8004f0e:	f7fd fbff 	bl	8002710 <memset>
 8004f12:	4b05      	ldr	r3, [pc, #20]	; (8004f28 <std+0x38>)
 8004f14:	6224      	str	r4, [r4, #32]
 8004f16:	6263      	str	r3, [r4, #36]	; 0x24
 8004f18:	4b04      	ldr	r3, [pc, #16]	; (8004f2c <std+0x3c>)
 8004f1a:	62a3      	str	r3, [r4, #40]	; 0x28
 8004f1c:	4b04      	ldr	r3, [pc, #16]	; (8004f30 <std+0x40>)
 8004f1e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004f20:	4b04      	ldr	r3, [pc, #16]	; (8004f34 <std+0x44>)
 8004f22:	6323      	str	r3, [r4, #48]	; 0x30
 8004f24:	bd10      	pop	{r4, pc}
 8004f26:	bf00      	nop
 8004f28:	08005231 	.word	0x08005231
 8004f2c:	08005253 	.word	0x08005253
 8004f30:	0800528b 	.word	0x0800528b
 8004f34:	080052af 	.word	0x080052af

08004f38 <_cleanup_r>:
 8004f38:	4901      	ldr	r1, [pc, #4]	; (8004f40 <_cleanup_r+0x8>)
 8004f3a:	f000 b8af 	b.w	800509c <_fwalk_reent>
 8004f3e:	bf00      	nop
 8004f40:	08004e79 	.word	0x08004e79

08004f44 <__sfmoreglue>:
 8004f44:	b570      	push	{r4, r5, r6, lr}
 8004f46:	2568      	movs	r5, #104	; 0x68
 8004f48:	1e4a      	subs	r2, r1, #1
 8004f4a:	4355      	muls	r5, r2
 8004f4c:	460e      	mov	r6, r1
 8004f4e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004f52:	f7ff fc1d 	bl	8004790 <_malloc_r>
 8004f56:	4604      	mov	r4, r0
 8004f58:	b140      	cbz	r0, 8004f6c <__sfmoreglue+0x28>
 8004f5a:	2100      	movs	r1, #0
 8004f5c:	e9c0 1600 	strd	r1, r6, [r0]
 8004f60:	300c      	adds	r0, #12
 8004f62:	60a0      	str	r0, [r4, #8]
 8004f64:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004f68:	f7fd fbd2 	bl	8002710 <memset>
 8004f6c:	4620      	mov	r0, r4
 8004f6e:	bd70      	pop	{r4, r5, r6, pc}

08004f70 <__sfp_lock_acquire>:
 8004f70:	4801      	ldr	r0, [pc, #4]	; (8004f78 <__sfp_lock_acquire+0x8>)
 8004f72:	f000 b8b3 	b.w	80050dc <__retarget_lock_acquire_recursive>
 8004f76:	bf00      	nop
 8004f78:	20000284 	.word	0x20000284

08004f7c <__sfp_lock_release>:
 8004f7c:	4801      	ldr	r0, [pc, #4]	; (8004f84 <__sfp_lock_release+0x8>)
 8004f7e:	f000 b8ae 	b.w	80050de <__retarget_lock_release_recursive>
 8004f82:	bf00      	nop
 8004f84:	20000284 	.word	0x20000284

08004f88 <__sinit_lock_acquire>:
 8004f88:	4801      	ldr	r0, [pc, #4]	; (8004f90 <__sinit_lock_acquire+0x8>)
 8004f8a:	f000 b8a7 	b.w	80050dc <__retarget_lock_acquire_recursive>
 8004f8e:	bf00      	nop
 8004f90:	2000027f 	.word	0x2000027f

08004f94 <__sinit_lock_release>:
 8004f94:	4801      	ldr	r0, [pc, #4]	; (8004f9c <__sinit_lock_release+0x8>)
 8004f96:	f000 b8a2 	b.w	80050de <__retarget_lock_release_recursive>
 8004f9a:	bf00      	nop
 8004f9c:	2000027f 	.word	0x2000027f

08004fa0 <__sinit>:
 8004fa0:	b510      	push	{r4, lr}
 8004fa2:	4604      	mov	r4, r0
 8004fa4:	f7ff fff0 	bl	8004f88 <__sinit_lock_acquire>
 8004fa8:	69a3      	ldr	r3, [r4, #24]
 8004faa:	b11b      	cbz	r3, 8004fb4 <__sinit+0x14>
 8004fac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fb0:	f7ff bff0 	b.w	8004f94 <__sinit_lock_release>
 8004fb4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004fb8:	6523      	str	r3, [r4, #80]	; 0x50
 8004fba:	4b13      	ldr	r3, [pc, #76]	; (8005008 <__sinit+0x68>)
 8004fbc:	4a13      	ldr	r2, [pc, #76]	; (800500c <__sinit+0x6c>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	62a2      	str	r2, [r4, #40]	; 0x28
 8004fc2:	42a3      	cmp	r3, r4
 8004fc4:	bf08      	it	eq
 8004fc6:	2301      	moveq	r3, #1
 8004fc8:	4620      	mov	r0, r4
 8004fca:	bf08      	it	eq
 8004fcc:	61a3      	streq	r3, [r4, #24]
 8004fce:	f000 f81f 	bl	8005010 <__sfp>
 8004fd2:	6060      	str	r0, [r4, #4]
 8004fd4:	4620      	mov	r0, r4
 8004fd6:	f000 f81b 	bl	8005010 <__sfp>
 8004fda:	60a0      	str	r0, [r4, #8]
 8004fdc:	4620      	mov	r0, r4
 8004fde:	f000 f817 	bl	8005010 <__sfp>
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	2104      	movs	r1, #4
 8004fe6:	60e0      	str	r0, [r4, #12]
 8004fe8:	6860      	ldr	r0, [r4, #4]
 8004fea:	f7ff ff81 	bl	8004ef0 <std>
 8004fee:	2201      	movs	r2, #1
 8004ff0:	2109      	movs	r1, #9
 8004ff2:	68a0      	ldr	r0, [r4, #8]
 8004ff4:	f7ff ff7c 	bl	8004ef0 <std>
 8004ff8:	2202      	movs	r2, #2
 8004ffa:	2112      	movs	r1, #18
 8004ffc:	68e0      	ldr	r0, [r4, #12]
 8004ffe:	f7ff ff77 	bl	8004ef0 <std>
 8005002:	2301      	movs	r3, #1
 8005004:	61a3      	str	r3, [r4, #24]
 8005006:	e7d1      	b.n	8004fac <__sinit+0xc>
 8005008:	080053d0 	.word	0x080053d0
 800500c:	08004f39 	.word	0x08004f39

08005010 <__sfp>:
 8005010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005012:	4607      	mov	r7, r0
 8005014:	f7ff ffac 	bl	8004f70 <__sfp_lock_acquire>
 8005018:	4b1e      	ldr	r3, [pc, #120]	; (8005094 <__sfp+0x84>)
 800501a:	681e      	ldr	r6, [r3, #0]
 800501c:	69b3      	ldr	r3, [r6, #24]
 800501e:	b913      	cbnz	r3, 8005026 <__sfp+0x16>
 8005020:	4630      	mov	r0, r6
 8005022:	f7ff ffbd 	bl	8004fa0 <__sinit>
 8005026:	3648      	adds	r6, #72	; 0x48
 8005028:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800502c:	3b01      	subs	r3, #1
 800502e:	d503      	bpl.n	8005038 <__sfp+0x28>
 8005030:	6833      	ldr	r3, [r6, #0]
 8005032:	b30b      	cbz	r3, 8005078 <__sfp+0x68>
 8005034:	6836      	ldr	r6, [r6, #0]
 8005036:	e7f7      	b.n	8005028 <__sfp+0x18>
 8005038:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800503c:	b9d5      	cbnz	r5, 8005074 <__sfp+0x64>
 800503e:	4b16      	ldr	r3, [pc, #88]	; (8005098 <__sfp+0x88>)
 8005040:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005044:	60e3      	str	r3, [r4, #12]
 8005046:	6665      	str	r5, [r4, #100]	; 0x64
 8005048:	f000 f847 	bl	80050da <__retarget_lock_init_recursive>
 800504c:	f7ff ff96 	bl	8004f7c <__sfp_lock_release>
 8005050:	2208      	movs	r2, #8
 8005052:	4629      	mov	r1, r5
 8005054:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005058:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800505c:	6025      	str	r5, [r4, #0]
 800505e:	61a5      	str	r5, [r4, #24]
 8005060:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005064:	f7fd fb54 	bl	8002710 <memset>
 8005068:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800506c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005070:	4620      	mov	r0, r4
 8005072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005074:	3468      	adds	r4, #104	; 0x68
 8005076:	e7d9      	b.n	800502c <__sfp+0x1c>
 8005078:	2104      	movs	r1, #4
 800507a:	4638      	mov	r0, r7
 800507c:	f7ff ff62 	bl	8004f44 <__sfmoreglue>
 8005080:	4604      	mov	r4, r0
 8005082:	6030      	str	r0, [r6, #0]
 8005084:	2800      	cmp	r0, #0
 8005086:	d1d5      	bne.n	8005034 <__sfp+0x24>
 8005088:	f7ff ff78 	bl	8004f7c <__sfp_lock_release>
 800508c:	230c      	movs	r3, #12
 800508e:	603b      	str	r3, [r7, #0]
 8005090:	e7ee      	b.n	8005070 <__sfp+0x60>
 8005092:	bf00      	nop
 8005094:	080053d0 	.word	0x080053d0
 8005098:	ffff0001 	.word	0xffff0001

0800509c <_fwalk_reent>:
 800509c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80050a0:	4606      	mov	r6, r0
 80050a2:	4688      	mov	r8, r1
 80050a4:	2700      	movs	r7, #0
 80050a6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80050aa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80050ae:	f1b9 0901 	subs.w	r9, r9, #1
 80050b2:	d505      	bpl.n	80050c0 <_fwalk_reent+0x24>
 80050b4:	6824      	ldr	r4, [r4, #0]
 80050b6:	2c00      	cmp	r4, #0
 80050b8:	d1f7      	bne.n	80050aa <_fwalk_reent+0xe>
 80050ba:	4638      	mov	r0, r7
 80050bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050c0:	89ab      	ldrh	r3, [r5, #12]
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d907      	bls.n	80050d6 <_fwalk_reent+0x3a>
 80050c6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80050ca:	3301      	adds	r3, #1
 80050cc:	d003      	beq.n	80050d6 <_fwalk_reent+0x3a>
 80050ce:	4629      	mov	r1, r5
 80050d0:	4630      	mov	r0, r6
 80050d2:	47c0      	blx	r8
 80050d4:	4307      	orrs	r7, r0
 80050d6:	3568      	adds	r5, #104	; 0x68
 80050d8:	e7e9      	b.n	80050ae <_fwalk_reent+0x12>

080050da <__retarget_lock_init_recursive>:
 80050da:	4770      	bx	lr

080050dc <__retarget_lock_acquire_recursive>:
 80050dc:	4770      	bx	lr

080050de <__retarget_lock_release_recursive>:
 80050de:	4770      	bx	lr

080050e0 <__swhatbuf_r>:
 80050e0:	b570      	push	{r4, r5, r6, lr}
 80050e2:	460e      	mov	r6, r1
 80050e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050e8:	4614      	mov	r4, r2
 80050ea:	2900      	cmp	r1, #0
 80050ec:	461d      	mov	r5, r3
 80050ee:	b096      	sub	sp, #88	; 0x58
 80050f0:	da07      	bge.n	8005102 <__swhatbuf_r+0x22>
 80050f2:	2300      	movs	r3, #0
 80050f4:	602b      	str	r3, [r5, #0]
 80050f6:	89b3      	ldrh	r3, [r6, #12]
 80050f8:	061a      	lsls	r2, r3, #24
 80050fa:	d410      	bmi.n	800511e <__swhatbuf_r+0x3e>
 80050fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005100:	e00e      	b.n	8005120 <__swhatbuf_r+0x40>
 8005102:	466a      	mov	r2, sp
 8005104:	f000 f8fa 	bl	80052fc <_fstat_r>
 8005108:	2800      	cmp	r0, #0
 800510a:	dbf2      	blt.n	80050f2 <__swhatbuf_r+0x12>
 800510c:	9a01      	ldr	r2, [sp, #4]
 800510e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005112:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005116:	425a      	negs	r2, r3
 8005118:	415a      	adcs	r2, r3
 800511a:	602a      	str	r2, [r5, #0]
 800511c:	e7ee      	b.n	80050fc <__swhatbuf_r+0x1c>
 800511e:	2340      	movs	r3, #64	; 0x40
 8005120:	2000      	movs	r0, #0
 8005122:	6023      	str	r3, [r4, #0]
 8005124:	b016      	add	sp, #88	; 0x58
 8005126:	bd70      	pop	{r4, r5, r6, pc}

08005128 <__smakebuf_r>:
 8005128:	898b      	ldrh	r3, [r1, #12]
 800512a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800512c:	079d      	lsls	r5, r3, #30
 800512e:	4606      	mov	r6, r0
 8005130:	460c      	mov	r4, r1
 8005132:	d507      	bpl.n	8005144 <__smakebuf_r+0x1c>
 8005134:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005138:	6023      	str	r3, [r4, #0]
 800513a:	6123      	str	r3, [r4, #16]
 800513c:	2301      	movs	r3, #1
 800513e:	6163      	str	r3, [r4, #20]
 8005140:	b002      	add	sp, #8
 8005142:	bd70      	pop	{r4, r5, r6, pc}
 8005144:	466a      	mov	r2, sp
 8005146:	ab01      	add	r3, sp, #4
 8005148:	f7ff ffca 	bl	80050e0 <__swhatbuf_r>
 800514c:	9900      	ldr	r1, [sp, #0]
 800514e:	4605      	mov	r5, r0
 8005150:	4630      	mov	r0, r6
 8005152:	f7ff fb1d 	bl	8004790 <_malloc_r>
 8005156:	b948      	cbnz	r0, 800516c <__smakebuf_r+0x44>
 8005158:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800515c:	059a      	lsls	r2, r3, #22
 800515e:	d4ef      	bmi.n	8005140 <__smakebuf_r+0x18>
 8005160:	f023 0303 	bic.w	r3, r3, #3
 8005164:	f043 0302 	orr.w	r3, r3, #2
 8005168:	81a3      	strh	r3, [r4, #12]
 800516a:	e7e3      	b.n	8005134 <__smakebuf_r+0xc>
 800516c:	4b0d      	ldr	r3, [pc, #52]	; (80051a4 <__smakebuf_r+0x7c>)
 800516e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005170:	89a3      	ldrh	r3, [r4, #12]
 8005172:	6020      	str	r0, [r4, #0]
 8005174:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005178:	81a3      	strh	r3, [r4, #12]
 800517a:	9b00      	ldr	r3, [sp, #0]
 800517c:	6120      	str	r0, [r4, #16]
 800517e:	6163      	str	r3, [r4, #20]
 8005180:	9b01      	ldr	r3, [sp, #4]
 8005182:	b15b      	cbz	r3, 800519c <__smakebuf_r+0x74>
 8005184:	4630      	mov	r0, r6
 8005186:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800518a:	f000 f8c9 	bl	8005320 <_isatty_r>
 800518e:	b128      	cbz	r0, 800519c <__smakebuf_r+0x74>
 8005190:	89a3      	ldrh	r3, [r4, #12]
 8005192:	f023 0303 	bic.w	r3, r3, #3
 8005196:	f043 0301 	orr.w	r3, r3, #1
 800519a:	81a3      	strh	r3, [r4, #12]
 800519c:	89a0      	ldrh	r0, [r4, #12]
 800519e:	4305      	orrs	r5, r0
 80051a0:	81a5      	strh	r5, [r4, #12]
 80051a2:	e7cd      	b.n	8005140 <__smakebuf_r+0x18>
 80051a4:	08004f39 	.word	0x08004f39

080051a8 <_raise_r>:
 80051a8:	291f      	cmp	r1, #31
 80051aa:	b538      	push	{r3, r4, r5, lr}
 80051ac:	4604      	mov	r4, r0
 80051ae:	460d      	mov	r5, r1
 80051b0:	d904      	bls.n	80051bc <_raise_r+0x14>
 80051b2:	2316      	movs	r3, #22
 80051b4:	6003      	str	r3, [r0, #0]
 80051b6:	f04f 30ff 	mov.w	r0, #4294967295
 80051ba:	bd38      	pop	{r3, r4, r5, pc}
 80051bc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80051be:	b112      	cbz	r2, 80051c6 <_raise_r+0x1e>
 80051c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80051c4:	b94b      	cbnz	r3, 80051da <_raise_r+0x32>
 80051c6:	4620      	mov	r0, r4
 80051c8:	f000 f830 	bl	800522c <_getpid_r>
 80051cc:	462a      	mov	r2, r5
 80051ce:	4601      	mov	r1, r0
 80051d0:	4620      	mov	r0, r4
 80051d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80051d6:	f000 b817 	b.w	8005208 <_kill_r>
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d00a      	beq.n	80051f4 <_raise_r+0x4c>
 80051de:	1c59      	adds	r1, r3, #1
 80051e0:	d103      	bne.n	80051ea <_raise_r+0x42>
 80051e2:	2316      	movs	r3, #22
 80051e4:	6003      	str	r3, [r0, #0]
 80051e6:	2001      	movs	r0, #1
 80051e8:	e7e7      	b.n	80051ba <_raise_r+0x12>
 80051ea:	2400      	movs	r4, #0
 80051ec:	4628      	mov	r0, r5
 80051ee:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80051f2:	4798      	blx	r3
 80051f4:	2000      	movs	r0, #0
 80051f6:	e7e0      	b.n	80051ba <_raise_r+0x12>

080051f8 <raise>:
 80051f8:	4b02      	ldr	r3, [pc, #8]	; (8005204 <raise+0xc>)
 80051fa:	4601      	mov	r1, r0
 80051fc:	6818      	ldr	r0, [r3, #0]
 80051fe:	f7ff bfd3 	b.w	80051a8 <_raise_r>
 8005202:	bf00      	nop
 8005204:	2000000c 	.word	0x2000000c

08005208 <_kill_r>:
 8005208:	b538      	push	{r3, r4, r5, lr}
 800520a:	2300      	movs	r3, #0
 800520c:	4d06      	ldr	r5, [pc, #24]	; (8005228 <_kill_r+0x20>)
 800520e:	4604      	mov	r4, r0
 8005210:	4608      	mov	r0, r1
 8005212:	4611      	mov	r1, r2
 8005214:	602b      	str	r3, [r5, #0]
 8005216:	f7fb ffad 	bl	8001174 <_kill>
 800521a:	1c43      	adds	r3, r0, #1
 800521c:	d102      	bne.n	8005224 <_kill_r+0x1c>
 800521e:	682b      	ldr	r3, [r5, #0]
 8005220:	b103      	cbz	r3, 8005224 <_kill_r+0x1c>
 8005222:	6023      	str	r3, [r4, #0]
 8005224:	bd38      	pop	{r3, r4, r5, pc}
 8005226:	bf00      	nop
 8005228:	20000278 	.word	0x20000278

0800522c <_getpid_r>:
 800522c:	f7fb bf9b 	b.w	8001166 <_getpid>

08005230 <__sread>:
 8005230:	b510      	push	{r4, lr}
 8005232:	460c      	mov	r4, r1
 8005234:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005238:	f000 f894 	bl	8005364 <_read_r>
 800523c:	2800      	cmp	r0, #0
 800523e:	bfab      	itete	ge
 8005240:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005242:	89a3      	ldrhlt	r3, [r4, #12]
 8005244:	181b      	addge	r3, r3, r0
 8005246:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800524a:	bfac      	ite	ge
 800524c:	6563      	strge	r3, [r4, #84]	; 0x54
 800524e:	81a3      	strhlt	r3, [r4, #12]
 8005250:	bd10      	pop	{r4, pc}

08005252 <__swrite>:
 8005252:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005256:	461f      	mov	r7, r3
 8005258:	898b      	ldrh	r3, [r1, #12]
 800525a:	4605      	mov	r5, r0
 800525c:	05db      	lsls	r3, r3, #23
 800525e:	460c      	mov	r4, r1
 8005260:	4616      	mov	r6, r2
 8005262:	d505      	bpl.n	8005270 <__swrite+0x1e>
 8005264:	2302      	movs	r3, #2
 8005266:	2200      	movs	r2, #0
 8005268:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800526c:	f000 f868 	bl	8005340 <_lseek_r>
 8005270:	89a3      	ldrh	r3, [r4, #12]
 8005272:	4632      	mov	r2, r6
 8005274:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005278:	81a3      	strh	r3, [r4, #12]
 800527a:	4628      	mov	r0, r5
 800527c:	463b      	mov	r3, r7
 800527e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005282:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005286:	f000 b817 	b.w	80052b8 <_write_r>

0800528a <__sseek>:
 800528a:	b510      	push	{r4, lr}
 800528c:	460c      	mov	r4, r1
 800528e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005292:	f000 f855 	bl	8005340 <_lseek_r>
 8005296:	1c43      	adds	r3, r0, #1
 8005298:	89a3      	ldrh	r3, [r4, #12]
 800529a:	bf15      	itete	ne
 800529c:	6560      	strne	r0, [r4, #84]	; 0x54
 800529e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80052a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80052a6:	81a3      	strheq	r3, [r4, #12]
 80052a8:	bf18      	it	ne
 80052aa:	81a3      	strhne	r3, [r4, #12]
 80052ac:	bd10      	pop	{r4, pc}

080052ae <__sclose>:
 80052ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052b2:	f000 b813 	b.w	80052dc <_close_r>
	...

080052b8 <_write_r>:
 80052b8:	b538      	push	{r3, r4, r5, lr}
 80052ba:	4604      	mov	r4, r0
 80052bc:	4608      	mov	r0, r1
 80052be:	4611      	mov	r1, r2
 80052c0:	2200      	movs	r2, #0
 80052c2:	4d05      	ldr	r5, [pc, #20]	; (80052d8 <_write_r+0x20>)
 80052c4:	602a      	str	r2, [r5, #0]
 80052c6:	461a      	mov	r2, r3
 80052c8:	f7fb ff8b 	bl	80011e2 <_write>
 80052cc:	1c43      	adds	r3, r0, #1
 80052ce:	d102      	bne.n	80052d6 <_write_r+0x1e>
 80052d0:	682b      	ldr	r3, [r5, #0]
 80052d2:	b103      	cbz	r3, 80052d6 <_write_r+0x1e>
 80052d4:	6023      	str	r3, [r4, #0]
 80052d6:	bd38      	pop	{r3, r4, r5, pc}
 80052d8:	20000278 	.word	0x20000278

080052dc <_close_r>:
 80052dc:	b538      	push	{r3, r4, r5, lr}
 80052de:	2300      	movs	r3, #0
 80052e0:	4d05      	ldr	r5, [pc, #20]	; (80052f8 <_close_r+0x1c>)
 80052e2:	4604      	mov	r4, r0
 80052e4:	4608      	mov	r0, r1
 80052e6:	602b      	str	r3, [r5, #0]
 80052e8:	f7fb ff97 	bl	800121a <_close>
 80052ec:	1c43      	adds	r3, r0, #1
 80052ee:	d102      	bne.n	80052f6 <_close_r+0x1a>
 80052f0:	682b      	ldr	r3, [r5, #0]
 80052f2:	b103      	cbz	r3, 80052f6 <_close_r+0x1a>
 80052f4:	6023      	str	r3, [r4, #0]
 80052f6:	bd38      	pop	{r3, r4, r5, pc}
 80052f8:	20000278 	.word	0x20000278

080052fc <_fstat_r>:
 80052fc:	b538      	push	{r3, r4, r5, lr}
 80052fe:	2300      	movs	r3, #0
 8005300:	4d06      	ldr	r5, [pc, #24]	; (800531c <_fstat_r+0x20>)
 8005302:	4604      	mov	r4, r0
 8005304:	4608      	mov	r0, r1
 8005306:	4611      	mov	r1, r2
 8005308:	602b      	str	r3, [r5, #0]
 800530a:	f7fb ff91 	bl	8001230 <_fstat>
 800530e:	1c43      	adds	r3, r0, #1
 8005310:	d102      	bne.n	8005318 <_fstat_r+0x1c>
 8005312:	682b      	ldr	r3, [r5, #0]
 8005314:	b103      	cbz	r3, 8005318 <_fstat_r+0x1c>
 8005316:	6023      	str	r3, [r4, #0]
 8005318:	bd38      	pop	{r3, r4, r5, pc}
 800531a:	bf00      	nop
 800531c:	20000278 	.word	0x20000278

08005320 <_isatty_r>:
 8005320:	b538      	push	{r3, r4, r5, lr}
 8005322:	2300      	movs	r3, #0
 8005324:	4d05      	ldr	r5, [pc, #20]	; (800533c <_isatty_r+0x1c>)
 8005326:	4604      	mov	r4, r0
 8005328:	4608      	mov	r0, r1
 800532a:	602b      	str	r3, [r5, #0]
 800532c:	f7fb ff8f 	bl	800124e <_isatty>
 8005330:	1c43      	adds	r3, r0, #1
 8005332:	d102      	bne.n	800533a <_isatty_r+0x1a>
 8005334:	682b      	ldr	r3, [r5, #0]
 8005336:	b103      	cbz	r3, 800533a <_isatty_r+0x1a>
 8005338:	6023      	str	r3, [r4, #0]
 800533a:	bd38      	pop	{r3, r4, r5, pc}
 800533c:	20000278 	.word	0x20000278

08005340 <_lseek_r>:
 8005340:	b538      	push	{r3, r4, r5, lr}
 8005342:	4604      	mov	r4, r0
 8005344:	4608      	mov	r0, r1
 8005346:	4611      	mov	r1, r2
 8005348:	2200      	movs	r2, #0
 800534a:	4d05      	ldr	r5, [pc, #20]	; (8005360 <_lseek_r+0x20>)
 800534c:	602a      	str	r2, [r5, #0]
 800534e:	461a      	mov	r2, r3
 8005350:	f7fb ff87 	bl	8001262 <_lseek>
 8005354:	1c43      	adds	r3, r0, #1
 8005356:	d102      	bne.n	800535e <_lseek_r+0x1e>
 8005358:	682b      	ldr	r3, [r5, #0]
 800535a:	b103      	cbz	r3, 800535e <_lseek_r+0x1e>
 800535c:	6023      	str	r3, [r4, #0]
 800535e:	bd38      	pop	{r3, r4, r5, pc}
 8005360:	20000278 	.word	0x20000278

08005364 <_read_r>:
 8005364:	b538      	push	{r3, r4, r5, lr}
 8005366:	4604      	mov	r4, r0
 8005368:	4608      	mov	r0, r1
 800536a:	4611      	mov	r1, r2
 800536c:	2200      	movs	r2, #0
 800536e:	4d05      	ldr	r5, [pc, #20]	; (8005384 <_read_r+0x20>)
 8005370:	602a      	str	r2, [r5, #0]
 8005372:	461a      	mov	r2, r3
 8005374:	f7fb ff18 	bl	80011a8 <_read>
 8005378:	1c43      	adds	r3, r0, #1
 800537a:	d102      	bne.n	8005382 <_read_r+0x1e>
 800537c:	682b      	ldr	r3, [r5, #0]
 800537e:	b103      	cbz	r3, 8005382 <_read_r+0x1e>
 8005380:	6023      	str	r3, [r4, #0]
 8005382:	bd38      	pop	{r3, r4, r5, pc}
 8005384:	20000278 	.word	0x20000278

08005388 <_init>:
 8005388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800538a:	bf00      	nop
 800538c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800538e:	bc08      	pop	{r3}
 8005390:	469e      	mov	lr, r3
 8005392:	4770      	bx	lr

08005394 <_fini>:
 8005394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005396:	bf00      	nop
 8005398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800539a:	bc08      	pop	{r3}
 800539c:	469e      	mov	lr, r3
 800539e:	4770      	bx	lr
